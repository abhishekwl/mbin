{"version":3,"sources":["webpack:///./components/login/login_controller/index.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx","webpack:///./components/login/login_mfa.jsx"],"names":["_reactRedux","__webpack_require__","_general","_constants","connect","state","config","getConfig","isLicensed","getLicense","IsLicensed","customBrandText","CustomBrandText","customDescriptionText","CustomDescriptionText","enableCustomBrand","EnableCustomBrand","enableLdap","EnableLdap","enableOpenServer","EnableOpenServer","enableSaml","EnableSaml","enableSignInWithEmail","EnableSignInWithEmail","enableSignInWithUsername","EnableSignInWithUsername","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalPrimaryTeam","ExperimentalPrimaryTeam","ldapLoginFieldName","LdapLoginFieldName","samlLoginButtonText","SamlLoginButtonText","siteName","SiteName","initializing","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","LoginController","_reactIntl","_reactRouterDom","_client","GlobalActions","_team_actions","_user_actions","_browser_history","TextFormatting","Utils","_notifications","_i18n","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","showSessionExpiredNotificationIfNeeded","sessionExpired","closeSessionExpiredNotification","showNotification","title","body","localizeMessage","requireInteraction","silent","onClick","window","focus","then","closeNotification","catch","onDismissSessionExpired","LocalStorageStore","setWasLoggedIn","setState","hideMfa","showMfa","preSubmit","bind","submit","finishSignin","handleLoginIdChange","handlePasswordChange","loginId","URLSearchParams","location","search","get","Constants","SIGNIN_VERIFIED","ldapEnabled","usernameSigninEnabled","emailSigninEnabled","samlEnabled","password","loading","intl","intlShape","isRequired","PropTypes","object","bool","string","configureTitle","UserStore","getCurrentUser","redirectUserToDefaultTeam","extra","email","refs","getWasLoggedIn","SIGNIN_CHANGE","set","SESSION_EXPIRED","browserHistory","replace","pathname","document","formatMessage","id","defaultMessage","e","_this2","preventDefault","newQuery","hash","value","trim","toLowerCase","t","msgId","serverError","_react2","createElement","FormattedMessage","values","ldapUsername","checkMfa","requiresMfa","err","message","token","_this3","webLogin","params","inviteToken","inviteId","addUserToTeamFromInvite","team","push","encodeURIComponent","primaryTeam","TeamStore","getByName","redirectTo","loadCurrentLocale","match","name","DEFAULT_CHANNEL","target","text","formattedText","formatText","src","Client4","getBrandImageUrl","_message_html_to_component2","mentions","loginPlaceholders","length","slice","join","extraParam","extraBox","className","Link","to","GET_TERMS_ERROR","TERMS_REJECTED","_formatted_markdown_message2","PASSWORD_CHANGE","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","errorClass","loginButton","key","onSubmit","_form_error2","error","margin","ref","onChange","placeholder","createLoginPlaceholder","spellCheck","autoCapitalize","autoFocus","type","checkSignUpEnabled","href","getOAuthRoute","getUrl","_props","_loading_screen2","content","customContent","customClass","backButton","_login_mfa2","_back_button2","createLoginOptions","createCustomLogin","_announcement_bar2","logoImage","_site_name_and_description2","React","Component","injectIntl","_utils","BackButton","url","PureComponent","propTypes","func","defaultProps","module","exports","p","SiteNameAndDescription","description","Fragment","LoginMfa","handleChange","handleSubmit","saving","autoComplete","_save_button2","disabled","savingMessage"],"mappings":"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","file":"14.c4f0ad80788fdc48d0a4.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    return {\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nexport default connect(mapStateToProps)(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {addUserToTeamFromInvite} from 'actions/team_actions.jsx';\nimport {checkMfa, webLogin} from 'actions/user_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport LoginMfa from '../login_mfa.jsx';\nclass LoginController extends React.Component {\n    static get propTypes() {\n        return {\n            intl: intlShape.isRequired,\n\n            location: PropTypes.object.isRequired,\n            isLicensed: PropTypes.bool.isRequired,\n\n            customBrandText: PropTypes.string,\n            customDescriptionText: PropTypes.string,\n            enableCustomBrand: PropTypes.bool.isRequired,\n            enableLdap: PropTypes.bool.isRequired,\n            enableOpenServer: PropTypes.bool.isRequired,\n            enableSaml: PropTypes.bool.isRequired,\n            enableSignInWithEmail: PropTypes.bool.isRequired,\n            enableSignInWithUsername: PropTypes.bool.isRequired,\n            enableSignUpWithEmail: PropTypes.bool.isRequired,\n            enableSignUpWithGitLab: PropTypes.bool.isRequired,\n            enableSignUpWithGoogle: PropTypes.bool.isRequired,\n            enableSignUpWithOffice365: PropTypes.bool.isRequired,\n            experimentalPrimaryTeam: PropTypes.string,\n            ldapLoginFieldName: PropTypes.string,\n            samlLoginButtonText: PropTypes.string,\n            siteName: PropTypes.string,\n            initializing: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.preSubmit = this.preSubmit.bind(this);\n        this.submit = this.submit.bind(this);\n        this.finishSignin = this.finishSignin.bind(this);\n\n        this.handleLoginIdChange = this.handleLoginIdChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n        };\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (UserStore.getCurrentUser()) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.refs.password.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn() && extra !== Constants.SIGNIN_CHANGE) {\n            // Although the authority remains the local sessionExpired bit on the state, set this\n            // extra field in the querystring to signal the desktop app. And although eslint\n            // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n            // eslint-disable-next-line react/no-did-mount-set-state\n            this.setState({sessionExpired: true});\n            search.set('extra', Constants.SESSION_EXPIRED);\n            browserHistory.replace(`${this.props.location.pathname}?${search}`);\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle() {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.refs.loginId.value;\n        if (loginId !== this.state.loginId) {\n            this.setState({loginId});\n        }\n\n        const password = this.refs.password.value;\n        if (password !== this.state.password) {\n            this.setState({password});\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        checkMfa(\n            loginId,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(loginId, password, '');\n                }\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        this.setState({serverError: null, loading: true});\n\n        webLogin(\n            loginId,\n            password,\n            token,\n            () => {\n                // check for query params brought over from signup_user_complete\n                const params = new URLSearchParams(this.props.location.search);\n                const inviteToken = params.get('t') || '';\n                const inviteId = params.get('id') || '';\n\n                if (inviteId || inviteToken) {\n                    addUserToTeamFromInvite(\n                        inviteToken,\n                        inviteId,\n                        (team) => {\n                            this.finishSignin(team);\n                        },\n                        () => {\n                            // there's not really a good way to deal with this, so just let the user log in like normal\n                            this.finishSignin();\n                        }\n                    );\n\n                    return;\n                }\n\n                this.finishSignin();\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (err.id === 'store.sql_user.get_for_login.app_error' ||\n                    err.id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (err.id === 'api.user.check_user_password.invalid.app_error' || err.id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else {\n                    this.setState({showMfa: false, serverError: err.message, loading: false});\n                }\n            }\n        );\n    }\n\n    finishSignin(team) {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const primaryTeam = TeamStore.getByName(experimentalPrimaryTeam);\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        GlobalActions.loadCurrentLocale();\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (primaryTeam) {\n            browserHistory.push(`/${primaryTeam.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange(e) {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange(e) {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    createCustomLogin() {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n\n            return (\n                <div>\n                    <img\n                        src={Client4.getBrandImageUrl(0)}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder() {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled() {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createLoginOptions() {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n        let extraBox = '';\n        if (this.state.sessionExpired) {\n            extraBox = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-exclamation-triangle'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        } else if (extraParam === Constants.GET_TERMS_ERROR) {\n            extraBox = (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            extraBox = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-exclamation-triangle'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            extraBox = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            extraBox = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            extraBox = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        }\n\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            let loginButton = (\n                <FormattedMessage\n                    id='login.signIn'\n                    defaultMessage='Sign in'\n                />\n            );\n\n            if (this.state.loading) {\n                loginButton =\n                (<span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                    />\n                    <FormattedMessage\n                        id='login.signInLoading'\n                        defaultMessage='Signing in...'\n                    />\n                </span>);\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref='loginId'\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus='true'\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref='password'\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={Utils.localizeMessage('login.password', 'Password')}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                { loginButton }\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {extraBox}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div className='col-sm-12'>\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1>{siteName}</h1>\n                <h4 className='color--light'>\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n"],"sourceRoot":""}