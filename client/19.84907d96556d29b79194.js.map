{"version":3,"sources":["webpack:///./components/signup/signup_email/index.js","webpack:///./components/signup/signup_email/signup_email.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx"],"names":["_reactRedux","__webpack_require__","_general","_utils","connect","state","config","getConfig","enableSignUpWithEmail","EnableSignUpWithEmail","siteName","SiteName","termsOfServiceLink","TermsOfServiceLink","privacyPolicyLink","PrivacyPolicyLink","customDescriptionText","CustomDescriptionText","passwordConfig","getPasswordConfig","SignupEmail","_reactIntl","_reactRouterDom","_helpers","_diagnostics_actions","GlobalActions","_team_actions","_user_actions","_browser_history","Utils","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","handleSubmit","bind","getInviteInfo","renderEmailSignup","isUserValid","location","PropTypes","object","bool","isRequired","string","trackEvent","_this2","data","URLSearchParams","search","get","token","inviteId","email","teamDisplayName","teamName","teamId","loading","length","parsedData","JSON","parse","display_name","name","id","inviteData","setState","serverError","noOpenServerError","_react2","createElement","FormattedMessage","defaultMessage","user","_this3","loginById","password","BrowserStore","setGlobalItem","_stringify2","usedBefore","loadMe","then","redirectTo","browserHistory","push","redirectUserToDefaultTeam","err","encodeURIComponent","message","isSubmitting","providedEmail","refs","value","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","isValidUsername","values","min","Constants","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","_Utils$isValidPasswor","isValidPassword","valid","error","e","_this4","preventDefault","username","allow_marketing","createUserWithInvite","handleSignupSuccess","emailHelpText","className","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","_formatted_markdown_message2","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","onClick","disabled","_props","_loading_screen2","emailSignup","terms","_back_button2","src","logoImage","_site_name_and_description2","Link","to","React","Component","BackButton","url","title","localizeMessage","PureComponent","propTypes","func","defaultProps","module","exports","p","SiteNameAndDescription","description","Fragment"],"mappings":"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","file":"19.84907d96556d29b79194.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SignupEmail from './signup_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const siteName = config.SiteName;\n    const termsOfServiceLink = config.TermsOfServiceLink;\n    const privacyPolicyLink = config.PrivacyPolicyLink;\n    const customDescriptionText = config.CustomDescriptionText;\n\n    return {\n        enableSignUpWithEmail,\n        siteName,\n        termsOfServiceLink,\n        privacyPolicyLink,\n        customDescriptionText,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(SignupEmail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {getInviteInfo} from 'actions/team_actions.jsx';\nimport {createUserWithInvite, loadMe, loginById} from 'actions/user_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SignupEmail extends React.Component {\n    static get propTypes() {\n        return {\n            location: PropTypes.object,\n            enableSignUpWithEmail: PropTypes.bool.isRequired,\n            siteName: PropTypes.string,\n            termsOfServiceLink: PropTypes.string,\n            privacyPolicyLink: PropTypes.string,\n            customDescriptionText: PropTypes.string,\n            passwordConfig: PropTypes.object,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.getInviteInfo = this.getInviteInfo.bind(this);\n        this.renderEmailSignup = this.renderEmailSignup.bind(this);\n        this.isUserValid = this.isUserValid.bind(this);\n\n        this.state = this.getInviteInfo();\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n    }\n\n    getInviteInfo() {\n        let data = (new URLSearchParams(this.props.location.search)).get('d');\n        let token = (new URLSearchParams(this.props.location.search)).get('t');\n        const inviteId = (new URLSearchParams(this.props.location.search)).get('id');\n        let email = '';\n        let teamDisplayName = '';\n        let teamName = '';\n        let teamId = '';\n        let loading = false;\n        const serverError = '';\n        const noOpenServerError = false;\n\n        if (token && token.length > 0) {\n            const parsedData = JSON.parse(data);\n            email = parsedData.email;\n            teamDisplayName = parsedData.display_name;\n            teamName = parsedData.name;\n            teamId = parsedData.id;\n        } else if (inviteId && inviteId.length > 0) {\n            loading = true;\n            getInviteInfo(\n                inviteId,\n                (inviteData) => {\n                    if (!inviteData) {\n                        this.setState({loading: false});\n                        return;\n                    }\n\n                    this.setState({\n                        loading: false,\n                        serverError: '',\n                        teamDisplayName: inviteData.display_name,\n                        teamName: inviteData.name,\n                        teamId: inviteData.id,\n                    });\n                },\n                () => {\n                    this.setState({\n                        loading: false,\n                        noOpenServerError: true,\n                        serverError: (\n                            <FormattedMessage\n                                id='signup_user_completed.invalid_invite'\n                                defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                            />\n                        ),\n                    });\n                }\n            );\n\n            data = null;\n            token = null;\n        }\n\n        return {\n            data,\n            token,\n            email,\n            teamDisplayName,\n            teamName,\n            teamId,\n            inviteId,\n            loading,\n            serverError,\n            noOpenServerError,\n        };\n    }\n\n    handleSignupSuccess(user, data) {\n        trackEvent('signup', 'signup_user_02_complete');\n        loginById(\n            data.id,\n            user.password,\n            '',\n            () => {\n                if (this.state.token > 0) {\n                    BrowserStore.setGlobalItem(this.state.token, JSON.stringify({usedBefore: true}));\n                }\n\n                loadMe().then(\n                    () => {\n                        const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n                        if (redirectTo) {\n                            browserHistory.push(redirectTo);\n                        } else {\n                            GlobalActions.redirectUserToDefaultTeam();\n                        }\n                    }\n                );\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({\n                        serverError: err.message,\n                        isSubmitting: false,\n                    });\n                }\n            }\n        );\n    }\n\n    isUserValid() {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        if (!isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const {valid, error} = Utils.isValidPassword(providedPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: error,\n                serverError: '',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true,\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true,\n            };\n\n            createUserWithInvite(user,\n                this.state.token,\n                this.state.inviteId,\n                this.handleSignupSuccess.bind(this, user),\n                (err) => {\n                    this.setState({\n                        serverError: err.message,\n                        isSubmitting: false,\n                    });\n                }\n            );\n        }\n    }\n\n    renderEmailSignup() {\n        let emailError = null;\n        let emailHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage=\"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-' and '_'\"\n                    values={{\n                        min: Constants.MIN_USERNAME_LENGTH,\n                        max: Constants.MAX_USERNAME_LENGTH,\n                    }}\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedMarkdownMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is **{email}**. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: this.props.siteName,\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'margin--extra';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.whatis'\n                                defaultMessage=\"What's your email address?\"\n                            />\n                        </strong></h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.chooseUser'\n                                defaultMessage='Choose your username'\n                            />\n                        </strong></h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.choosePwd'\n                                defaultMessage='Choose your password'\n                            />\n                        </strong></h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='margin--extra'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            enableSignUpWithEmail,\n            location,\n            privacyPolicyLink,\n            siteName,\n            termsOfServiceLink,\n        } = this.props;\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (enableSignUpWithEmail) {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='create_team.agreement'\n                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our [Terms of Service]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot use {siteName}.'\n                        values={{\n                            siteName,\n                            TermsOfServiceLink: termsOfServiceLink,\n                            PrivacyPolicyLink: privacyPolicyLink,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <h4 className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Mattermost',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1>{siteName}</h1>\n                <h4 className='color--light'>\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n"],"sourceRoot":""}