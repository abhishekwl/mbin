{"version":3,"sources":["webpack:///./components/claim/index.js","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/login/login_mfa.jsx"],"names":["_reactRedux","__webpack_require__","_general","_utils","connect","state","config","getConfig","siteName","SiteName","ldapLoginFieldName","LdapLoginFieldName","passwordConfig","getPasswordConfig","ClaimController","_reactRouterDom","_this2","this","email","URLSearchParams","props","location","search","get","newType","currentType","_react2","default","createElement","_back_button2","className","src","logoImage","id","Switch","Route","path","match","url","render","_oauth_to_email2","_extends3","_email_to_oauth2","_ldap_to_email2","_email_to_ldap2","React","Component","propTypes","PropTypes","object","isRequired","string","shape","_reactIntl","_admin_actions","Utils","_global_actions","OAuthToEmail","_classCallCheck3","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","submit","bind","e","preventDefault","password","ReactDOM","findDOMNode","refs","value","error","localizeMessage","setState","_Utils$isValidPasswor","isValidPassword","valid","confirmPassword","passwordconfirm","oauthToEmail","emitUserLoggedOutEvent","err","message","formClass","uiType","Constants","SAML_SERVICE","toUpperCase","toTitleCase","FormattedMessage","defaultMessage","values","type","onSubmit","site","name","ref","placeholder","spellCheck","_user_actions","EmailToOAuth","preSubmit","showMfa","checkMfa","requiresMfa","loginId","token","_this3","emailToOAuth","data","window","href","follow_link","content","_login_mfa2","LDAPToEmail","passwordError","confirmError","ldapPasswordError","serverError","ldapPassword","ldappassword","switchFromLdapToEmail","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailpassword","ldapId","ldapid","trim","emailToLdap","ldapClass","loginPlaceholder","style","usernameInput","autoComplete","display","BackButton","Link","onClick","to","title","PureComponent","func","defaultProps","module","exports","p","LoginMfa","handleChange","target","replace","handleSubmit","saving","errorClass","autoFocus","onChange","_save_button2","disabled","savingMessage"],"mappings":"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","file":"23.ba6bdd497e475dedb3ed.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.Component {\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={(props) => (\n                                        <OAuthToEmail\n                                            {...props}\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={(props) => (\n                                        <EmailToOAuth\n                                            {...props}\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={(props) => (\n                                        <LDAPToEmail\n                                            {...props}\n                                            siteName={this.props.siteName}\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={(props) => (\n                                        <EmailToLDAP\n                                            {...props}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nClaimController.propTypes = {\n    location: PropTypes.object.isRequired,\n    siteName: PropTypes.string,\n    ldapLoginFieldName: PropTypes.string,\n    passwordConfig: PropTypes.object,\n\n    /*\n     * Object from react-router\n     */\n    match: PropTypes.shape({\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nexport default class OAuthToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            () => {\n                emitUserLoggedOutEvent('/', false, true);\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nOAuthToEmail.propTypes = {\n    currentType: PropTypes.string,\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n    passwordConfig: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\n\nexport default class EmailToOAuth extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {showMfa: false, password: ''};\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n        var state = {};\n\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '');\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                // Stay logged in and just redirect to the OAuth provider.\n                window.location.href = data.follow_link;\n            },\n            (err) => {\n                this.setState({error: err.message, showMfa: false});\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.email_to_oauth.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToOAuth.propTypes = {\n    newType: PropTypes.string,\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {checkMfa, switchFromLdapToEmail} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nexport default class LDAPToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapPassword) {\n        switchFromLdapToEmail(\n            this.props.email,\n            password,\n            token,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                emitUserLoggedOutEvent(data.follow_link, false, true);\n            },\n            (err) => {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nLDAPToEmail.propTypes = {\n    email: PropTypes.string,\n    passwordConfig: PropTypes.object,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nexport default class EmailToLDAP extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapId, ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                emitUserLoggedOutEvent(data.follow_link, false, true);\n            },\n            (err) => {\n                switch (err.id) {\n                case 'ent.ldap.do_login.user_not_registered.app_error':\n                case 'ent.ldap.do_login.user_filtered.app_error':\n                case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                    this.setState({ldapError: err.message, showMfa: false});\n                    break;\n                case 'ent.ldap.do_login.invalid_password.app_error':\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                    break;\n                case 'api.user.check_user_password.invalid.app_error':\n                    this.setState({passwordError: err.message, showMfa: false});\n                    break;\n                default:\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToLDAP.propTypes = {\n    email: PropTypes.string,\n    siteName: PropTypes.string,\n    ldapLoginFieldName: PropTypes.string,\n};\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n"],"sourceRoot":""}