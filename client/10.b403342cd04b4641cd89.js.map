{"version":3,"sources":["webpack:///./components/pdf_preview.jsx"],"names":["__webpack_require__","_reactIntl","PDFPreview","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","updateStateFromProps","bind","onDocumentLoad","onDocumentLoadError","onPageLoad","renderPDFPage","pdfPagesRendered","state","pdf","pdfPages","pdfPagesLoaded","numPages","loading","success","nextProps","fileUrl","i","pageIndex","canvas","refs","context","getContext","viewport","getViewport","height","width","renderContext","canvasContext","render","setState","PDFJS","getDocument","then","getPage","reason","console","log","page","_assign2","_react2","createElement","className","src","loadingGif","_file_info_preview2","fileInfo","pdfCanvases","push","ref","key","href","FormattedMessage","id","defaultMessage","React","PureComponent","propTypes","PropTypes","object","isRequired","string"],"mappings":"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","file":"10.b403342cd04b4641cd89.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PDFJS from 'pdfjs-dist';\n\nimport loadingGif from 'images/load.gif';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst MAX_PDF_PAGES = 5;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.updateStateFromProps = this.updateStateFromProps.bind(this);\n        this.onDocumentLoad = this.onDocumentLoad.bind(this);\n        this.onDocumentLoadError = this.onDocumentLoadError.bind(this);\n        this.onPageLoad = this.onPageLoad.bind(this);\n        this.renderPDFPage = this.renderPDFPage.bind(this);\n\n        this.pdfPagesRendered = {};\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n            this.pdfPagesRendered = {};\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }\n\n    renderPDFPage(pageIndex) {\n        if (this.pdfPagesRendered[pageIndex] || !this.state.pdfPagesLoaded[pageIndex]) {\n            return;\n        }\n\n        const canvas = this.refs['pdfCanvas' + pageIndex];\n        const context = canvas.getContext('2d');\n        const viewport = this.state.pdfPages[pageIndex].getViewport(1);\n\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        this.state.pdfPages[pageIndex].render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    updateStateFromProps(props) {\n        this.setState({\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        });\n\n        PDFJS.getDocument(props.fileUrl).then(this.onDocumentLoad, this.onDocumentLoadError);\n    }\n\n    onDocumentLoad(pdf) {\n        const numPages = pdf.numPages <= MAX_PDF_PAGES ? pdf.numPages : MAX_PDF_PAGES;\n        this.setState({pdf, numPages});\n        for (let i = 1; i <= pdf.numPages; i++) {\n            pdf.getPage(i).then(this.onPageLoad);\n        }\n    }\n\n    onDocumentLoadError(reason) {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    onPageLoad(page) {\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        if (page.pageIndex === 0) {\n            this.setState({success: true, loading: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <img\n                        className='loader-image'\n                        src={loadingGif}\n                    />\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={'pdfCanvas' + i}\n                    key={'previewpdfcanvas' + i}\n                />\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />\n                );\n            }\n        }\n\n        if (this.state.pdf.numPages > MAX_PDF_PAGES) {\n            pdfCanvases.push(\n                <a\n                    key='previewpdfmorepages'\n                    href={this.props.fileUrl}\n                    className='pdf-max-pages'\n                >\n                    <FormattedMessage\n                        id='pdf_preview.max_pages'\n                        defaultMessage='Download to read more pages'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='post-code'>\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}