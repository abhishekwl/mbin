{"version":3,"sources":["webpack:///./components/audit_table/index.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/code_block_ctrl_enter_section/index.js","webpack:///./components/user_settings/advanced/code_block_ctrl_enter_section/code_block_ctrl_enter_section.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/manage_timezones.jsx","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_languages.jsx","webpack:///./components/user_settings/display/user_settings_theme.jsx","webpack:///./components/user_settings/display/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/color_chooser.jsx","webpack:///./components/color_input.jsx","webpack:///./components/user_settings/display/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/access_history_modal/index.js","webpack:///./components/access_history_modal/access_history_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/components/more_info.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx"],"names":["_reactRedux","__webpack_require__","_users","_channels","connect","state","currentUser","getCurrentUser","getUser","userId","getByName","channelName","getChannelByName","AuditTable","formatAuditInfo","_reactIntl","_utils","_i18n","holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","props","accessList","formatMessage","intl","i","audits","length","audit","auditInfo","uContent","showUserId","profile","data","email","_react2","default","createElement","className","iContent","showIp","ip","sContent","showSession","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","FormattedMessage","ipContent","sessionContent","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelURL","channelObj","display_name","username","getDirectTeammate","userIdField","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","isSystemAdmin","roles","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","FormattedDate","value","day","month","year","FormattedTime","hour","minute","user_id","ip_address","session_id","propTypes","intlShape","isRequired","PropTypes","array","bool","object","func","injectIntl","utils","UserSettings","_classCallCheck3","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","onListenerChange","UserStore","areObjectsEqual","setState","addChangeListener","removeChangeListener","activeTab","_general2","activeSection","prevActiveSection","updateSection","updateTab","closeModal","collapseModal","_security2","setRequireConfirm","_notifications2","_display2","setEnforceFocus","_sidebar2","_advanced2","React","Component","string","_general","config","getConfig","enablePreviewFeatures","EnablePreviewFeatures","enableUserDeactivation","EnableUserDeactivation","AdvancedSettingsDisplay","_user_actions","_global_actions","Utils","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","getStateFromStores","advancedSettings","PreferenceStore","getCategory","Preferences","CATEGORY_ADVANCED_SETTINGS","settings","send_on_ctrl_enter","get","formatting","join_leave","preReleaseFeaturesKeys","_keys2","enabledFeatures","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_getIterator3","next","done","_step$value","_slicedToArray3","name","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","feature","FeatureTogglePrefix","label","err","return","previewFeaturesEnabled","preReleaseFeatures","isSaving","showDeactivateAccountModal","updateSetting","setting","toggleFeature","checked","String","forEach","saveEnabledFeatures","features","push","handleSubmit","preferences","getCurrentId","Array","isArray","category","savePreferences","handleUpdateSection","handleDeactivateAccountSubmit","updateActive","serverError","message","revokeAllSessions","emitUserLoggedOutEvent","handleShowDeactivateAccountModal","handleHideDeactivateAccountModal","section","renderFormattingSection","_setting_item_max2","title","inputs","type","onChange","bind","submit","saving","server_error","_setting_item_min2","describe","renderOnOffLabel","focused","prevSections","advancedCtrlSend","advancedPreviewFeatures","deactivateAccount","enabled","_this2","ctrlSendSection","ctrlSendActive","formattingSection","formattingSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","e","target","renderFeatureLabel","localizeMessage","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","saveButtonText","deactivateMemberButton","_confirm_modal2","show","confirmButtonClass","confirmButtonText","onConfirm","onCancel","data-dismiss","aria-label","onClick","aria-hidden","ref","_code_block_ctrl_enter_section2","onUpdateSection","_join_leave_section2","_redux","_preferences","_constants","_preferences2","joinLeave","ADVANCED_FILTER_JOIN_LEAVE","currentUserId","getCurrentUserId","dispatch","actions","bindActionCreators","JoinLeaveSection","_constants2","handleOnChange","currentTarget","joinLeaveState","_this$props","joinLeavePreference","AdvancedSections","JOIN_LEAVE","PureComponent","shape","codeBlockOnCtrlEnter","sendMessageOnCtrlEnter","getBool","CodeBlockCtrlEnterSection","codeBlockOnCtrlEnterState","codeBlockOnCtrlEnterPreference","codeBlockOnCtrlEnterSection","CODE_BLOCK_ON_CTRL_ENTER","Fragment","_timezone","_timezone2","_timezone_utils","timezones","getSupportedTimezones","userTimezone","getUserTimezone","automaticTimezoneNotSet","useAutomaticTimezone","automaticTimezone","shouldAutoUpdateTimezone","allowCustomThemes","AllowCustomThemes","enableLinkPreviews","EnableLinkPreviews","defaultClientLocale","DefaultClientLocale","enableThemeSelection","EnableThemeSelection","enableTimezone","ExperimentalTimezone","configTeammateNameDisplay","TeammateNameDisplay","currentUserTimezone","getUserCurrentTimezone","autoUpdateTimezone","UserSettingsDisplay","I18n","_i18n2","getDisplayStateFromStores","militaryTime","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","USE_MILITARY_TIME_DEFAULT","teammateNameDisplay","NAME_NAME_FORMAT","channelDisplayMode","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","messageDisplay","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","collapseDisplay","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","linkPreviewDisplay","LINK_PREVIEW_DISPLAY","LINK_PREVIEW_DISPLAY_DEFAULT","timePreference","teammateNameDisplayPreference","channelDisplayModePreference","messageDisplayPreference","collapseDisplayPreference","linkPreviewDisplayPreference","handleClockRadio","handleTeammateNameDisplayRadio","updateState","newState","_extends3","theme","clock","linkpreview","message_display","channel_display_mode","languages","_props","getBrowserTimezone","display","firstOption","secondOption","thirdOption","description","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","collapseSection","createSection","defaultDisplay","linkPreviewSection","clockSection","teammateNameDisplaySection","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","_manage_timezones2","manualTimezone","width","getTimezoneRegion","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","userLocale","locale","isLanguageAvailable","_manage_languages2","getLanguageInfo","getLanguages","themeSection","_user_settings_theme2","selected","ManageTimezones","manualTimezoneInput","handleTimezoneSelected","timezoneNotChanged","_this$state","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","changeTimezone","submitUser","_this$state2","timezone","toString","updatedUser","updateUser","handleAutomaticTimezone","handleManualTimezone","_state","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","disabled","providers","TimezoneProvider","_suggestion_box2","setSwitchBoxRef","onItemSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","FormattedHTMLMessage","containerStyle","TimezoneSuggestion","item","isSelection","handleClick","Suggestion","baseProps","suggestionId","timezonePrefix","displayAllTimezones","filterTimezones","setTimeout","AppDispatcher","handleServerAction","ActionTypes","SUGGESTION_RECEIVED_SUGGESTIONS","matchedPretext","terms","items","component","filteredTimezones","filter","Provider","GlobalActions","ManageLanguage","setLanguage","changeLanguage","newLocalizationSelected","options","locales","map","l","order","sort","a","b","lang","input","_formatted_markdown_message2","UserActions","ThemeSetting","submitTheme","teamId","applyToAllTeams","saveTheme","originalTheme","_assign2","scrollToTop","updateTheme","themeChanged","field","hasOwnProperty","applyTheme","resetFields","handleImportModal","handleViewAction","TOGGLE_IMPORT_THEME_MODAL","callback","_jquery2","ReactDOM","findDOMNode","refs","addClass","removeClass","nextProps","getTheme","codeTheme","DEFAULT_CODE_THEME","showAllTeamsCheckbox","TeamStore","getAll","CATEGORY_THEME","size","scrollTop","displayCustom","custom","premade","_custom_theme_chooser2","_premade_theme_chooser2","themeUI","href","rel","allTeamsCheckbox","submitExtra","_reactBootstrap","UserAgent","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","CustomThemeChooser","_initialiseProps","copyTheme","setCopyTheme","on","onCodeThemeChange","off","image","_stringify2","node","isIos","toggleClass","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","Popover","bsStyle","src","defaultValue","OverlayTrigger","trigger","placement","overlay","group","_color_chooser2","color","handleColorChange","mentionBj","pasteBox","onPaste","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","settingId","_this3","newTheme","_defineProperty3","text","window","clipboardData","getData","JSON","parse","stopPropagation","textarea","focus","setSelectionRange","preventDefault","sidebarStylesHeader","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","ColorChooser","handleChange","newColor","_color_input2","_reactColor","ColorInput","checkClick","colorPickerDOMNode","ReactDom","colorPicker","contains","isOpened","togglePicker","newColorData","hex","getColorPicker","idOpened","prevProps","prevState","prevIsOpened","document","addEventListener","removeEventListener","readOnly","style","backgroundColor","ChromePicker","allowedThemes","AllowedThemes","PremadeThemeChooser","premadeThemes","hasAllowedThemes","k","THEMES","premadeTheme","$","extend","activeClass","arrayOf","defaultProps","sendEmailNotifications","SendEmailNotifications","requireEmailVerification","RequireEmailVerification","maxFileSize","parseInt","MaxFileSize","ldapFirstNameAttributeSet","LdapFirstNameAttributeSet","ldapLastNameAttributeSet","LdapLastNameAttributeSet","samlFirstNameAttributeSet","SamlFirstNameAttributeSet","samlLastNameAttributeSet","SamlLastNameAttributeSet","ldapNicknameAttributeSet","LdapNicknameAttributeSet","samlNicknameAttributeSet","SamlNicknameAttributeSet","positionAttributeSet","PositionAttributeSet","getMe","sendVerificationEmail","UserSettingsGeneralTab","_helpers","_diagnostics_actions","usernameReserved","usernameRestrictions","validEmail","emailMatch","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","ACCEPTED_PROFILE_IMAGE_TYPES","handleEmailVerificationError","ErrorStore","storeLastError","notification","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","emitChange","handleEmailResend","resendStatus","showSpinner","then","_ref","error","createEmailResendLink","submitUsername","usernameError","isValidUsername","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","submitNickname","submitName","firstName","lastName","first_name","last_name","submitEmail","confirmEmail","isEmail","emailError","emailUpdated","sectionIsSaving","emailChangeInProgress","submitPicture","pictureFile","submitActive","file","includes","loadingPicture","uploadProfileImage","setupInitialState","submitPosition","updateUsername","updateFirstName","updateLastName","updateNickname","updatePosition","updateEmail","updateConfirmEmail","files","originalEmail","email_verified","emailSection","emailEnabled","emailVerificationEnabled","helpText","newEmail","autoFocus","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","extraInfo","onFocus","moveCursorToEnd","notifLink","notify","isMobile","nicknameSection","nicknameLabel","MAX_NICKNAME_LENGTH","autoCapitalize","usernameSection","usernameLabel","positionSection","positionLabel","MAX_POSITION_LENGTH","createEmailSection","pictureSection","_setting_picture2","onSubmit","imageURLForUser","onFileChange","minMessage","last_picture_update","isRequred","number","enableEmailBatching","EnableEmailBatching","siteName","SiteName","sendPushNotifications","SendPushNotifications","enableAutoResponder","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","getNotificationsStateFromStores","desktop","NotificationLevels","MENTION","sound","comments","enableEmail","pushActivity","pushStatus","UserStatuses","AWAY","autoResponderActive","autoResponderMessage","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","arguments","mentionKeys","stringKeys","updateUserNotifyProps","handleCancel","setStateValue","handleEmailRadio","wrapper","updateUsernameKey","val","updateFirstNameKey","updateChannelKey","updateCustomMentionKeys","customcheck","custommentions","onCustomChange","createPushNotificationSection","pushActivityRadio","ALL","NONE","pushStatusRadio","ONLINE","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","keysSection","concat","commentsSection","commentsActive","handleNotifyCommentsRadio","autoResponderSection","_manage_auto_responder2","setParentState","pushNotificationSection","_desktop_notification_settings2","activity","cancel","active","_email_notification_setting2","emailInterval","getEmailInterval","DesktopNotificationSettings","handleMinUpdateSection","handleMaxUpdateSection","getAttribute","buildMaximizedSetting","activityRadio","soundSection","soundRadio","hasSoundOptions","data-key","data-value","buildMinimizedSetting","seconds","DEFAULT_NOTIFICATION_DURATION","EmailNotificationSetting","savePreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","INTERVAL_IMMEDIATE","INTERVAL_HOUR","batchingOptions","batchingInfo","INTERVAL_FIFTEEN_MINUTES","data-enable-email","data-email-interval","INTERVAL_NEVER","ManageAutoResponder","handleAutoResponderChecked","onMessageChanged","activeToggle","_autosize_textarea2","resize","rows","placeholder","shiftEnter","UserUtils","ownProps","license","getLicense","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","hasUserAccessTokenRole","isLicensed","IsLicensed","mfaLicensed","MFA","enableOAuthServiceProvider","EnableOAuthServiceProvider","enableMultifactorAuthentication","EnableMultifactorAuthentication","enforceMultifactorAuthentication","EnforceMultifactorAuthentication","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableLdap","EnableLdap","enableSaml","EnableSaml","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","canUseAccessTokens","passwordConfig","getPasswordConfig","SecurityTab","_reactRouterDom","_browser_history","SECTION_MFA","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","submitPassword","currentPassword","newPassword","confirmPassword","_Utils$isValidPasswor","isValidPassword","valid","savingPassword","updatePassword","getDefaultState","passwordError","defaultState","setupMfa","browserHistory","removeMfa","deactivateMfa","updateCurrentPassword","updateNewPassword","updateConfirmPassword","deauthorizeApp","appId","deauthorizeOAuthApp","authorizedApps","app","createMfaSection","content","mfa_active","mfaRemoveHelp","mfaButtonText","createPasswordSection","d","last_password_update","hours12","time","hour12","createSignInSection","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","Link","to","encodeURIComponent","link","createOAuthAppsSection","apps","homepage","data-app","alt","icon_url","icon50","wrapperClass","cancelButtonText","tokenError","authService","getAuthorizedApps","passwordSection","numMethods","signInSection","mfaSection","oauthSection","tokensSection","_user_access_token_section2","_toggle_modal_button2","dialogType","AccessHistoryModal","ActivityLogModal","_users2","userAudits","getUserAudits","onShow","perfectScrollbar","onHide","_loading_screen2","_audit_table2","Modal","dialogClassName","onExited","bsSize","Header","closeButton","Title","Body","sessions","getUserSessions","getCurrentLocale","getSessions","revokeSession","submitRevoke","altId","modalContent","closest","loading","activityList","reduce","currentSession","_activity_log2","role","oneOfType","ActivityLog","handleMoreInfo","moreInfo","isMobileSession","session","device_id","mobileSessionInfo","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","last_activity_at","platform","sessionInfo","os","browser","getMonthLong","_more_info2","MoreInfo","firstAccessTime","userAccessTokens","entities","users","myUserAccessTokens","getUserAccessTokensForUser","createUserAccessToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","UserAccessTokenSection","_user_agent","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","startCreatingToken","tokenCreationState","stopCreatingToken","handleCreateToken","_asyncToGenerator3","_regenerator2","mark","_callee","_ref2","wrap","_context","prev","handleCancelConfirm","newtokendescription","abrupt","confirmCopyToken","sent","newToken","stop","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","confirmCreateToken","saveTokenKeyPress","isKeyPressed","KeyCodes","ENTER","confirmRevokeToken","tokenId","revokeToken","_ref3","_callee2","_ref4","_context2","_x","apply","activateToken","_ref5","_callee3","_ref6","_context3","_x2","deactivateToken","_ref7","_callee4","_ref8","_context4","_x3","tokenListClass","tokenList","_values2","activeLink","activeStatus","is_active","noTokenText","newTokenSection","onKeyPress","_save_button2","btnClass","savingMessage","infoPosition","hideCancel","closeUnusedDirectMessages","CATEGORY_SIDEBAR_SETTINGS","displayUnreadSection","ExperimentalGroupUnreadChannels","GroupUnreadChannels","DEFAULT_ON","channelSwitcherOption","showUnusedOption","CloseUnusedDirectMessages","showUnreadOption","DISABLED","UserSettingsSidebar","close_unused_direct_messages","show_unread_section","channel_switcher_section","_this$props2","renderAutoCloseDMLabel","renderAutoCloseDMSection","renderUnreadLabel","renderChannelSwitcherLabel","renderUnreadSection","renderChannelSwitcherSection","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","autoCloseDMSection","unreadSection","channelSwitcherSection"],"mappings":"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","file":"12.80fd4bc08ec6ce09f674.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nexport default connect(mapStateToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nfunction AuditTable(props) {\n    var accessList = [];\n\n    const {formatMessage} = props.intl;\n    for (var i = 0; i < props.audits.length; i++) {\n        const audit = props.audits[i];\n        const auditInfo = formatAuditInfo(audit, formatMessage, props.currentUser, props.getByName, props.getUser);\n\n        let uContent;\n        if (props.showUserId) {\n            const profile = props.getUser(auditInfo.userId);\n            const data = profile ? profile.email : auditInfo.userId;\n            uContent = <td className='word-break--all'>{data}</td>;\n        }\n\n        let iContent;\n        if (props.showIp) {\n            iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n        }\n\n        let sContent;\n        if (props.showSession) {\n            sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n        }\n\n        let descStyle = '';\n        if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n            descStyle = ' color--error';\n        }\n\n        accessList[i] = (\n            <tr key={audit.id}>\n                <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                {uContent}\n                <td\n                    className={'word-break--all' + descStyle}\n                >\n                    {auditInfo.desc}\n                </td>\n                {iContent}\n                {sContent}\n            </tr>\n        );\n    }\n\n    let userIdContent;\n    if (props.showUserId) {\n        userIdContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.userId'\n                    defaultMessage='User ID'\n                />\n            </th>\n        );\n    }\n\n    let ipContent;\n    if (props.showIp) {\n        ipContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.ip'\n                    defaultMessage='IP Address'\n                />\n            </th>\n        );\n    }\n\n    let sessionContent;\n    if (props.showSession) {\n        sessionContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.session'\n                    defaultMessage='Session ID'\n                />\n            </th>\n        );\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr>\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.timestamp'\n                            defaultMessage='Timestamp'\n                        />\n                    </th>\n                    {userIdContent}\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.action'\n                            defaultMessage='Action'\n                        />\n                    </th>\n                    {ipContent}\n                    {sessionContent}\n                </tr>\n            </thead>\n            <tbody>\n                {accessList}\n            </tbody>\n        </table>\n    );\n}\n\nAuditTable.propTypes = {\n    intl: intlShape.isRequired,\n    audits: PropTypes.array.isRequired,\n    showUserId: PropTypes.bool,\n    showIp: PropTypes.bool,\n    showSession: PropTypes.bool,\n    currentUser: PropTypes.object.isRequired,\n    getUser: PropTypes.func.isRequired,\n    getByName: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(AuditTable);\n\nexport function formatAuditInfo(audit, formatMessage, currentUser, getByName, getUser) {\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/channels') === 0) {\n        const channelInfo = audit.extra_info.split(' ');\n        const channelNameField = channelInfo[0].split('=');\n\n        let channelURL = '';\n        let channelObj;\n        let channelName = '';\n        if (channelNameField.indexOf('name') >= 0) {\n            channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n            channelObj = getByName(channelURL);\n            if (channelObj) {\n                channelName = channelObj.display_name;\n            } else {\n                channelName = channelURL;\n            }\n        }\n\n        switch (actionURL) {\n        case '/channels/create':\n            auditDesc = formatMessage(holders.channelCreated, {channelName});\n            break;\n        case '/channels/create_direct':\n            auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n            break;\n        case '/channels/update':\n            auditDesc = formatMessage(holders.nameUpdated, {channelName});\n            break;\n        case '/channels/update_desc': // support the old path\n        case '/channels/update_header':\n            auditDesc = formatMessage(holders.headerUpdated, {channelName});\n            break;\n        default: {\n            let userIdField = [];\n            let userId = '';\n            let username = '';\n\n            if (channelInfo[1]) {\n                userIdField = channelInfo[1].split('=');\n\n                if (userIdField.indexOf('user_id') >= 0) {\n                    userId = userIdField[userIdField.indexOf('user_id') + 1];\n                    var profile = getUser(userId);\n                    if (profile) {\n                        username = profile.username;\n                    }\n                }\n            }\n\n            if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userAdded, {username, channelName});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n            }\n\n            break;\n        }\n        }\n    } else if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/users') === 0) {\n        const userInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/users/login':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLogin);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullLogin);\n            } else if (userInfo[0] === 'authenticated') {\n                auditDesc = formatMessage(holders.authenticated);\n            } else if (userInfo[0]) {\n                auditDesc = formatMessage(holders.failedLogin);\n            }\n\n            break;\n        case '/users/revoke_session':\n            auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n            break;\n        case '/users/newimage':\n            auditDesc = formatMessage(holders.updatePicture);\n            break;\n        case '/users/update':\n            auditDesc = formatMessage(holders.updateGeneral);\n            break;\n        case '/users/newpassword':\n            if (userInfo[0] === 'attempted') {\n                auditDesc = formatMessage(holders.attemptedPassword);\n            } else if (userInfo[0] === 'completed') {\n                auditDesc = formatMessage(holders.successfullPassword);\n            } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                auditDesc = formatMessage(holders.failedPassword);\n            }\n\n            break;\n        case '/users/update_roles': {\n            const userRoles = userInfo[0].split('=')[1];\n\n            auditDesc = formatMessage(holders.updatedRol);\n            if (userRoles.trim()) {\n                auditDesc += userRoles;\n            } else {\n                auditDesc += formatMessage(holders.member);\n            }\n\n            break;\n        }\n        case '/users/update_active': {\n            const updateType = userInfo[0].split('=')[0];\n            const updateField = userInfo[0].split('=')[1];\n\n            /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n            if (updateType === 'active') {\n                if (updateField === 'true') {\n                    auditDesc = formatMessage(holders.accountActive);\n                } else if (updateField === 'false') {\n                    auditDesc = formatMessage(holders.accountInactive);\n                }\n\n                const actingUserInfo = userInfo[1].split('=');\n                if (actingUserInfo[0] === 'session_user') {\n                    const actingUser = getUser(actingUserInfo[1]);\n                    const user = currentUser;\n                    if (user && actingUser && isSystemAdmin(user.roles)) {\n                        auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                    } else if (user && actingUser) {\n                        auditDesc += formatMessage(holders.byAdmin);\n                    }\n                }\n            } else if (updateType === 'session_id') {\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n            }\n\n            break;\n        }\n        case '/users/send_password_reset':\n            auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n            break;\n        case '/users/reset_password':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedReset);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullReset);\n            }\n\n            break;\n        case '/users/update_notify':\n            auditDesc = formatMessage(holders.updateGlobalNotifications);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    /* If all else fails... */\n    if (!auditDesc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            auditDesc = formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            auditDesc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const auditInfo = {};\n    auditInfo.timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n    auditInfo.userId = audit.user_id;\n    auditInfo.desc = auditDesc;\n    auditInfo.ip = audit.ip_address;\n    auditInfo.sessionId = audit.session_id;\n\n    return auditInfo;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as utils from 'utils/utils.jsx';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {user: UserStore.getCurrentUser()};\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onListenerChange);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onListenerChange);\n    }\n\n    onListenerChange = () => {\n        var user = UserStore.getCurrentUser();\n        if (!utils.areObjectsEqual(this.state.user, user)) {\n            this.setState({user});\n        }\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.state.user}\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n\nUserSettings.propTypes = {\n    activeTab: PropTypes.string,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    updateSection: PropTypes.func,\n    updateTab: PropTypes.func,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    setEnforceFocus: PropTypes.func.isRequired,\n    setRequireConfirm: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n    const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n    return {\n        enablePreviewFeatures,\n        enableUserDeactivation,\n    };\n}\n\nexport default connect(mapStateToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreferences, updateActive, revokeAllSessions} from 'actions/user_actions.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport JoinLeaveSection from './join_leave_section';\nimport CodeBlockCtrlEnterSection from './code_block_ctrl_enter_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromStores();\n\n        this.prevSections = {\n            advancedCtrlSend: 'dummySectionName', // dummy value that should never match any section name\n            formatting: 'advancedCtrlSend',\n            join_leave: 'formatting',\n            advancedPreviewFeatures: 'join_leave',\n            deactivateAccount: 'advancedPreviewFeatures',\n        };\n    }\n\n    getStateFromStores = () => {\n        const advancedSettings = PreferenceStore.getCategory(Constants.Preferences.CATEGORY_ADVANCED_SETTINGS);\n        const settings = {\n            send_on_ctrl_enter: PreferenceStore.get(\n                Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                'send_on_ctrl_enter',\n                'false'\n            ),\n            formatting: PreferenceStore.get(\n                Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                'formatting',\n                'true'\n            ),\n            join_leave: PreferenceStore.get(\n                Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                'join_leave',\n                'true'\n            ),\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const [name, value] of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[name] = value;\n\n                    if (value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = (settings) => {\n        const preferences = [];\n        const userId = UserStore.getCurrentId();\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n\n        savePreferences(\n            preferences,\n            () => {\n                this.handleUpdateSection('');\n            }\n        );\n    }\n\n    handleDeactivateAccountSubmit = () => {\n        const userId = UserStore.getCurrentId();\n\n        this.setState({isSaving: true});\n\n        updateActive(userId, false,\n            null,\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n\n        revokeAllSessions(userId,\n            () => {\n                emitUserLoggedOutEvent();\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromStores());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <div key='formattingSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled. Changing this setting requires the page to be refreshed.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                focused={this.props.prevActiveSection === this.prevSections.formatting}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <div key='ctrlSendSetting'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={this.updateSetting.bind(this, 'send_on_ctrl_enter', 'true')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.on'\n                                defaultMessage='On'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={this.updateSetting.bind(this, 'send_on_ctrl_enter', 'false')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.sendDesc'\n                            defaultMessage='If enabled ENTER inserts a new line and CTRL+ENTER submits the message.'\n                        />\n                    </div>\n                </div>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'send_on_ctrl_enter'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    describe={this.renderOnOffLabel(this.state.settings.send_on_ctrl_enter)}\n                    focused={this.props.prevActiveSection === this.prevSections.advancedCtrlSend}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        focused={this.props.prevActiveSection === this.prevSections.advancedPreviewFeatures}\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = UserStore.getCurrentUser();\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        focused={this.props.prevActiveSection === this.prevSections.deactivateAccount}\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.back', 'Back Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    <CodeBlockCtrlEnterSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        prevActiveSection={this.props.prevActiveSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n\nAdvancedSettingsDisplay.propTypes = {\n    updateSection: PropTypes.func,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    enablePreviewFeatures: PropTypes.bool,\n    enableUserDeactivation: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport {AdvancedSections} from 'utils/constants.jsx';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        prevActiveSection: PropTypes.string,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <div key='joinLeaveSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                focused={this.props.prevActiveSection === AdvancedSections.JOIN_LEAVE}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference, getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport CodeBlockCtrlEnterSection from './code_block_ctrl_enter_section';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        codeBlockOnCtrlEnter: getPreference(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n        sendMessageOnCtrlEnter: getBool(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter'),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CodeBlockCtrlEnterSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport {AdvancedSections} from 'utils/constants.jsx';\n\nexport default class CodeBlockCtrlEnterSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.string,\n        sendMessageOnCtrlEnter: PropTypes.bool,\n        onUpdateSection: PropTypes.func.isRequired,\n        prevActiveSection: PropTypes.string,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            codeBlockOnCtrlEnterState: props.codeBlockOnCtrlEnter,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({codeBlockOnCtrlEnterState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({codeBlockOnCtrlEnterState: this.props.codeBlockOnCtrlEnter});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const codeBlockOnCtrlEnterPreference = {\n            user_id: currentUserId,\n            category: Preferences.CATEGORY_ADVANCED_SETTINGS,\n            name: 'code_block_ctrl_enter',\n            value: this.state.codeBlockOnCtrlEnterState,\n        };\n\n        actions.savePreferences(currentUserId, [codeBlockOnCtrlEnterPreference]);\n        onUpdateSection();\n    }\n\n    render() {\n        if (this.props.sendMessageOnCtrlEnter) {\n            return null;\n        }\n\n        const {codeBlockOnCtrlEnterState} = this.state;\n\n        let codeBlockOnCtrlEnterSection = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.codeBlockOnCtrlEnterSendTitle'\n                        defaultMessage='Send code block messages on CTRL + ENTER'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(codeBlockOnCtrlEnterState)}\n                focused={this.props.prevActiveSection === AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                section={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n        if (this.props.activeSection === AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER) {\n            codeBlockOnCtrlEnterSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.codeBlockOnCtrlEnterSendTitle'\n                            defaultMessage='Send code block messages on CTRL + ENTER'\n                        />\n                    }\n                    inputs={[\n                        <div key='codeBlockOnCtrlEnterSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='codeBlockOnCtrlEnterOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                                        checked={codeBlockOnCtrlEnterState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='codeBlockOnCtrlEnterOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                                        checked={codeBlockOnCtrlEnterState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.advance.codeBlockOnCtrlEnterSendDesc'\n                                    defaultMessage='If enabled, ENTER inserts a new line within messages formatted as code starting with ```. CTRL + ENTER submits the message.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={AdvancedSections.CODE_BLOCK_ON_CTRL_ENTER}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <div className='divider-light'/>\n                {codeBlockOnCtrlEnterSection}\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreferences} from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport ManageTimezones from './manage_timezones.jsx';\nimport ManageLanguages from './manage_languages.jsx';\nimport ThemeSetting from './user_settings_theme';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromStores(props) {\n    return {\n        militaryTime: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, props.configTeammateNameDisplay),\n        channelDisplayMode: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: PreferenceStore.get(Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromStores(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    handleSubmit = () => {\n        const userId = UserStore.getCurrentId();\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        savePreferences(preferences, () => {\n            this.updateSection('');\n        });\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromStores(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n        } = props;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [\n                <div key={key}>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </div>,\n            ];\n\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === this.prevSections[section]}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display Mode',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        focused={this.props.prevActiveSection === this.prevSections.languages}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.back', 'Back Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n\nUserSettingsDisplay.propTypes = {\n    user: PropTypes.object,\n    updateSection: PropTypes.func,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    setRequireConfirm: PropTypes.func.isRequired,\n    setEnforceFocus: PropTypes.func.isRequired,\n    timezones: PropTypes.array.isRequired,\n    userTimezone: PropTypes.object.isRequired,\n    allowCustomThemes: PropTypes.bool,\n    enableLinkPreviews: PropTypes.bool,\n    defaultClientLocale: PropTypes.string,\n    enableThemeSelection: PropTypes.bool,\n    configTeammateNameDisplay: PropTypes.string,\n    currentUserTimezone: PropTypes.string,\n    enableTimezone: PropTypes.bool,\n    shouldAutoUpdateTimezone: PropTypes.bool,\n    actions: PropTypes.shape({\n        getSupportedTimezones: PropTypes.func.isRequired,\n        autoUpdateTimezone: PropTypes.func.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport {updateUser} from 'actions/user_actions.jsx';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        updateUser(\n            updatedUser,\n            () => this.props.updateSection(''),\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        );\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nManageTimezones.propTypes = {\n    user: PropTypes.object.isRequired,\n    updateSection: PropTypes.func.isRequired,\n    useAutomaticTimezone: PropTypes.bool.isRequired,\n    automaticTimezone: PropTypes.string.isRequired,\n    manualTimezone: PropTypes.string.isRequired,\n    timezones: PropTypes.array.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport {ActionTypes} from 'utils/constants.jsx';\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(suggestionId, timezonePrefix) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(suggestionId, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(suggestionId, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(suggestionId) {\n        setTimeout(() => {\n            AppDispatcher.handleServerAction({\n                type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                id: suggestionId,\n                matchedPretext: '',\n                terms: getSupportedTimezones(),\n                items: getSupportedTimezones(),\n                component: TimezoneSuggestion,\n            });\n        }, 0);\n    }\n\n    async filterTimezones(suggestionId, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        setTimeout(() => {\n            AppDispatcher.handleServerAction({\n                type: ActionTypes.SUGGESTION_RECEIVED_SUGGESTIONS,\n                id: suggestionId,\n                matchedPretext: timezonePrefix,\n                terms: filteredTimezones,\n                items: filteredTimezones,\n                component: TimezoneSuggestion,\n            });\n        }, 0);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {updateUser} from 'actions/user_actions.jsx';\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ManageLanguage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            locale: props.locale,\n            isSaving: false,\n        };\n    }\n\n    setLanguage = (e) => {\n        this.setState({locale: e.target.value});\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        updateUser(\n            user,\n            () => {\n                GlobalActions.newLocalizationSelected(user.locale);\n            },\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        );\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                <option\n                    key={lang.value}\n                    value={lang.value}\n                >\n                    {lang.name}\n                </option>\n            );\n        });\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <select\n                        id='displayLanguage'\n                        ref='language'\n                        className='form-control'\n                        value={this.state.locale}\n                        onChange={this.setLanguage}\n                    >\n                        {options}\n                    </select>\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nManageLanguage.propTypes = {\n    user: PropTypes.object.isRequired,\n    locale: PropTypes.string.isRequired,\n    updateSection: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserActions from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {ActionTypes, Constants, Preferences} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromStores(),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onChange);\n\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onChange);\n\n        if (this.props.selected) {\n            const state = this.getStateFromStores();\n            Utils.applyTheme(state.theme);\n        }\n    }\n\n    getStateFromStores() {\n        const theme = PreferenceStore.getTheme();\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        // show the \"apply to all teams\" checkbox if the user is on more than one team\n        const showAllTeamsCheckbox = Object.keys(TeamStore.getAll()).length > 1;\n\n        // check the \"apply to all teams\" checkbox by default if the user has any team-specific themes\n        const applyToAllTeams = PreferenceStore.getCategory(Preferences.CATEGORY_THEME).size <= 1;\n\n        return {\n            teamId: TeamStore.getCurrentId(),\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox,\n            applyToAllTeams,\n        };\n    }\n\n    onChange = () => {\n        const newState = this.getStateFromStores();\n\n        if (!Utils.areObjectsEqual(this.state, newState)) {\n            this.setState(newState);\n        }\n\n        this.props.setEnforceFocus(true);\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.state.teamId;\n\n        this.setState({isSaving: true});\n\n        UserActions.saveTheme(\n            teamId,\n            this.state.theme,\n            () => {\n                this.props.setRequireConfirm(false);\n                this.originalTheme = Object.assign({}, this.state.theme);\n                this.scrollToTop();\n                this.props.updateSection('');\n                this.setState({isSaving: false});\n            }\n        );\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromStores();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <a\n                            id='slackImportTheme'\n                            className='theme'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </a>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nclass CustomThemeChooser extends React.Component {\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = this.props.theme;\n        theme.codeTheme = e.target.value;\n        this.props.updateTheme(theme);\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        bsStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                trigger={['hover', 'focus']}\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy and paste to share theme colors:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    value={this.state.copyTheme}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row form-group'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={localizeMessage('generic_icons.expand', 'Expand Icon')}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n\nCustomThemeChooser.propTypes = {\n    intl: intlShape.isRequired,\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(CustomThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.string.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport {ChromePicker} from 'react-color';\n\nclass ColorInput extends React.Component {\n    static propTypes = {\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed. Takes hex format of color Ex: #ffeec0\n         */\n        onChange: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            idOpened: false,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    checkClick = (e) => {\n        const colorPickerDOMNode = ReactDom.findDOMNode(this.colorPicker);\n        if (!colorPickerDOMNode || !colorPickerDOMNode.contains(e.target)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    togglePicker = () => {\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    handleChange = (newColorData) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    getColorPicker = (node) => {\n        this.colorPicker = node;\n    };\n\n    render() {\n        const {color} = this.props;\n        const {isOpened} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    className='form-control'\n                    type='text'\n                    value={color}\n                    readOnly={true}\n                />\n                <span\n                    className='input-group-addon'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.getColorPicker}\n                        className='color-popover'\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, sendVerificationEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const positionAttributeSet = config.PositionAttributeSet === 'true';\n\n    return {\n        sendEmailNotifications,\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        positionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            sendVerificationEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedHTMLMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {updateUser, uploadProfileImage} from 'actions/user_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport SettingPicture from 'components/setting_picture.jsx';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image.',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nconst prevSections = {\n    name: 'dummySectionName', // dummy value that should never match any section name\n    username: 'name',\n    nickname: 'username',\n    position: 'nickname',\n    email: 'position',\n    picture: 'email',\n};\n\nconst ACCEPTED_PROFILE_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/bmp'];\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        prevActiveSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequred,\n        }).isRequired,\n        sendEmailNotifications: PropTypes.bool,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        positionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailVerificationError = () => {\n        ErrorStore.storeLastError({\n            notification: true,\n            message: Constants.AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n        });\n        ErrorStore.emitChange();\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true}, () => {\n            this.handleEmailVerificationError();\n        });\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        let resendHTML;\n        if (this.state.showSpinner) {\n            resendHTML = (\n                <React.Fragment>\n                    <span className='fa-wrapper'>\n                        <span\n                            className='fa fa-spinner icon--rotate'\n                            title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                        />\n                    </span>\n                    <FormattedMessage\n                        id='user.settings.general.sending'\n                        defaultMessage='Sending'\n                    />\n                </React.Fragment>\n            );\n        } else {\n            resendHTML = (\n                <span className='resend-verification-wrapper'>\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                }, () => {\n                                    this.handleEmailVerificationError();\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </span>\n            );\n        }\n        return resendHTML;\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        this.setState({sectionIsSaving: true});\n        updateUser(\n            user,\n            () => {\n                this.updateSection('');\n                this.props.actions.getMe();\n                const verificationEnabled = this.props.sendEmailNotifications && this.props.requireEmailVerification && emailUpdated;\n                if (verificationEnabled) {\n                    this.handleEmailVerificationError();\n                    this.setState({emailChangeInProgress: true});\n                }\n            },\n            (err) => {\n                let serverError;\n                if (err.message) {\n                    serverError = err.message;\n                } else {\n                    serverError = err;\n                }\n                this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n            }\n        );\n    }\n\n    submitPicture = (e) => {\n        e.preventDefault();\n\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!ACCEPTED_PROFILE_IMAGE_TYPES.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        uploadProfileImage(\n            file,\n            () => {\n                this.updateSection('');\n                this.submitActive = false;\n            },\n            (err) => {\n                var state = this.setupInitialState(this.props);\n                state.serverError = err.message;\n                this.setState(state);\n            }\n        );\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        const emailChangeInProgress = this.state.emailChangeInProgress;\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {emailChangeInProgress, clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            pictureFile: null,\n            loadingPicture: false,\n            emailChangeInProgress: props.sendEmailNotifications && props.requireEmailVerification && !user.email_verified,\n            sectionIsSaving: false,\n        };\n    }\n\n    createEmailSection() {\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailEnabled = this.props.sendEmailNotifications;\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailEnabled) {\n                helpText = (\n                    <div className='setting-list__hint col-sm-12 text-danger'>\n                        <FormattedMessage\n                            id='user.settings.general.emailHelp2'\n                            defaultMessage='Email has been disabled by your System Administrator. No notification emails will be sent until it is enabled.'\n                        />\n                    </div>\n                );\n            } else if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            } else if (this.state.emailChangeInProgress) {\n                const newEmail = UserStore.getCurrentUser().email;\n                if (newEmail) {\n                    helpText = (\n                        <React.Fragment>\n                            <FormattedHTMLMessage\n                                id='user.settings.general.emailHelp4'\n                                defaultMessage='A verification email was sent to {email}. <br />Cannot find the email?'\n                                values={{\n                                    email: newEmail,\n                                }}\n                            />\n                            {this.createEmailResendLink(newEmail)}\n                        </React.Fragment>\n                    );\n                }\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    value={this.state.email}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    value={this.state.confirmEmail}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                if (this.state.emailChangeInProgress) {\n                    const newEmail = UserStore.getCurrentUser().email;\n                    if (newEmail) {\n                        describe = (\n                            <React.Fragment>\n                                <FormattedHTMLMessage\n                                    id='user.settings.general.newAddress'\n                                    defaultMessage='Check your email to verify {email}'\n                                    values={{\n                                        email: newEmail,\n                                    }}\n                                />\n                            </React.Fragment>\n                        );\n                    } else {\n                        describe = (\n                            <FormattedMessage\n                                id='user.settings.general.checkEmailNoAddress'\n                                defaultMessage='Check your email to verify your new address'\n                            />\n                        );\n                    }\n                } else {\n                    describe = UserStore.getCurrentUser().email;\n                }\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.email}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                value={this.state.lastName}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.name}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.nickname}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={UserStore.getCurrentUser().username}\n                    focused={this.props.prevActiveSection === prevSections.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.positionAttributeSet) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.position}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    src={Utils.imageURLForUser(user)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    focused={this.props.prevActiveSection === prevSections.picture}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendEmailNotifications = config.SendEmailNotifications === 'true';\n    const enableEmailBatching = config.EnableEmailBatching === 'true';\n    const siteName = config.SiteName;\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendEmailNotifications,\n        enableEmailBatching,\n        siteName,\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {updateUserNotifyProps} from 'actions/user_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting.jsx';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromStores() {\n    const user = UserStore.getCurrentUser();\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nconst prevSections = {\n    desktop: 'dummySectionName', // dummy value that should never match any section name\n    email: 'desktop',\n    push: 'email',\n    keys: 'push',\n    comments: 'keys',\n};\n\nexport default class NotificationsTab extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromStores();\n    }\n\n    handleSubmit = (enableEmail = this.state.enableEmail) => {\n        const data = {};\n        data.email = enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        updateUserNotifyProps(\n            data,\n            () => {\n                this.props.updateSection('');\n            },\n            (err) => {\n                this.setState({serverError: err.message, isSaving: false});\n            }\n        );\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.updateState();\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n            this.handleCancel();\n        }\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getNotificationsStateFromStores();\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    componentDidMount() {\n        UserStore.addChangeListener(this.onListenerChange);\n    }\n\n    componentWillUnmount() {\n        UserStore.removeChangeListener(this.onListenerChange);\n    }\n\n    onListenerChange = () => {\n        this.updateState();\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n        this.refs.wrapper.focus();\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n        this.refs.wrapper.focus();\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n        this.refs.wrapper.focus();\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n        this.refs.wrapper.focus();\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <div>\n                            <hr/>\n                            <label>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </label>\n                            <br/>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </div>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div key='userNotificationLevelOption'>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.push_notification.send'\n                                defaultMessage='Send mobile push notifications'\n                            />\n                        </label>\n                        <br/>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationAllActivity'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[0]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.push_notification.allActivity'\n                                    defaultMessage='For all activity'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationMentions'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[1]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.push_notification.onlyMentions'\n                                    defaultMessage='For mentions and direct messages'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='pushNotificationNever'\n                                    type='radio'\n                                    name='pushNotificationLevel'\n                                    checked={pushActivityRadio[2]}\n                                    onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <br/>\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.info'\n                                defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                            />\n                        </span>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                focused={this.props.prevActiveSection === prevSections.push}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.keys}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <div key='userNotificationLevelOption'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Mention any comments in a thread you participated in (This will include both mentions to your root post and any comments after you commented on a post)'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Mention any comments on your post'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage='No mentions for comments'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    focused={this.props.prevActiveSection === prevSections.comments}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.updateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.notifications.autoResponder'\n                                    defaultMessage='Automatic Direct Message Replies'\n                                />\n                            }\n                            width='medium'\n                            describe={describe}\n                            section={'auto-responder'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n        const enableEmail = this.state.enableEmail === 'true';\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.updateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        focused={this.props.prevActiveSection === prevSections.desktop}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        enableEmail={enableEmail}\n                        emailInterval={Utils.getEmailInterval(this.props.enableEmailBatching, enableEmail)}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        focused={this.props.prevActiveSection === prevSections.email}\n                        sendEmailNotifications={this.props.sendEmailNotifications}\n                        enableEmailBatching={this.props.enableEmailBatching}\n                        siteName={this.props.siteName}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nNotificationsTab.propTypes = {\n    user: PropTypes.object,\n    updateSection: PropTypes.func,\n    activeSection: PropTypes.string,\n    prevActiveSection: PropTypes.string,\n    closeModal: PropTypes.func.isRequired,\n    collapseModal: PropTypes.func.isRequired,\n    sendEmailNotifications: PropTypes.bool,\n    enableEmailBatching: PropTypes.bool,\n    siteName: PropTypes.string,\n    sendPushNotifications: PropTypes.bool,\n    enableAutoResponder: PropTypes.bool,\n};\n\nNotificationsTab.defaultProps = {\n    user: null,\n    activeSection: '',\n    prevActiveSection: '',\n    activeTab: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <div>\n                        <hr/>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </label>\n                        <br/>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <br/>\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </span>\n                    </div>\n                );\n            } else {\n                soundSection = (\n                    <div>\n                        <hr/>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </label>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <label>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop'\n                        defaultMessage='Send desktop notifications'\n                    />\n                </label>\n                <br/>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationAllActivity'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[0]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.ALL}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.allActivity'\n                            defaultMessage='For all activity'\n                        />\n                    </label>\n                    <br/>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationMentions'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[1]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.MENTION}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.onlyMentions'\n                            defaultMessage='Only for mentions and direct messages'\n                        />\n                    </label>\n                    <br/>\n                </div>\n                <div className='radio'>\n                    <label>\n                        <input\n                            id='desktopNotificationNever'\n                            type='radio'\n                            name='desktopNotificationLevel'\n                            checked={activityRadio[2]}\n                            data-key={'desktopActivity'}\n                            data-value={NotificationLevels.NONE}\n                            onChange={this.handleOnChange}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.never'\n                            defaultMessage='Never'\n                        />\n                    </label>\n                </div>\n                <br/>\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.info'\n                        defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                    />\n                </span>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let describe = '';\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (Utils.hasSoundOptions() && this.props.sound !== 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsSoundTimed'\n                        defaultMessage='For mentions and direct messages, with sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else if (Utils.hasSoundOptions() && this.props.sound === 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsNoSoundTimed'\n                        defaultMessage='For mentions and direct messages, without sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.mentionsSoundHiddenTimed'\n                        defaultMessage='For mentions and direct messages, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else {\n            if (Utils.hasSoundOptions() && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allSoundTimed'\n                        defaultMessage='For all activity, with sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else if (Utils.hasSoundOptions() && this.props.sound === 'false') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allNoSoundTimed'\n                        defaultMessage='For all activity, without sound, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.desktop.allSoundHiddenTimed'\n                        defaultMessage='For all activity, shown for {seconds} seconds'\n                        values={{\n                            seconds: Constants.DEFAULT_NOTIFICATION_DURATION / 1000,\n                        }}\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={describe}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {savePreference} from 'actions/user_actions.jsx';\nimport {Preferences} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class EmailNotificationSetting extends React.Component {\n    static propTypes = {\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            enableEmail: props.enableEmail,\n            emailInterval: props.emailInterval,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.saving && (nextProps.enableEmail !== this.props.enableEmail || nextProps.emailInterval !== this.props.emailInterval)) {\n            this.setState({\n                enableEmail: nextProps.enableEmail,\n                emailInterval: nextProps.emailInterval,\n            });\n        }\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n        const emailInterval = parseInt(e.currentTarget.getAttribute('data-email-interval'), 10);\n        this.setState({\n            enableEmail,\n            emailInterval,\n        });\n    }\n\n    handleSubmit = () => {\n        const {enableEmail, emailInterval} = this.state;\n        if (this.props.enableEmail !== enableEmail || this.props.emailInterval !== emailInterval) {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            savePreference(Preferences.CATEGORY_NOTIFICATIONS, Preferences.EMAIL_INTERVAL, emailInterval.toString());\n\n            this.props.onSubmit(enableEmail);\n        } else {\n            this.props.updateSection('');\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                emailInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    render() {\n        if (!this.props.sendEmailNotifications && this.props.activeSection === 'email') {\n            const inputs = [];\n\n            inputs.push(\n                <div\n                    key='oauthEmailInfo'\n                    className='padding-top'\n                >\n                    <FormattedMessage\n                        id='user.settings.notifications.email.disabled_long'\n                        defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                    />\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={inputs}\n                    server_error={this.state.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        if (this.props.activeSection !== 'email') {\n            let description;\n\n            if (!this.props.sendEmailNotifications) {\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.disabled'\n                        defaultMessage='Email notifications are not enabled'\n                    />\n                );\n            } else if (this.props.enableEmail) {\n                switch (this.state.emailInterval) {\n                case Preferences.INTERVAL_IMMEDIATE:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.immediately'\n                            defaultMessage='Immediately'\n                        />\n                    );\n                    break;\n                case Preferences.INTERVAL_HOUR:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.everyHour'\n                            defaultMessage='Every hour'\n                        />\n                    );\n                    break;\n                default:\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.everyXMinutes'\n                            defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                            values={{count: this.state.emailInterval / 60}}\n                        />\n                    );\n                }\n            } else {\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n\n            return (\n                <SettingItemMin\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    describe={description}\n                    focused={this.props.focused}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={this.state.emailInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / 60}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={this.state.emailInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <div key='userNotificationEmailOptions'>\n                        <label>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </label>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={this.state.emailInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={this.state.emailInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <br/>\n                        <div>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away from {siteName} for more than 5 minutes.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </div>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div key='autoResponderHint'>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe} from 'mattermost-redux/actions/users';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const mfaLicensed = license && license.MFA === 'true';\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        isLicensed,\n        mfaLicensed,\n        enableOAuthServiceProvider,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {deactivateMfa, deauthorizeOAuthApp, getAuthorizedApps, updatePassword} from 'actions/user_actions.jsx';\nimport PreferenceStore from 'stores/preference_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not this instance of Mattermost is licensed.\n        isLicensed: PropTypes.bool,\n\n        // Whether or not this instance of Mattermost is licensed to use multi-factor authentication.\n        mfaLicensed: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not multi-factor authentication is enabled.\n        enableMultifactorAuthentication: PropTypes.bool,\n\n        // Whether or not multi-factor authentication is enforced.\n        enforceMultifactorAuthentication: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            getAuthorizedApps(\n                (authorizedApps) => {\n                    this.setState({authorizedApps, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n                },\n                (err) => {\n                    this.setState({serverError: err.message}); //eslint-disable-line react/no-did-mount-set-state\n                }\n            );\n        }\n    }\n\n    submitPassword = () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        updatePassword(\n            user.id,\n            currentPassword,\n            newPassword,\n            () => {\n                this.props.updateSection('');\n                this.props.actions.getMe();\n                this.setState(this.getDefaultState());\n            },\n            (err) => {\n                var state = this.getDefaultState();\n                if (err.message) {\n                    state.serverError = err.message;\n                } else {\n                    state.serverError = err;\n                }\n                state.passwordError = '';\n                this.setState(state);\n            }\n        );\n    }\n\n    setupMfa = (e) => {\n        e.preventDefault();\n        browserHistory.push('/mfa/setup');\n    }\n\n    removeMfa = () => {\n        deactivateMfa(\n            () => {\n                if (this.props.mfaLicensed &&\n                        this.props.enableMultifactorAuthentication &&\n                        this.props.enforceMultifactorAuthentication) {\n                    browserHistory.push('/mfa/setup');\n                    return;\n                }\n\n                this.props.updateSection('');\n                this.setState(this.getDefaultState());\n            },\n            (err) => {\n                const state = this.getDefaultState();\n                if (err.message) {\n                    state.serverError = err.message;\n                } else {\n                    state.serverError = err;\n                }\n                this.setState(state);\n            }\n        );\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = (e) => {\n        e.preventDefault();\n        const appId = e.currentTarget.getAttribute('data-app');\n        deauthorizeOAuthApp(\n            appId,\n            () => {\n                const authorizedApps = this.state.authorizedApps.filter((app) => {\n                    return app.id !== appId;\n                });\n\n                this.setState({authorizedApps, serverError: null});\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createMfaSection = () => {\n        if (this.props.activeSection === SECTION_MFA) {\n            let content;\n            let extraInfo;\n            if (this.props.user.mfa_active) {\n                let mfaRemoveHelp;\n                let mfaButtonText;\n\n                if (this.props.enforceMultifactorAuthentication) {\n                    mfaRemoveHelp = (\n                        <FormattedMessage\n                            id='user.settings.mfa.requiredHelp'\n                            defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                        />\n                    );\n\n                    mfaButtonText = (\n                        <FormattedMessage\n                            id='user.settings.mfa.reset'\n                            defaultMessage='Reset MFA on your account'\n                        />\n                    );\n                } else {\n                    mfaRemoveHelp = (\n                        <FormattedMessage\n                            id='user.settings.mfa.removeHelp'\n                            defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                        />\n                    );\n\n                    mfaButtonText = (\n                        <FormattedMessage\n                            id='user.settings.mfa.remove'\n                            defaultMessage='Remove MFA from your account'\n                        />\n                    );\n                }\n\n                content = (\n                    <div key='mfaQrCode'>\n                        <a\n                            className='btn btn-primary'\n                            href='#'\n                            onClick={this.removeMfa}\n                        >\n                            {mfaButtonText}\n                        </a>\n                        <br/>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        {mfaRemoveHelp}\n                    </span>\n                );\n            } else {\n                content = (\n                    <div key='mfaQrCode'>\n                        <a\n                            className='btn btn-primary'\n                            href='#'\n                            onClick={this.setupMfa}\n                        >\n                            <FormattedMessage\n                                id='user.settings.mfa.add'\n                                defaultMessage='Add MFA to your account'\n                            />\n                        </a>\n                        <br/>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.mfa.addHelp'\n                            defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n                        />\n                    </span>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div\n                    key='mfaSetting'\n                    className='padding-top'\n                >\n                    {content}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.mfa.title', 'Multi-factor Authentication')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='medium'\n                />\n            );\n        }\n\n        let describe;\n        if (this.props.user.mfa_active) {\n            describe = Utils.localizeMessage('user.settings.security.active', 'Active');\n        } else {\n            describe = Utils.localizeMessage('user.settings.security.inactive', 'Inactive');\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.mfa.title', 'Multi-factor Authentication')}\n                describe={describe}\n                section={SECTION_MFA}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint col-sm-12'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n            const hours12 = !PreferenceStore.getBool(Constants.Preferences.CATEGORY_DISPLAY_SETTINGS, Constants.Preferences.USE_MILITARY_TIME, false);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={hours12}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to using email and password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let mfaSection;\n        if (this.props.enableMultifactorAuthentication &&\n                this.props.isLicensed &&\n                (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE)) {\n            mfaSection = this.createMfaSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={Utils.localizeMessage('user.settings.security.close', 'Close')}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={Utils.localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    {mfaSection}\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={Utils.localizeMessage('user.settings.security.viewHistory.icon', 'Access History Icon')}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={Utils.localizeMessage('user.settings.security.logoutActiveSessions.icon', 'Active Sessions Icon')}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Logout of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nSecurityTab.defaultProps = {\n    user: {},\n    activeSection: '',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport AccessHistoryModal from './access_history_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class AccessHistoryModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that's called when modal is closed\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch the user's audits\n             */\n            getUserAudits: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * The current user's audits\n         */\n        userAudits: PropTypes.array.isRequired,\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    onShow = () => {\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info.jsx';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\nexport default function MoreInfo({\n    locale,\n    currentSession,\n    moreInfo,\n    handleMoreInfo,\n}) {\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n\nMoreInfo.propTypes = {\n    locale: PropTypes.string.isRequired,\n    currentSession: PropTypes.object.isRequired,\n    handleMoreInfo: PropTypes.func.isRequired,\n    moreInfo: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\nimport SaveButton from 'components/save_button.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Deactivate'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Inactive)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Activate'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-default'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning margin-right'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create New Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => {})} //eslint-disable-line no-empty-function\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {GroupUnreadChannels} from 'utils/constants.jsx';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        closeUnusedDirectMessages: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'close_unused_direct_messages',\n            'after_seven_days'\n        ),\n        displayUnreadSection: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'show_unread_section',\n            (config.ExperimentalGroupUnreadChannels === GroupUnreadChannels.DEFAULT_ON).toString()\n        ),\n        channelSwitcherOption: getPreference(\n            state,\n            Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            'channel_switcher_section',\n            'true'\n        ),\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        showUnreadOption: config.ExperimentalGroupUnreadChannels !== GroupUnreadChannels.DISABLED,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage, isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min.jsx';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * The preferences to show the unread channels section in the sidebar\n         */\n        displayUnreadSection: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         */\n        showUnreadOption: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromStores();\n    }\n\n    getStateFromStores = () => {\n        const {closeUnusedDirectMessages, displayUnreadSection, channelSwitcherOption} = this.props;\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                show_unread_section: displayUnreadSection,\n                channel_switcher_section: channelSwitcherOption,\n            },\n            isSaving: false,\n        };\n    };\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        preferences.push({\n            user_id: user.id,\n            category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: setting,\n            value: this.state.settings[setting],\n        });\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    updateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromStores());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        if (this.props.activeSection === 'autoCloseDM') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <div key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.autoCloseDMTitle'\n                        defaultMessage='Automatically Close Direct Messages'\n                    />\n                }\n                describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                section={'autoCloseDM'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    renderUnreadLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.showUnreadSection'\n                    defaultMessage='At the top of the channel sidebar'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderUnreadSection = () => {\n        if (this.props.activeSection === 'unreadChannels') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadSectionTitle'\n                            defaultMessage='Group unread channels'\n                        />\n                    }\n                    inputs={[\n                        <div key='unreadSectionSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadSectionEnabled'\n                                        type='radio'\n                                        name='unreadChannels'\n                                        checked={this.state.settings.show_unread_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'show_unread_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.showUnreadSection'\n                                        defaultMessage='At the top of the channel sidebar'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadSectionNever'\n                                        type='radio'\n                                        name='unreadChannels'\n                                        checked={this.state.settings.show_unread_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'show_unread_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.unreadSectionDesc'\n                                    defaultMessage='Unread channels will be sorted at the top of the channel sidebar until read.'\n                                />\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'show_unread_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.unreadSectionTitle'\n                        defaultMessage='Group unread channels'\n                    />\n                }\n                describe={this.renderUnreadLabel(this.state.settings.show_unread_section)}\n                section={'unreadChannels'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <div key='channelSwitcherSectionSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.state.settings.channel_switcher_section)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showUnreadOption} = this.props;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const unreadSection = showUnreadOption ? this.renderUnreadSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={localizeMessage('generic_icons.collapse', 'Collapse Icon')}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {unreadSection}\n                    {showUnreadOption && <div className='divider-light'/>}\n                    {channelSwitcherSection}\n                    {showUnusedOption && <div className='divider-light'/>}\n                    {autoCloseDMSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}