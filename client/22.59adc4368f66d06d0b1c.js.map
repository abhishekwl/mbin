{"version":3,"sources":["webpack:///./components/do_verify_email/index.js","webpack:///./components/do_verify_email/do_verify_email.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png"],"names":["_redux","__webpack_require__","_reactRedux","_users","_general","_users2","connect","state","siteName","getConfig","SiteName","isLoggedIn","Boolean","getCurrentUserId","user","getCurrentUser","dispatch","actions","bindActionCreators","verifyUserEmail","updateMe","DoVerifyEmail","_reactIntl","_diagnostics_actions","_browser_history","_constants","GlobalActions","props","_this2","this","_classCallCheck3","default","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","verifyEmail","_asyncToGenerator3","_regenerator2","mark","_callee","verify","wrap","_context","prev","next","URLSearchParams","location","search","get","sent","data","handleSuccess","error","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","stop","verifyStatus","serverError","redirectUserToDefaultTeam","browserHistory","push","encodeURIComponent","_this3","setState","ErrorStore","clearError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","storeLastError","notification","message","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","emitChange","_assign2","email_verified","trackEvent","then","_ref2","err","handleRedirect","FAILED_USER_STATE_UPDATE","_react2","createElement","FormattedMessage","id","defaultMessage","_loading_screen2","className","_back_button2","src","logoImage","React","PureComponent","propTypes","PropTypes","object","isRequired","string","shape","func","bool","defaultProps","_reactRouterDom","_utils","BackButton","Link","onClick","to","url","title","localizeMessage","module","exports","p"],"mappings":"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","file":"22.59adc4368f66d06d0b1c.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport DoVerifyEmail from './do_verify_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            updateMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ErrorStore from 'stores/error_store.jsx';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants.jsx';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport default class DoVerifyEmail extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with validation parameters given in link\n         */\n        location: PropTypes.object.isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to verify the user's email\n             */\n            verifyUserEmail: PropTypes.func.isRequired,\n\n            /*\n             * Action creator to update the user in the redux store\n             */\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Object reprenseting the current user\n         */\n        user: PropTypes.shape({\n            email_verified: PropTypes.bool,\n        }),\n\n        isLoggedIn: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: '',\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            browserHistory.push('/login?extra=verified&email=' + encodeURIComponent((new URLSearchParams(this.props.location.search)).get('email')));\n        }\n    }\n\n    handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        ErrorStore.clearError(AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED);\n        if (this.props.isLoggedIn) {\n            ErrorStore.storeLastError({\n                notification: true,\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            });\n            ErrorStore.emitChange();\n            const user = Object.assign({}, this.props.user);\n            user.email_verified = true;\n            trackEvent('settings', 'verify_email');\n            this.props.actions.updateMe(user).then(({data, error: err}) => {\n                if (data) {\n                    this.handleRedirect();\n                } else if (err) {\n                    this.handleError(VerifyEmailErrors.FAILED_USER_STATE_UPDATE);\n                }\n            });\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type) {\n        let serverError = '';\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_UPDATE) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token'));\n\n        if (verify && verify.data) {\n            this.handleSuccess();\n        } else if (verify && verify.error) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDoVerifyEmail.defaultProps = {\n    location: {},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";"],"sourceRoot":""}