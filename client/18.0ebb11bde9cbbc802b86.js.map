{"version":3,"sources":["webpack:///./components/signup/signup_controller/index.js","webpack:///./components/signup/signup_controller/signup_controller.jsx","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png"],"names":["_reactRedux","__webpack_require__","_general","connect","state","license","getLicense","config","getConfig","isLicensed","IsLicensed","enableOpenServer","EnableOpenServer","noAccounts","NoAccounts","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableSignUpWithOffice365","EnableSignUpWithOffice365","enableLDAP","EnableLdap","enableSAML","EnableSaml","samlLoginButtonText","SamlLoginButtonText","siteName","SiteName","SignupController","_reactIntl","_reactRouterDom","_client","_browser_history","GlobalActions","_team_actions","_user_actions","_utils","_constants","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","_initialiseProps","renderSignupControls","bind","loading","serverError","noOpenServerError","usedBefore","location","search","params","URLSearchParams","token","get","inviteId","UserStore","getCurrentUser","BrowserStore","getGlobalItem","_react2","createElement","FormattedMessage","id","defaultMessage","_this2","removeGlobalItem","userLoggedIn","addUserToTeamFromInvite","team","loadMe","then","browserHistory","push","name","Constants","DEFAULT_CHANNEL","handleInvalidInvite","getInviteInfo","inviteData","setState","redirectUserToDefaultTeam","signupControls","Link","className","key","to","window","title","localizeMessage","href","Client4","getOAuthRoute","query","length","signupDisabledError","_form_error2","error","margin","_loading_screen2","_announcement_bar2","_back_button2","src","logoImage","React","Component","err","server_error_id","message","_this3","propTypes","PropTypes","object","bool","isRequired","string","BackButton","onClick","url","PureComponent","func","defaultProps","module","exports","p"],"mappings":"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","file":"18.0ebb11bde9cbbc802b86.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport SignupController from './signup_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const noAccounts = config.NoAccounts === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableLDAP = config.EnableLdap === 'true';\n    const enableSAML = config.EnableSaml === 'true';\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n\n    return {\n        isLicensed,\n        enableOpenServer,\n        noAccounts,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableLDAP,\n        enableSAML,\n        samlLoginButtonText,\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(SignupController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {addUserToTeamFromInvite, getInviteInfo} from 'actions/team_actions.jsx';\nimport {loadMe} from 'actions/user_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button.jsx';\nimport FormError from 'components/form_error.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nexport default class SignupController extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.renderSignupControls = this.renderSignupControls.bind(this);\n\n        let loading = false;\n        let serverError = '';\n        let noOpenServerError = false;\n        let usedBefore = false;\n\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            let token = params.get('t');\n            if (token == null) {\n                token = '';\n            }\n            let inviteId = params.get('id');\n            if (inviteId == null) {\n                inviteId = '';\n            }\n\n            if (inviteId) {\n                loading = true;\n            } else if (token && !UserStore.getCurrentUser()) {\n                usedBefore = BrowserStore.getGlobalItem(token);\n            } else if (!inviteId && !this.props.enableOpenServer && !this.props.noAccounts) {\n                noOpenServerError = true;\n                serverError = (\n                    <FormattedMessage\n                        id='signup_user_completed.no_open_server'\n                        defaultMessage='This server does not allow open signups.  Please speak with your Administrator to receive an invitation.'\n                    />\n                );\n            }\n        }\n\n        this.state = {\n            loading,\n            serverError,\n            noOpenServerError,\n            usedBefore,\n        };\n    }\n\n    componentDidMount() {\n        BrowserStore.removeGlobalItem('team');\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            const token = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            const userLoggedIn = UserStore.getCurrentUser() != null;\n\n            if ((inviteId || token) && userLoggedIn) {\n                addUserToTeamFromInvite(\n                    token,\n                    inviteId,\n                    (team) => {\n                        loadMe().then(\n                            () => {\n                                browserHistory.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n                            }\n                        );\n                    },\n                    this.handleInvalidInvite\n                );\n\n                return;\n            }\n\n            if (inviteId) {\n                getInviteInfo(\n                    inviteId,\n                    (inviteData) => {\n                        if (!inviteData) {\n                            return;\n                        }\n\n                        this.setState({ // eslint-disable-line react/no-did-mount-set-state\n                            serverError: '',\n                            loading: false,\n                        });\n                    },\n                    this.handleInvalidInvite\n                );\n\n                return;\n            }\n\n            if (userLoggedIn) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n\n    handleInvalidInvite = (err) => {\n        let serverError;\n        if (err.server_error_id === 'store.sql_user.save.max_accounts.app_error') {\n            serverError = err.message;\n        } else {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        }\n\n        this.setState({\n            noOpenServerError: true,\n            loading: false,\n            serverError,\n        });\n    }\n\n    renderSignupControls() {\n        let signupControls = [];\n\n        if (this.props.enableSignUpWithEmail) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full email'\n                    key='email'\n                    to={'/signup_email' + window.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-envelope'\n                            title={localizeMessage('signup.email.icon', 'Email Icon')}\n                        />\n                        <FormattedMessage\n                            id='signup.email'\n                            defaultMessage='Email and Password'\n                        />\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.enableSignUpWithGitLab) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.gitlab'\n                                defaultMessage='GitLab Single Sign-On'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithGoogle) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.google'\n                                defaultMessage='Google Account'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOffice365) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableLDAP) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full ldap'\n                    key='ldap'\n                    to={'/login' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-folder-open fa--margin-top'\n                            title={localizeMessage('signup.ldap.icon', 'AD/LDAP Icon')}\n                        />\n                        <span>\n                            <FormattedMessage\n                                id='signup.ldap'\n                                defaultMessage='AD/LDAP Credentials'\n                            />\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSAML) {\n            let query = '';\n            if (window.location.search) {\n                query = '&action=signup';\n            } else {\n                query = '?action=signup';\n            }\n\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full saml'\n                    key='saml'\n                    to={'/login/sso/saml' + window.location.search + query}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title={localizeMessage('signup.saml.icon', 'SAML Icon')}\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (signupControls.length === 0) {\n            const signupDisabledError = (\n                <FormattedMessage\n                    id='signup_user_completed.none'\n                    defaultMessage='No user creation method has been enabled. Please contact an administrator for access.'\n                />\n            );\n            signupControls = (\n                <FormError\n                    error={signupDisabledError}\n                    margin={true}\n                />\n            );\n        } else if (signupControls.length === 1) {\n            if (this.props.enableSignUpWithEmail) {\n                return browserHistory.push('/signup_email' + window.location.search);\n            } else if (this.props.isLicensed && this.props.enableLDAP) {\n                return browserHistory.push('/login' + window.location.search);\n            }\n        }\n\n        return signupControls;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        if (this.state.usedBefore) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='signup_user_completed.expired'\n                        defaultMessage=\"You've already completed the signup process for this invitation or this invitation has expired.\"\n                    />\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let signupControls;\n        if (this.state.noOpenServerError || this.state.usedBefore) {\n            signupControls = null;\n        } else {\n            signupControls = this.renderSignupControls();\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                />\n                            </h4>\n                            <div className='margin--extra'>\n                                <h5><strong>\n                                    <FormattedMessage\n                                        id='signup.title'\n                                        defaultMessage='Create an account with:'\n                                    />\n                                </strong></h5>\n                            </div>\n                            {signupControls}\n                            {serverError}\n                        </div>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nSignupController.propTypes = {\n    location: PropTypes.object,\n    isLicensed: PropTypes.bool.isRequired,\n    enableOpenServer: PropTypes.bool.isRequired,\n    noAccounts: PropTypes.bool.isRequired,\n    enableSignUpWithEmail: PropTypes.bool.isRequired,\n    enableSignUpWithGitLab: PropTypes.bool.isRequired,\n    enableSignUpWithGoogle: PropTypes.bool.isRequired,\n    enableSignUpWithOffice365: PropTypes.bool.isRequired,\n    enableLDAP: PropTypes.bool.isRequired,\n    enableSAML: PropTypes.bool.isRequired,\n    samlLoginButtonText: PropTypes.string,\n    siteName: PropTypes.string,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div className='signup-header'>\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <span\n                        className='fa fa-chevron-left'\n                        title={localizeMessage('generic_icons.back', 'Back Icon')}\n                    />\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/5d6be4015bde2a4e0358c8bc110deadc.png\";"],"sourceRoot":""}