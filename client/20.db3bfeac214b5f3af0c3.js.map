{"version":3,"sources":["webpack:///./components/terms_of_service/index.js","webpack:///./components/terms_of_service/terms_of_service.jsx"],"names":["_reactRedux","__webpack_require__","_general","connect","state","config","getConfig","customTermsOfServiceId","CustomTermsOfServiceId","privacyPolicyLink","PrivacyPolicyLink","siteName","SiteName","termsEnabled","EnableCustomTermsOfService","termsOfServiceLink","TermsOfServiceLink","TermsOfService","_reactBootstrap","_reactIntl","_helpers","GlobalActions","_user_actions","_browser_history","_text_formatting","Utils","_constants","props","_classCallCheck3","default","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","getTermsOfService","setState","customTermsOfServiceText","loading","data","id","text","emitUserLoggedOutEvent","Constants","GET_TERMS_ERROR","handleLogoutClick","e","preventDefault","handleAcceptTerms","loadingAgree","serverError","registerUserAction","redirectTo","URLSearchParams","location","search","get","match","browserHistory","push","redirectUserToDefaultTeam","handleRejectTerms","loadingDisagree","TERMS_REJECTED","accepted","success","updateTermsOfServiceStatus","_react2","createElement","FormattedMessage","defaultMessage","formattedText","memoizeResult","formatText","_loading_screen2","_announcement_bar2","className","href","onClick","title","localizeMessage","_message_html_to_component2","mentions","ButtonGroup","Button","bsStyle","disabled","type","Boolean","_formatted_markdown_message2","values","React","PureComponent","propTypes","PropTypes","string","isRequired","bool","defaultProps"],"mappings":"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","file":"20.db3bfeac214b5f3af0c3.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport TermsOfService from './terms_of_service';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    return {\n        customTermsOfServiceId: config.CustomTermsOfServiceId,\n        privacyPolicyLink: config.PrivacyPolicyLink,\n        siteName: config.SiteName,\n        termsEnabled: config.EnableCustomTermsOfService === 'true',\n        termsOfServiceLink: config.TermsOfServiceLink,\n    };\n}\n\nexport default connect(mapStateToProps)(TermsOfService);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Button, ButtonGroup} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {getTermsOfService, updateTermsOfServiceStatus} from 'actions/user_actions.jsx';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport {browserHistory} from 'utils/browser_history';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {formatText} from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\n\nexport default class TermsOfService extends React.PureComponent {\n    static propTypes = {\n        customTermsOfServiceId: PropTypes.string.isRequired,\n        privacyPolicyLink: PropTypes.string,\n        siteName: PropTypes.string,\n        termsEnabled: PropTypes.bool,\n        termsOfServiceLink: PropTypes.string,\n    };\n\n    static defaultProps = {\n        privacyPolicyLink: 'https://about.mattermost.com/default-privacy-policy/',\n        siteName: 'Mattermost',\n        termsEnabled: true,\n        termsOfServiceLink: 'https://about.mattermost.com/default-terms/',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n            loadingAgree: false,\n            loadingDisagree: false,\n            serverError: null,\n        };\n\n        this.formattedText = memoizeResult((text) => formatText(text));\n    }\n\n    componentDidMount() {\n        if (this.props.termsEnabled) {\n            this.getTermsOfService();\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    getTermsOfService = () => {\n        this.setState({\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n        });\n        getTermsOfService(\n            (data) => {\n                this.setState({\n                    customTermsOfServiceId: data.id,\n                    customTermsOfServiceText: data.text,\n                    loading: false,\n                });\n            },\n            () => {\n                GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.GET_TERMS_ERROR}`);\n            }\n        );\n    };\n\n    handleLogoutClick = (e) => {\n        e.preventDefault();\n        GlobalActions.emitUserLoggedOutEvent('/login');\n    };\n\n    handleAcceptTerms = () => {\n        this.setState({\n            loadingAgree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            true,\n            () => {\n                const query = new URLSearchParams(this.props.location.search);\n                const redirectTo = query.get('redirect_to');\n                if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n                    browserHistory.push(redirectTo);\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            }\n        );\n    };\n\n    handleRejectTerms = () => {\n        this.setState({\n            loadingDisagree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            false,\n            () => {\n                GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.TERMS_REJECTED}`);\n            }\n        );\n    };\n\n    registerUserAction = (accepted, success) => {\n        updateTermsOfServiceStatus(\n            this.state.customTermsOfServiceId,\n            accepted,\n            success,\n            () => {\n                this.setState({\n                    loadingAgree: false,\n                    loadingDisagree: false,\n                    serverError: (\n                        <FormattedMessage\n                            id='terms_of_service.api_error'\n                            defaultMessage='Unable to complete the request. If this issue persists, contact your System Administrator.'\n                        />\n                    ),\n                });\n            },\n        );\n    };\n\n    render() {\n        if (this.state.loading) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <span\n                            className='fa fa-chevron-left'\n                            title={Utils.localizeMessage('generic_icons.logout', 'Logout Icon')}\n                        />\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container padding--less max-width--more'>\n                        <div>\n                            <h2>\n                                <FormattedMessage\n                                    id='terms_of_service.title'\n                                    defaultMessage={'Terms of Service'}\n                                />\n                            </h2>\n                        </div>\n                        <div className='signup__markdown min-height--fill'>\n                            {messageHtmlToComponent(this.formattedText(this.state.customTermsOfServiceText), false, {mentions: false})}\n                        </div>\n                        <div className='margin--extra'>\n                            <ButtonGroup>\n                                <Button\n                                    bsStyle={'primary'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='acceptTerms'\n                                    onClick={this.handleAcceptTerms}\n                                    type='submit'\n                                >\n                                    {this.state.loadingAgree && (\n                                        <span\n                                            className='fa fa-refresh icon--rotate'\n                                            title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                                        />\n                                    )}\n                                    <FormattedMessage\n                                        id='terms_of_service.agreeButton'\n                                        defaultMessage={'I Agree'}\n                                    />\n                                </Button>\n                                <Button\n                                    bsStyle={'link'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='rejectTerms'\n                                    onClick={this.handleRejectTerms}\n                                    type='reset'\n                                >\n                                    {this.state.loadingDisagree && (\n                                        <span\n                                            className='fa fa-refresh icon--rotate'\n                                            title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                                        />\n                                    )}\n                                    <FormattedMessage\n                                        id='terms_of_service.disagreeButton'\n                                        defaultMessage={'I Disagree'}\n                                    />\n                                </Button>\n                            </ButtonGroup>\n                            {Boolean(this.state.serverError) && (\n                                <div className='alert alert-warning margin--extra hidden-xs'>\n                                    <i\n                                        className='fa fa-exclamation-triangle'\n                                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                                    />\n                                    {' '}\n                                    {this.state.serverError}\n                                </div>\n                            )}\n                        </div>\n                        <div className='margin--extra'>\n                            <FormattedMarkdownMessage\n                                id='terms_of_service.footnote'\n                                defaultMessage={'By choosing \\'I Agree\\', you understand and agree to [Terms of Service]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot access {siteName}.'}\n                                values={{\n                                    siteName: this.props.siteName,\n                                    TermsOfServiceLink: this.props.termsOfServiceLink,\n                                    PrivacyPolicyLink: this.props.privacyPolicyLink,\n                                }}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}