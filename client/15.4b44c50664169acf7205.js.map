{"version":3,"sources":["webpack:///./components/admin_console/jobs/index.jsx","webpack:///./components/admin_console/blockable_link/index.js","webpack:///./components/audit_table/index.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/admin_console/request_button/request_button.jsx","webpack:///./utils/policy_roles_adapter.js","webpack:///./components/admin_console/set_by_env.jsx","webpack:///./components/admin_console/admin_definition_constants.jsx","webpack:///./components/admin_console/radio_setting.jsx","webpack:///./components/admin_console/schema_admin_settings.jsx","webpack:///./components/analytics/line_chart.jsx","webpack:///./components/analytics/statistic_count.jsx","webpack:///./components/analytics/format.jsx","webpack:///./components/admin_console/banner.jsx","webpack:///./components/svg/accordion_toggle_icon.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_checkbox.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_description.jsx","webpack:///./components/team_info.jsx","webpack:///./components/admin_console/index.js","webpack:///./components/admin_console/admin_console.jsx","webpack:///./components/admin_console/cluster_settings.jsx","webpack:///./components/admin_console/cluster_table_container.jsx","webpack:///./components/admin_console/cluster_table.jsx","webpack:///./images/status_green.png","webpack:///./images/status_yellow.png","webpack:///./components/admin_console/data_retention_settings.jsx","webpack:///./components/admin_console/jobs/table.jsx","webpack:///./actions/job_actions.jsx","webpack:///./components/admin_console/database_settings.jsx","webpack:///./components/admin_console/elasticsearch_settings.jsx","webpack:///./components/admin_console/email_settings.jsx","webpack:///./components/admin_console/email_connection_test/index.js","webpack:///./components/admin_console/email_connection_test/email_connection_test.jsx","webpack:///./components/admin_console/connection_security_dropdown_setting.jsx","webpack:///./components/admin_console/message_export_settings.jsx","webpack:///./components/admin_console/password_settings.jsx","webpack:///./components/admin_console/multiselect_settings.jsx","webpack:///./components/admin_console/color_setting.jsx","webpack:///./components/admin_console/generated_setting.jsx","webpack:///./components/admin_console/user_autocomplete_setting.jsx","webpack:///./components/admin_console/file_upload_setting.jsx","webpack:///./components/admin_console/remove_file_setting.jsx","webpack:///./components/admin_console/push_settings.jsx","webpack:///./components/discard_changes_modal.jsx","webpack:///./components/admin_console/admin_sidebar/index.js","webpack:///./components/admin_console/admin_sidebar/admin_sidebar.jsx","webpack:///./components/admin_console/admin_sidebar_category.jsx","webpack:///./components/admin_console/admin_sidebar_header.jsx","webpack:///./components/admin_console/admin_navbar_dropdown/index.js","webpack:///./components/admin_console/admin_navbar_dropdown/admin_navbar_dropdown.jsx","webpack:///./components/admin_console/blockable_link/blockable_link.jsx","webpack:///./components/admin_console/admin_sidebar_section.jsx","webpack:///./components/admin_console/admin_definition.jsx","webpack:///./components/analytics/system_analytics/index.js","webpack:///./components/analytics/system_analytics/system_analytics.jsx","webpack:///./components/analytics/doughnut_chart.jsx","webpack:///./components/analytics/team_analytics/index.js","webpack:///./components/analytics/team_analytics/team_analytics.jsx","webpack:///./components/analytics/table_chart.jsx","webpack:///./components/admin_console/plugin_management/index.js","webpack:///./components/admin_console/plugin_management/plugin_management.jsx","webpack:///./components/admin_console/custom_plugin_settings/index.js","webpack:///./components/admin_console/custom_plugin_settings/custom_plugin_settings.jsx","webpack:///./components/admin_console/audits/index.js","webpack:///./components/admin_console/audits/audits.jsx","webpack:///./components/admin_console/compliance_reports/index.js","webpack:///./components/admin_console/compliance_reports/compliance_reports.jsx","webpack:///./components/admin_console/custom_url_schemes_setting.jsx","webpack:///./components/admin_console/license_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_schemes_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/permissions_scheme_summary.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/permission_system_scheme_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree/permissions_tree.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_group.jsx","webpack:///./components/svg/checkbox_checked_icon.jsx","webpack:///./components/svg/checkbox_partial_icon.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_row.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/edit_post_time_limit_button.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/edit_post_time_limit_modal.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/permission_team_scheme_settings.jsx","webpack:///./components/team_selector_modal/index.js","webpack:///./components/team_selector_modal/team_selector_modal.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/team_in_list.jsx","webpack:///./components/admin_console/system_users/index.js","webpack:///./components/admin_console/system_users/system_users.jsx","webpack:///./components/admin_console/system_users/list/index.js","webpack:///./components/admin_console/system_users/list/system_users_list.jsx","webpack:///./components/admin_console/manage_roles_modal/index.js","webpack:///./components/admin_console/manage_roles_modal/manage_roles_modal.jsx","webpack:///./components/admin_console/manage_teams_modal/manage_teams_modal.jsx","webpack:///./components/admin_console/manage_teams_modal/manage_teams_dropdown.jsx","webpack:///./components/admin_console/manage_teams_modal/remove_from_team_button.jsx","webpack:///./components/admin_console/manage_tokens_modal/index.js","webpack:///./components/admin_console/manage_tokens_modal/manage_tokens_modal.jsx","webpack:///./components/admin_console/revoke_token_button/index.js","webpack:///./components/admin_console/revoke_token_button/revoke_token_button.jsx","webpack:///./components/admin_console/reset_password_modal/index.js","webpack:///./components/admin_console/reset_password_modal/reset_password_modal.jsx","webpack:///./components/admin_console/reset_email_modal/reset_email_modal.jsx","webpack:///./components/user_list_row_with_error.jsx","webpack:///./components/admin_console/system_users/system_users_dropdown.jsx","webpack:///./components/admin_console/system_users/list/selectors.jsx","webpack:///./components/admin_console/server_logs/index.js","webpack:///./components/admin_console/server_logs/logs.jsx","webpack:///./components/admin_console/server_logs/log_list.jsx","webpack:///./components/admin_console/brand_image_setting/brand_image_setting.jsx","webpack:///./components/admin_console/brand_image_setting/upload_button.jsx","webpack:///./components/admin_console/setting.jsx","webpack:///./components/admin_console/settings_group.jsx","webpack:///./components/admin_console/text_setting.jsx","webpack:///./components/admin_console/admin_settings.jsx","webpack:///./components/admin_console/boolean_setting.jsx","webpack:///./components/admin_console/dropdown_setting.jsx"],"names":["_reactRedux","__webpack_require__","_redux","_jobs","Selectors","connect","state","ownProps","jobs","makeGetJobsByType","jobType","dispatch","actions","bindActionCreators","getJobsByType","Table","_admin_actions","_admin","blocked","getNavigationBlocked","deferNavigation","BlockableLink","_users","_channels","currentUser","getCurrentUser","getUser","userId","getByName","channelName","getChannelByName","AuditTable","formatAuditInfo","_reactIntl","_utils","_i18n","holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","props","accessList","formatMessage","intl","i","audits","length","audit","auditInfo","uContent","showUserId","profile","data","email","_react2","default","createElement","className","iContent","showIp","ip","sContent","showSession","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","FormattedMessage","ipContent","sessionContent","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelURL","channelObj","display_name","username","getDirectTeammate","userIdField","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","isSystemAdmin","roles","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","FormattedDate","value","day","month","year","FormattedTime","hour","minute","user_id","ip_address","session_id","propTypes","intlShape","isRequired","PropTypes","array","bool","object","func","injectIntl","Utils","RequestButton","_classCallCheck3","this","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","handleRequest","bind","busy","fail","success","e","_this2","preventDefault","setState","doRequest","requestAction","err","errMsg","message","includeDetailedError","detailed_error","saveNeeded","saveConfigAction","title","localizeMessage","errorMessage","values","error","showSuccessMessage","successMessage","contents","loadingText","buttonText","widgetClassNames","label","onClick","disabled","alternativeActionElement","helpText","React","Component","element","string","shape","defaultProps","rolesFromMapping","mappingValues","rolesClone","JSON","parse","_stringify2","pertinentRoleNames","roleNames","_values2","MAPPING","forEach","v1","v2","names","map","item","roleName","concat","_toConsumableArray3","_set2","roleNamesInMapping","_keys2","includes","purgeNonPertinentRoles","mappingKey","roleRules","Error","role","shouldHave","permission","permissions","push","addPermissionToRole","permissionIndex","splice","removePermissionFromRole","mutateRolesBasedOnMapping","_entries2","_ref","_ref2","_slicedToArray3","roleClone","originalPermissionSet","newPermissionSet","difference","filter","x","has","size","mappingValueFromRoles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_getIterator3","mappingPartIterator","next","done","o","allConditionsAreMet","return","_index","enableTeamCreation","true","Permissions","CREATE_TEAM","false","editOthersPosts","EDIT_OTHERS_POSTS","enableOnlyAdminIntegrations","MANAGE_WEBHOOKS","MANAGE_SLASH_COMMANDS","MANAGE_OAUTH","mappingPart","hasUnmetCondition","_regenerator2","wrap","_context","prev","t0","keys","t1","hasOwnProperty","some","stop","_marked","SECTION_NONE","SECTION_TLS","SECTION_STARTTLS","CONNECTION_SECURITY_HELP_TEXT_EMAIL","cellPadding","CONNECTION_SECURITY_HELP_TEXT_LDAP","CONNECTION_SECURITY_HELP_TEXT_WEBSERVER","WEBSERVER_MODE_HELP_TEXT","LOG_LEVEL_OPTIONS","display_name_default","RadioSetting","handleChange","onChange","target","options","text","type","name","checked","setByEnv","_setting2","inputId","node","_reactBootstrap","I18n","_text_formatting","_policy_roles_adapter","SchemaAdminSettings","_this$buildSettingFun","handleSubmit","_asyncToGenerator3","mark","_callee2","settings","rolesBinding","updatedRoles","_context2","saving","serverError","schema","reduce","acc","val","Constants","SettingsTypes","TYPE_PERMISSION","permissions_mapping_name","toString","_promise2","all","_callee","editRole","_x2","apply","arguments","abrupt","doSubmit","getStateFromConfig","setNavigationBlocked","_x","renderTitle","translate","renderBanner","setting","label_markdown","_formatted_markdown_message2","label_values","label_default","renderHelpText","help_text","isMarkdown","helpTextValues","helpTextDefault","disabled_help_text","isDisabled","disabled_help_text_markdown","disabled_help_text_values","disabled_help_text_default","help_text_markdown","help_text_values","help_text_default","renderLabel","config","license","isHidden","buildButtonSetting","_request_button2","loading","loading_default","Boolean","success_message","error_message","error_message_default","success_message_default","buildTextSetting","inputType","TYPE_NUMBER","TYPE_LONG_TEXT","dynamic_value","_text_setting2","placeholder","placeholder_default","isSetByEnv","maxLength","max_length","buildColorSetting","_color_setting2","buildBoolSetting","_boolean_setting2","buildPermissionSetting","handlePermissionChange","buildDropdownSetting","selectedValue","selectedOptionForHelpText","option","_dropdown_setting2","buildLanguageSetting","locales","getAllLanguages","l","order","sort","a","b","multiple","noResultText","no_result","no_result_default","notPresent","not_present","not_present_default","_multiselect_settings2","selected","changedId","join","buildRadioSetting","_radio_setting2","buildBannerSetting","banner_type","buildGeneratedSetting","_generated_setting2","regenerateHelpText","regenerate_help_text","handleGeneratedChange","s","_defineProperty3","buildUsernameSetting","_user_autocomplete_setting2","buildJobsTableSetting","_jobs2","job_type","getExtraInfoText","render_job","createJobButtonText","createJobHelpText","buildFileUploadSetting","_remove_file_setting2","remove_help_text","remove_help_text_default","removeButtonText","remove_button_text","remove_button_text_default","removingText","removing_text","removing_text_default","fileName","onSubmit","callback","remove_action","_this$setState3","_this$setState4","_file_upload_setting2","uploadingText","uploading_text","uploading_text_default","fileType","file","upload_action","_this$setState5","idpCertificateFileError","buildCustomSetting","CustomComponent","component","renderSettings","_loading_screen2","settingsList","buildSettingFunctions","isPlugin","header","dangerouslySetInnerHTML","__html","formatText","mentionHighlight","footer","_settings_group2","closeTooltip","errorTooltip","openTooltip","elm","currentTarget","querySelector","isElipsis","offsetWidth","scrollWidth","getConfigFromState","saveConfig","savedConfig","handleSaved","serverErrorId","path","getConfigValue","environmentConfig","render","_save_button2","canSave","savingMessage","ref","onMouseOver","onMouseOut","_form_error2","Overlay","show","delayShow","OVERLAY_TIME_DELAY","placement","refs","Tooltip","TYPE_TEXT","TYPE_COLOR","TYPE_BOOL","TYPE_DROPDOWN","TYPE_RADIO","TYPE_BANNER","TYPE_GENERATED","TYPE_USERNAME","TYPE_BUTTON","TYPE_LANGUAGE","TYPE_JOBSTABLE","TYPE_FILE_UPLOAD","TYPE_CUSTOM","_this3","getSettingValue","previousValue","onConfigSave","setConfigValue","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","setValue","obj","pathParts","part","slice","prevSchemaId","_extends3","onConfigLoad","pathPart","LineChart","chart","chartOptions","legend","display","initChart","update","canvas","ctx","ReactDOM","findDOMNode","getContext","Chart","nextProps","willHaveData","labels","hasChart","destroy","prevProps","areObjectsEqual","hasData","content","width","height","PureComponent","number","StatisticCount","icon","isNaN","count","formatChannelDoughtnutData","totalPublic","totalPrivate","datasets","backgroundColor","hoverBackgroundColor","formatPostDoughtnutData","filePosts","hashtagPosts","totalPosts","formatPostsPerDayData","chartData","fillColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","index","row","formatUsersWithPostsPerDayData","Banner","description","AccordionToggleIcon","viewBox","stroke","strokeWidth","fill","fillRule","transform","d","cx","cy","r","_general","getConfig","PermissionsTree","PermissionCheckbox","extraClass","_checkbox_checked_icon2","_checkbox_partial_icon2","PermissionDescription","open","parentPermissionClicked","isInheritLink","parentElement","selectRow","stopPropagation","generateId","_props","inherited","rowType","FormattedHTMLMessage","additionalValues","tooltip","TeamInList","team","teamIconUrl","imageURLForTeam","style","backgroundImage","_roles","_reactRouterDom","_roles2","_admin3","withRouter","getEnvironmentConfig","getLicense","navigationBlocked","showNavigationPrompt","isCurrentUserSystemAdmin","getRoles","cancelNavigation","confirmNavigation","loadRolesIfNeeded","AdminConsole","_global_actions","SCRoute","extraProps","rest","_objectWithoutProperties3","Route","reloadIfServerVersionChanged","channel_admin","channel_user","team_admin","team_user","system_admin","system_user","_props$actions","Redirect","to","mainRolesLoaded","constructor","_announcement_bar2","discardChangesModal","_discard_changes_modal2","onConfirm","onCancel","_system_notice2","_admin_sidebar2","Switch","match","AdminDefinition","reporting","system_analytics","general","configuration","localization","users_and_teams","privacy","compliance","logging","schemes","systemScheme","teamScheme","authentication","gitlab","oauth","ldap","saml","mfa","security","signup","PasswordSettings","public_links","sessions","connections","clientVersions","EmailSettings","PushSettings","integrations","custom_integrations","webrtc","external","plugins","management","custom","files","storage","customization","customBrand","announcement","emoji","gif","posts","legal_and_support","native_app_links","DataRetentionSettings","MessageExportSettings","advanced","rate","DatabaseSettings","ElasticsearchSettings","developer","ClusterSettings","metrics","system_users","team_analytics","other","server_logs","_client","overrideHandleChange","Enable","ClusterName","OverrideHostname","UseIpAddress","UseExperimentalGossip","ReadOnlyConfig","GossipPort","parseIntNonZero","StreamingPort","showWarning","IsLicensed","Cluster","configLoadedFromCluster","Client4","clusterId","warning","clusterTableContainer","_cluster_table_container2","AdminSettings","marginBottom","ClusterTableContainer","load","reload","interval","clusterInfos","getClusterStatus","setInterval","clearInterval","_cluster_table2","ClusterTable","versionMismatch","src","statusGreen","configMismatch","version","configHash","singleItem","config_hash","clusterInfo","statusYellow","items","status","hostname","ipaddress","clusterCell","clusterTable","margin","whiteSpace","module","exports","p","_constants","showConfirmModal","handleSaveConfirmed","handleSaveCanceled","renderConfirmModal","EnableMessageDeletion","enableMessageDeletion","EnableFileDeletion","enableFileDeletion","MessageRetentionDays","parseInt","messageRetentionDays","FileRetentionDays","fileRetentionDays","DeletionJobStartTime","deletionJobStartTime","String","messageList","days","confirmButton","_confirm_modal2","confirmButtonText","enableMessageDeletionOptions","enableFileDeletionOptions","messageRetentionDaysSetting","fileRetentionDaysSetting","confirmModal","documentationLink","href","rel","JobTypes","DATA_RETENTION","_job_actions","JobTable","getStatus","job","JobStatuses","PENDING","IN_PROGRESS","SUCCESS","ERROR","CANCEL_REQUESTED","CANCELED","getRunLength","millis","last_activity_at","start_at","runningMillis","now","lastActivity","formatDate","formatTime","second","seconds","Math","round","minutes","getFinishAt","then","handleCancelJob","jobId","getAttribute","cancelJob","ErrorStore","storeLastError","emitChange","handleCreateJob","createJob","getCancelButton","cancelButton","data-job-id","colSpan","arrayOf","JobsActions","getState","sent","server_error_id","_ref4","store","SqlSettings","MaxIdleConns","maxIdleConns","MaxOpenConns","maxOpenConns","Trace","trace","QueryTimeout","queryTimeout","ConnMaxLifetimeMilliseconds","parseIntNonNegative","connMaxLifetimeMilliseconds","driverName","DriverName","dataSource","DataSource","recycleDbButton","recycleDatabaseConnection","featureName","reloadConfiguration","htmlFor","doTestConfig","handleSettingChanged","ConnectionUrl","connectionUrl","Username","Password","password","Sniff","sniff","EnableIndexing","enableIndexing","EnableSearching","enableSearching","configTested","canPurgeAndIndex","elasticsearchTest","percent","Number","progress","ELASTICSEARCH_POST_INDEXING","getExtraInfo","elasticsearchPurgeIndexes","_connection_security_dropdown_setting","SendEmailNotifications","sendEmailNotifications","EnablePreviewModeBanner","enablePreviewModeBanner","FeedbackName","feedbackName","FeedbackEmail","feedbackEmail","FeedbackOrganization","feedbackOrganization","EnableSMTPAuth","enableSMTPAuth","SMTPUsername","smtpUsername","SMTPPassword","smtpPassword","SMTPServer","smtpServer","SMTPPort","smtpPort","ConnectionSecurity","connectionSecurity","EnableEmailBatching","enableEmailBatching","ServiceSettings","EnableSecurityFixAlert","enableSecurityFixAlert","SkipServerCertificateVerification","skipServerCertificateVerification","EmailNotificationContentsType","emailNotificationContentsType","newConfig","clearError","ErrorBarTypes","PREVIEW_MODE","enableEmailBatchingDisabledText","SiteURL","emailNotificationContentsTypeDropdown","emailNotificationContentsHelpText","EmailNotificationContents","emailNotificationContentsTypes","ConnectionSecurityDropdownSettingEmail","_email_connection_test2","testEmail","EmailConnectionTestButton","handleTestConnection","testing","testMessage","_admin_definition_constants","_url","exportFormats","getJobDetails","messages_exported","EnableExport","enableComplianceExport","ExportFormat","exportFormat","DailyRunTime","exportJobStartTime","GlobalRelaySettings","CustomerType","globalRelayCustomerType","SmtpUsername","globalRelaySmtpUsername","SmtpPassword","globalRelaySmtpPassword","EmailAddress","globalRelayEmailAddress","exportFormatOptions","globalRelaySettings","globalRelayEmail","dropdownHelpText","siteURL","getSiteURL","MESSAGE_EXPORT","getSampleErrorMsg","handlePasswordLengthChange","handleCheckboxChange","_assign2","passwordMinimumLength","MinimumLength","passwordLowercase","Lowercase","passwordNumber","passwordUppercase","Uppercase","passwordSymbol","Symbol","maximumLoginAttempts","MaximumLoginAttempts","sampleErrorMsgId","sampleErrorMsg","min","MIN_PASSWORD_LENGTH","max","MAX_PASSWORD_LENGTH","lowercase","uppercase","symbol","minLength","defaultChecked","MultiSelectSetting","newValue","n","mustBePresent","newProps","_reactSelect2","multi","labelKey","joinValues","clearable","noResultsText","errorText","_reactColor","ColorSetting","color","hex","togglePicker","showPicker","closePicker","closest","getPickerClass","onTextInput","document","addEventListener","removeEventListener","picker","ChromePicker","GeneratedSetting","regenerate","disabledText","regenerateText","crypto","randomBytes","_set_by_env2","UserAutocompleteSetting","handleUserSelected","userSuggestionProviders","GenericUserProvider","_suggestion_box2","onItemSelected","listComponent","SuggestionList","listStyle","providers","requiredCharacters","openOnFocus","FileUploadSetting","fileInput","fileSelected","_jquery2","upload_button","button","clearFileInput","btnClass","accept","data-loading-text","Setting","RemoveFileSetting","handleRemove","remove_button","isPushNotificationServerSetByEnv","handleAgreeChange","handleDropdownChange","pushNotificationServerType","agree","pushNotificationServer","MHPNS","MTPNS","SendPushNotifications","PushNotificationServer","PushNotificationContents","pushNotificationContents","pushNotificationServerTypes","sendHelpText","pushServerHelpText","tosCheckbox","DiscardChangesModal","modalClass","confirmButtonClass","buildEnterpriseReady","BuildEnterpriseReady","siteName","SiteName","entities","admin","getPlugins","pure","AdminSidebar","updateTitle","currentSiteName","PluginSettings","isMobile","perfectScrollbar","suppressScrollX","oauthSettings","ldapSettings","samlSettings","clusterSettings","metricsSettings","complianceSettings","mfaSettings","messageExportSettings","complianceSection","_admin_sidebar_section2","LDAP","Metrics","SAML","Compliance","MFA","MessageExport","otherCategory","_admin_sidebar_category2","parentLink","webrtcSettings","elasticSearchSettings","Elasticsearch","dataRetentionSettings","DataRetention","customPlugins","settings_schema","_admin_sidebar_header2","sectionClass","CustomPermissionsSchemes","router","AdminSidebarCategory","link","NavLink","activeClassName","clonedChildren","children","Children","child","cloneElement","SidebarHeader","toggleDropdown","dropdown","blockToggle","find","me","UserStore","profilePicture","last_picture_update","getProfilePictureUrl","_admin_navbar_dropdown2","AdminNavbarDropdown","GlobalActions","_team_utils","handleAboutModal","showAboutModal","handleLogout","emitUserLoggedOutEvent","aboutModalDismissed","onTeamChange","teams","TeamStore","getAll","teamMembers","getMyTeamMembers","on","setTimeout","addChangeListener","off","removeChangeListener","teamsArray","switchTeams","teamMember","team_id","filterAndSortTeamsByDisplayName","_blockable_link2","createSafeId","DEFAULT_CHANNEL","data-toggle","aria-expanded","_menu_icon2","_about_build_modal2","onModalDismissed","_browser_history","handleClick","browserHistory","_deleteProperty2","AdminSidebarSection","getLink","subsection","sidebarItem","_diagnostics_actions","DefinitionConstants","MEBIBYTE","pow","needsUtils","not","and","_len","funcs","Array","_key","or","_len2","_key2","stateValueMatch","regex","stateValueEqual","stateValueTrue","stateValueFalse","hasLicense","hasLicenseFeature","feature","SystemAnalytics","TeamAnalytics","SystemUsers","ServerLogs","name_default","reloadConfig","recycleDatabaseConnections","invalidateAllCaches","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","boldedLogLevel","displayVal","previousVal","trackEvent","PermissionSchemesSettings","PermissionSystemSchemeSettings","PermissionTeamSchemeSettings","newState","GitLabSettings","UserApiEndpoint","Url","oauthType","GITLAB_SERVICE","Office365Settings","OFFICE365_SERVICE","GoogleSettings","GOOGLE_SERVICE","ldapTest","LDAP_SYNC","mattermostUsers","ldapUsers","deleteCount","updateCount","mattermost_users_count","ldap_users_count","delete_count","update_count","uploadIdpSamlCertificate","removeIdpSamlCertificate","siteUrl","uploadPrivateSamlCertificate","removePrivateSamlCertificate","uploadPublicSamlCertificate","removePublicSamlCertificate","notifications","PluginManagement","CustomPluginSettings","testS3Connection","configVal","MAX_SITENAME_LENGTH","BrandImageSetting","MAX_CUSTOM_BRAND_TEXT_LENGTH","CustomUrlSchemesSetting","LicenseSettings","Audits","isLicensed","AdminActions","_format","StatTypes","stats","AnalyticsStore","getAllSystem","getStandardAnalytics","getPostsPerDayAnalytics","getUsersPerDayAnalytics","getAdvancedAnalytics","nextState","skippedIntensiveQueries","TOTAL_POSTS","postCountsDay","POST_PER_DAY","userCountsWithPostsDay","USERS_WITH_POSTS_PER_DAY","banner","postCount","postTotalGraph","activeUserGraph","_statistic_count2","_line_chart2","advancedStats","advancedGraphs","sessionCount","commandCount","incomingCount","outgoingCount","TOTAL_SESSIONS","TOTAL_COMMANDS","TOTAL_IHOOKS","TOTAL_OHOOKS","TOTAL_WEBSOCKET_CONNECTIONS","TOTAL_MASTER_DB_CONNECTIONS","TOTAL_READ_DB_CONNECTIONS","channelTypeData","TOTAL_PUBLIC_CHANNELS","TOTAL_PRIVATE_GROUPS","postTypeData","TOTAL_FILE_POSTS","TOTAL_HASHTAG_POSTS","postTypeGraph","_doughnut_chart2","userCount","TOTAL_USERS","teamCount","TOTAL_TEAMS","channelCount","dailyActiveUsers","DAILY_ACTIVE_USERS","monthlyActiveUsers","MONTHLY_ACTIVE_USERS","firstRow","secondRow","thirdRow","DoughnutChart","_teams","_teams2","LAST_ANALYTICS_TEAM","getTeamsList","teamId","BrowserStore","getGlobalItem","initialTeam","locale","getCurrentLocale","getTeams","getProfilesInTeam","formatRecentUsersData","formatNewUsersData","_constants2","_initialiseProps","getAllTeam","recentlyActiveUsers","newUsers","getData","_banner2","totalPostsCount","userActiveGraph","recentActiveUsers","newlyCreatedUsers","aName","toUpperCase","bName","handleTeamChange","_table_chart2","_ref3","General","PROFILE_CHUNK_SIZE","setGlobalItem","getMonthLong","hour12","tip","TableChart","OverlayTrigger","trigger","overlay","pluginStatuses","uploadPlugin","removePlugin","getPluginStatuses","enablePlugin","disablePlugin","PluginItemState","PluginState","PLUGIN_STATE_NOT_RUNNING","PLUGIN_STATE_STARTING","PLUGIN_STATE_RUNNING","PLUGIN_STATE_FAILED_TO_START","PLUGIN_STATE_FAILED_TO_STAY_RUNNING","PLUGIN_STATE_STOPPING","PluginItemStateDescription","PluginItem","pluginStatus","removing","handleEnable","handleDisable","showInstances","hasSettings","activateButton","activating","deactivating","active","data-plugin-id","settingsButton","Link","removeButton","is_prepackaged","prepackagedLabel","notices","instances","instance","cluster_id","clusterSummary","_ref5","uploading","_ref6","pluginId","_ref7","_ref8","_callee3","_ref9","_context3","_x3","_ref10","_callee4","_ref11","_context4","_x4","_this4","uploadButtonText","pluginsList","pluginsContainer","enableUploads","EnableUploads","uploadHelpText","uploadBtnClass","params","plugin_id","plugin","Plugins","configSettings","lowerKey","getAudits","loadingAudits","auditTable","_audit_table2","_compliance_reports2","_admin2","enabled","ComplianceSettings","requests","createCompliance","reports","getComplianceReports","createComplianceReport","ComplianceReports","loadingReports","runReport","runningReport","emails","keywords","from","end_at","list","report","getDateTime","download","getBaseRoute","greenStatus","redStatus","getProfile","dataCell","marginTop","stringToArray","str","arrayToString","arr","valueAsArray","prop","uploadLicenseFile","window","location","removeLicenseFile","clearLastError","edition","licenseType","licenseKey","issued","displayDate","IssuedAt","displayTime","startsAt","StartsAt","expiresAt","ExpiresAt","Name","Company","Users","_schemes","_schemes2","getSchemes","jobsAreEnabled","RunJobs","clusterIsEnabled","EnableCluster","loadSchemes","loadSchemeTeams","PAGE_SIZE","loadMoreSchemes","loadingMore","page","promises","scheme","teamOverrideSchemesMigrationView","phase2MigrationIsComplete","docLink","teamOverrideUnavalableView","defaultMsg","_permissions_scheme_summary2","history","teamOverrideView","status_code","getSchemeTeams","makeGetSchemeTeams","schemeId","deleteScheme","PermissionsSchemeSummary","MAX_TEAMS_PER_SCHEME_SUMMARY","schemeName","deleting","handleDeleteConfirmed","handleDeleteCanceled","delete","goToEdit","extraTeams","rolesRequest","getRolesByNames","goToSelectedRow","openRoles","all_users","scrollIntoView","behavior","block","toggleRole","selectedPermission","deriveRolesFromAllUsers","PermissionsScope","teamAdminPromise","channelAdminPromise","systemUserPromise","teamUserPromise","channelUserPromise","results","result","roleId","newOpenRoles","togglePermission","newPermissions","resetDefaults","newRolesState","DefaultRolePermissions","hasCustomSchemes","loaded","_accordion_toggle_icon2","_permissions_tree2","scope","onToggle","parentRole","readOnly","showResetDefaultModal","Modal","dialogClassName","onHide","Header","closeButton","Body","Footer","rolesNeeded","every","loadRolesIntoState","_props$roles","displayName","updateGroups","_this$props","integrationsGroup","groups","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableOAuthServiceProvider","EnableCommands","EnableCustomEmoji","openPostTimeLimitModal","editTimeLimitModalIsVisible","closePostTimeLimitModal","toggleGroup","ids","_permission_group2","uniqId","ADDITIONAL_VALUES","combined","root","_edit_post_time_limit_modal2","onClose","edit_post","editTimeLimitButton","_edit_post_time_limit_button2","PermissionGroup","toggleExpanded","expanded","toggleSelectRow","getRecursivePermissions","toggleSelectSubGroup","toggleSelectGroup","permissionsToToggle","fromParent","prevPermissions","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","isInScope","renderPermission","comesFromParent","_permission_row2","renderGroup","g","anyChecked","anyUnchecked","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","hasPermissionsOnScope","allPermissionsFromParent","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_this$props2","permissionsRows","group","addVals","classes","_permission_checkbox2","_permission_description2","CheckboxCheckedIcon","CheckboxPartialIcon","PermissionRow","toggleSelect","PostEditTimeLimit","timeLimit","EditPostTimeLimitButton","messageID","UNSET_POST_EDIT_TIME_LIMIT","updateConfig","EditPostTimeLimitModal","INT32_MAX","save","postEditTimeLimit","handleOptionChange","ALLOW_EDIT_POST_ALWAYS","handleSecondsChange","ALLOW_EDIT_POST_TIME_LIMIT","step","scheme_id","getScheme","loadScheme","patchScheme","updateTeamScheme","createScheme","addTeamOpen","default_team_user_role","default_team_admin_role","default_channel_user_role","default_channel_admin_role","isLoaded","getStateRoles","teamUser","teamAdmin","channelUser","channelAdmin","baseTeam","baseChannel","handleNameChange","handleDescriptionChange","schemeDescription","allUsers","derived","_derived","newScheme","teamEditPromises","currentTeams","serverTeams","addedTeams","removedTeams","_teamId","_result","finish","t2","openAddTeam","removeTeam","addTeams","closeAddTeam","_team_selector_modal2","onTeamsSelected","currentSchemeId","alreadySelected","rows","_team_in_list2","onRemoveTeam","_search","searchTerm","views","search","modalSearch","startsWith","loadTeams","setModalSearchTerm","searchTeams","TeamSelectorModal","TEAMS_PER_PAGE","handleHide","handleExit","addValue","confirmed","teamIds","v","confirmAddModal","confirmAddTeam","setTeamsLoadingState","loadingState","loadingTeams","handlePageChange","prevPage","handleDelete","term","searchTimeoutId","clearTimeout","SEARCH_TIMEOUT_MILLISECONDS","isSelected","onAdd","rowSelected","_team_info2","_this5","numRemainingText","buttonSubmitText","delete_at","onExited","Title","_multiselect2","optionRenderer","renderOption","valueKey","valueRenderer","renderValue","perPage","handleInput","handleAdd","getTeamStats","loadTeamStats","mfaEnabled","EnableMultifactorAuthentication","enableUserAccessTokens","EnableUserAccessTokens","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","systemUsersSearch","totalUsers","SearchUserTeamFilter","ALL_USERS","NO_TEAM","total_member_count","analytics","Stats","TOTAL_INACTIVE_USERS","getUserAccessToken","setSystemUsersSearch","_user_actions","getUserByTokenOrId","getUserById","loadDataForTeam","loadComplete","handleTermChange","nextPage","doSearch","renderFilterRow","searching","loadProfiles","loadProfilesWithoutTeam","loadProfilesAndTeamMembers","UserSearchOptions","ALLOW_INACTIVE","WITHOUT_TEAM","searchUsers","users","hasProfile","onInput","_list2","usersPerPage","total","onTermChange","_selectors","getUsers","updateTeamMemberSchemeRoles","SystemUsersList","previousPage","doManageTeams","showManageTeamsModal","doManageRoles","showManageRolesModal","doManageTokens","showManageTokensModal","doManageTeamsDismiss","doManageRolesDismiss","doManageTokensDismiss","doPasswordReset","showPasswordModal","doPasswordResetDismiss","doPasswordResetSubmit","doEmailReset","showEmailModal","doEmailResetDismiss","doEmailResetSubmit","info","auth_service","service","LDAP_SERVICE","SAML_SERVICE","mfa_active","startCount","endCount","isSearch","extraInfo","getInfoForUser","_searchable_user_list2","renderCount","SystemUsersDropdown","actionProps","rowComponentType","UserListRowWithError","_manage_teams_modal2","_manage_roles_modal2","_manage_tokens_modal2","_reset_password_modal2","onModalSubmit","_reset_email_modal2","focusOnMount","userAccessTokensEnabled","updateUserRoles","ManageRolesModal","UserUtils","getStateFromProps","hasPostAllRole","hasPostAllPublicRole","hasUserAccessTokenRole","handleError","handleSystemAdminChange","handleUserAccessTokenChange","handlePostAllChange","handlePostAllPublicChange","trackRoleChanges","oldRoles","SYSTEM_USER_ACCESS_TOKEN_ROLE","SYSTEM_POST_ALL_ROLE","SYSTEM_POST_ALL_PUBLIC_ROLE","handleSave","SYSTEM_USER_ROLE","SYSTEM_ADMIN_ROLE","renderContents","getFullName","additionalRoles","userAccessTokenContent","nextUser","TeamActions","ManageTeamsModal","loadTeamsAndTeamMembers","getTeamsForUser","getTeamMembersForUser","handleMemberChange","handleMemberRemove","_this$state","isAdmin","teamList","_remove_from_team_button2","onError","onMemberRemove","_manage_teams_dropdown2","onMemberChange","systemAdminIndicator","_team_actions","ManageTeamsDropdown","makeTeamAdmin","makeMember","removeFromTeam","prevState","removeUserFromTeam","isTeamAdmin","scheme_admin","MenuItem","onSelect","Dropdown","Toggle","useAnchor","Menu","RemoveFromTeamButton","userAccessTokens","userAccessTokensByUser","getUserAccessTokensForUser","ManageTokensModal","tokenList","userAccessTokensList","_revoke_token_button2","tokenId","nextUserId","revokeUserAccessToken","RevokeTokenButton","passwordConfig","getPasswordConfig","ResetPasswordModal","doCancel","serverErrorNewPass","serverErrorCurrentPass","currentPassword","errorMsg","_Utils$isValidPasswor","isValidPassword","valid","adminResetPassword","urlClass","newPasswordFocus","getCurrentId","urlClassCurrentPass","autoFocus","tabIndex","_helpers","ResetEmailModal","isEmail","adminResetEmail","errorObj","buttons","Action","actionUserProps","emailStyle","userCountID","userCountEmail","_profile_picture2","displayEntireNameForUser","handleMakeActive","updateActive","handleManageTeams","handleManageRoles","handleManageTokens","handleResetPassword","handleResetEmail","handleResetMfa","adminResetMfa","handleDemoteSystemAdmin","showDemoteModal","handleDemoteCancel","handleDemoteSubmit","doMakeMember","teamUrl","getCurrentTeamUrl","handleShowDeactivateMemberModal","showDeactivateMemberModal","handleDeactivateMember","handleDeactivateCancel","renderDeactivateMemberModal","EMAIL_SERVICE","deactivateMemberButton","handleShowRevokeSessionsModal","showRevokeSessionsModal","handleRevokeSessions","revokeAllSessions","handleRevokeSessionsCancel","renderRevokeSessionsModal","revokeUserButtonButton","renderAccessToken","messageId","currentRoles","showMakeActive","showMakeNotActive","showManageTeams","showRevokeSessions","showMfaReset","disableActivationToggle","menuClass","makeActive","makeNotActive","manageTeams","mfaReset","passwordReset","emailReset","revokeSessions","_system_permission_gate2","REVOKE_USER_ACCESS_TOKEN","manageTokens","makeDemoteModal","deactivateMemberModal","revokeSessionsModal","searchProfilesInTeam","searchProfiles","USER_ID_LENGTH","getProfiles","getProfilesWithoutTeam","logs","getLogs","Logs","loadingLogs","_log_list2","nextDisabled","logPanel","scrollTop","scrollHeight","focus","nextTimeoutId","nextButton","previousButton","fontFamily","handleImageChange","handleImageSubmit","brandImage","brandImageExists","brandImageTimestamp","UploadStatuses","DEFAULT","fetch","getBrandImageUrl","resp","image","reader","FileReader","img","onload","attr","readAsDataURL","LOADING","uploadBrandImage","COMPLETE","btnPrimaryClass","letbtnDefaultClass","_upload_button2","primaryClass","UploadButton","buttonIcon","_react","Settings","SettingsGroup","TextSetting","input","oneOfType","oneOf","defaultValue","BooleanSetting","trueText","falseText","DropdownSetting"],"mappings":"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","file":"15.4b44c50664169acf7205.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getJobsByType} from 'mattermost-redux/actions/jobs';\nimport * as Selectors from 'mattermost-redux/selectors/entities/jobs';\n\nimport Table from './table.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        jobs: Selectors.makeGetJobsByType(ownProps.jobType)(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getJobsByType,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport BlockableLink from './blockable_link.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        blocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockableLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nexport default connect(mapStateToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nfunction AuditTable(props) {\n    var accessList = [];\n\n    const {formatMessage} = props.intl;\n    for (var i = 0; i < props.audits.length; i++) {\n        const audit = props.audits[i];\n        const auditInfo = formatAuditInfo(audit, formatMessage, props.currentUser, props.getByName, props.getUser);\n\n        let uContent;\n        if (props.showUserId) {\n            const profile = props.getUser(auditInfo.userId);\n            const data = profile ? profile.email : auditInfo.userId;\n            uContent = <td className='word-break--all'>{data}</td>;\n        }\n\n        let iContent;\n        if (props.showIp) {\n            iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n        }\n\n        let sContent;\n        if (props.showSession) {\n            sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n        }\n\n        let descStyle = '';\n        if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n            descStyle = ' color--error';\n        }\n\n        accessList[i] = (\n            <tr key={audit.id}>\n                <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                {uContent}\n                <td\n                    className={'word-break--all' + descStyle}\n                >\n                    {auditInfo.desc}\n                </td>\n                {iContent}\n                {sContent}\n            </tr>\n        );\n    }\n\n    let userIdContent;\n    if (props.showUserId) {\n        userIdContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.userId'\n                    defaultMessage='User ID'\n                />\n            </th>\n        );\n    }\n\n    let ipContent;\n    if (props.showIp) {\n        ipContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.ip'\n                    defaultMessage='IP Address'\n                />\n            </th>\n        );\n    }\n\n    let sessionContent;\n    if (props.showSession) {\n        sessionContent = (\n            <th>\n                <FormattedMessage\n                    id='audit_table.session'\n                    defaultMessage='Session ID'\n                />\n            </th>\n        );\n    }\n\n    return (\n        <table className='table'>\n            <thead>\n                <tr>\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.timestamp'\n                            defaultMessage='Timestamp'\n                        />\n                    </th>\n                    {userIdContent}\n                    <th>\n                        <FormattedMessage\n                            id='audit_table.action'\n                            defaultMessage='Action'\n                        />\n                    </th>\n                    {ipContent}\n                    {sessionContent}\n                </tr>\n            </thead>\n            <tbody>\n                {accessList}\n            </tbody>\n        </table>\n    );\n}\n\nAuditTable.propTypes = {\n    intl: intlShape.isRequired,\n    audits: PropTypes.array.isRequired,\n    showUserId: PropTypes.bool,\n    showIp: PropTypes.bool,\n    showSession: PropTypes.bool,\n    currentUser: PropTypes.object.isRequired,\n    getUser: PropTypes.func.isRequired,\n    getByName: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(AuditTable);\n\nexport function formatAuditInfo(audit, formatMessage, currentUser, getByName, getUser) {\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/channels') === 0) {\n        const channelInfo = audit.extra_info.split(' ');\n        const channelNameField = channelInfo[0].split('=');\n\n        let channelURL = '';\n        let channelObj;\n        let channelName = '';\n        if (channelNameField.indexOf('name') >= 0) {\n            channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n            channelObj = getByName(channelURL);\n            if (channelObj) {\n                channelName = channelObj.display_name;\n            } else {\n                channelName = channelURL;\n            }\n        }\n\n        switch (actionURL) {\n        case '/channels/create':\n            auditDesc = formatMessage(holders.channelCreated, {channelName});\n            break;\n        case '/channels/create_direct':\n            auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n            break;\n        case '/channels/update':\n            auditDesc = formatMessage(holders.nameUpdated, {channelName});\n            break;\n        case '/channels/update_desc': // support the old path\n        case '/channels/update_header':\n            auditDesc = formatMessage(holders.headerUpdated, {channelName});\n            break;\n        default: {\n            let userIdField = [];\n            let userId = '';\n            let username = '';\n\n            if (channelInfo[1]) {\n                userIdField = channelInfo[1].split('=');\n\n                if (userIdField.indexOf('user_id') >= 0) {\n                    userId = userIdField[userIdField.indexOf('user_id') + 1];\n                    var profile = getUser(userId);\n                    if (profile) {\n                        username = profile.username;\n                    }\n                }\n            }\n\n            if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userAdded, {username, channelName});\n            } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n            }\n\n            break;\n        }\n        }\n    } else if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/users') === 0) {\n        const userInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/users/login':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLogin);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullLogin);\n            } else if (userInfo[0] === 'authenticated') {\n                auditDesc = formatMessage(holders.authenticated);\n            } else if (userInfo[0]) {\n                auditDesc = formatMessage(holders.failedLogin);\n            }\n\n            break;\n        case '/users/revoke_session':\n            auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n            break;\n        case '/users/newimage':\n            auditDesc = formatMessage(holders.updatePicture);\n            break;\n        case '/users/update':\n            auditDesc = formatMessage(holders.updateGeneral);\n            break;\n        case '/users/newpassword':\n            if (userInfo[0] === 'attempted') {\n                auditDesc = formatMessage(holders.attemptedPassword);\n            } else if (userInfo[0] === 'completed') {\n                auditDesc = formatMessage(holders.successfullPassword);\n            } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                auditDesc = formatMessage(holders.failedPassword);\n            }\n\n            break;\n        case '/users/update_roles': {\n            const userRoles = userInfo[0].split('=')[1];\n\n            auditDesc = formatMessage(holders.updatedRol);\n            if (userRoles.trim()) {\n                auditDesc += userRoles;\n            } else {\n                auditDesc += formatMessage(holders.member);\n            }\n\n            break;\n        }\n        case '/users/update_active': {\n            const updateType = userInfo[0].split('=')[0];\n            const updateField = userInfo[0].split('=')[1];\n\n            /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n            if (updateType === 'active') {\n                if (updateField === 'true') {\n                    auditDesc = formatMessage(holders.accountActive);\n                } else if (updateField === 'false') {\n                    auditDesc = formatMessage(holders.accountInactive);\n                }\n\n                const actingUserInfo = userInfo[1].split('=');\n                if (actingUserInfo[0] === 'session_user') {\n                    const actingUser = getUser(actingUserInfo[1]);\n                    const user = currentUser;\n                    if (user && actingUser && isSystemAdmin(user.roles)) {\n                        auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                    } else if (user && actingUser) {\n                        auditDesc += formatMessage(holders.byAdmin);\n                    }\n                }\n            } else if (updateType === 'session_id') {\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n            }\n\n            break;\n        }\n        case '/users/send_password_reset':\n            auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n            break;\n        case '/users/reset_password':\n            if (userInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedReset);\n            } else if (userInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullReset);\n            }\n\n            break;\n        case '/users/update_notify':\n            auditDesc = formatMessage(holders.updateGlobalNotifications);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    /* If all else fails... */\n    if (!auditDesc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            auditDesc = formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            auditDesc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const auditInfo = {};\n    auditInfo.timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n    auditInfo.userId = audit.user_id;\n    auditInfo.desc = auditDesc;\n    auditInfo.ip = audit.ip_address;\n    auditInfo.sessionId = audit.session_id;\n\n    return auditInfo;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\n/**\n * A button which, when clicked, performs an action and displays\n * its outcome as either success, or failure accompanied by the\n * `message` property of the `err` object.\n */\nexport default class RequestButton extends React.Component {\n    static propTypes = {\n\n        /**\n         * The action to be called to carry out the request.\n         */\n        requestAction: PropTypes.func.isRequired,\n\n        /**\n         * A component that displays help text for the request button.\n         *\n         * Typically, this will be a <FormattedMessage/>.\n         */\n        helpText: PropTypes.element,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        loadingText: PropTypes.string,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        buttonText: PropTypes.element.isRequired,\n\n        /**\n         * The element to display as the field label.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        label: PropTypes.element,\n\n        /**\n         * True if the button form control should be disabled, otherwise false.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * True if the config needs to be saved before running the request, otherwise false.\n         *\n         * If set to true, the action provided in the `saveConfigAction` property will be\n         * called before the action provided in the `requestAction` property, with the later\n         * only being called if the former is successful.\n         */\n        saveNeeded: PropTypes.bool,\n\n        /**\n         * Action to be called to save the config, if saveNeeded is set to true.\n         */\n        saveConfigAction: PropTypes.func,\n\n        /**\n         * True if the success message should be show when the request completes successfully,\n         * otherwise false.\n         */\n        showSuccessMessage: PropTypes.bool,\n\n        /**\n         * The message to show when the request completes successfully.\n         */\n        successMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the success message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the success message.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * The message to show when the request returns an error.\n         */\n        errorMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the error message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the error message.\n             *\n             * The placeholder {error} may be used to include the error message returned\n             * by the server in response to the failed request.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * True if the {error} placeholder for the `errorMessage` property should include both\n         * the `message` and `detailed_error` properties of the error returned from the server,\n         * otherwise false to include only the `message` property.\n         */\n        includeDetailedError: PropTypes.bool,\n\n        /**\n         * An element to display adjacent to the request button.\n         */\n        alternativeActionElement: PropTypes.element,\n    }\n\n    static defaultProps = {\n        disabled: false,\n        saveNeeded: false,\n        showSuccessMessage: true,\n        includeDetailedError: false,\n        successMessage: {\n            id: t('admin.requestButton.requestSuccess'),\n            defaultMessage: 'Test Successful',\n        },\n        errorMessage: {\n            id: t('admin.requestButton.requestFailure'),\n            defaultMessage: 'Test Failure: {error}',\n        },\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleRequest = this.handleRequest.bind(this);\n\n        this.state = {\n            busy: false,\n            fail: null,\n            success: false,\n        };\n    }\n\n    handleRequest(e) {\n        e.preventDefault();\n\n        this.setState({\n            busy: true,\n            fail: null,\n            success: false,\n        });\n\n        const doRequest = () => { //eslint-disable-line func-style\n            this.props.requestAction(\n                () => {\n                    this.setState({\n                        busy: false,\n                        success: true,\n                    });\n                },\n                (err) => {\n                    let errMsg = err.message;\n                    if (this.props.includeDetailedError) {\n                        errMsg += ' - ' + err.detailed_error;\n                    }\n\n                    this.setState({\n                        busy: false,\n                        fail: errMsg,\n                    });\n                }\n            );\n        };\n\n        if (this.props.saveNeeded) {\n            this.props.saveConfigAction(doRequest);\n        } else {\n            doRequest();\n        }\n    }\n\n    render() {\n        let message = null;\n        if (this.state.fail) {\n            message = (\n                <div>\n                    <div className='alert alert-warning'>\n                        <i\n                            className='fa fa-warning'\n                            title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                        />\n                        <FormattedMessage\n                            id={this.props.errorMessage.id}\n                            defaultMessage={this.props.errorMessage.defaultMessage}\n                            values={{\n                                error: this.state.fail,\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        } else if (this.state.success && this.props.showSuccessMessage) {\n            message = (\n                <div>\n                    <div className='alert alert-success'>\n                        <i\n                            className='fa fa-success'\n                            title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                        />\n                        <FormattedMessage\n                            id={this.props.successMessage.id}\n                            defaultMessage={this.props.successMessage.defaultMessage}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        let contents = null;\n        if (this.state.busy) {\n            let loadingText = Utils.localizeMessage('admin.requestButton.loading', ' Loading...');\n            if (this.props.loadingText) {\n                loadingText = this.props.loadingText;\n            }\n            contents = (\n                <span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                    />\n                    {loadingText}\n                </span>\n            );\n        } else {\n            contents = this.props.buttonText;\n        }\n\n        let widgetClassNames = 'col-sm-8';\n        let label = null;\n        if (this.props.label) {\n            label = (\n                <label\n                    className='control-label col-sm-4'\n                >\n                    {this.props.label}\n                </label>\n            );\n        } else {\n            widgetClassNames = 'col-sm-offset-4 ' + widgetClassNames;\n        }\n\n        return (\n            <div className='form-group'>\n                {label}\n                <div className={widgetClassNames}>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleRequest}\n                            disabled={this.props.disabled}\n                        >\n                            {contents}\n                        </button>\n                        {this.props.alternativeActionElement}\n                        {message}\n                    </div>\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Permissions} from 'mattermost-redux/constants/index';\n\nconst MAPPING = {\n    enableTeamCreation: {\n        true: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: true}],\n        false: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: false}],\n    },\n\n    editOthersPosts: {\n        true: [\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n        ],\n        false: [\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: false},\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: false},\n        ],\n    },\n\n    enableOnlyAdminIntegrations: {\n        true: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: false},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: false},\n        ],\n        false: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: true},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: true},\n        ],\n    },\n};\n\n/**\n * Get the roles that were changed (but unsaved) for given mapping key/values.\n *\n * @param {object} mappingValues key/value to indicate which mapping items to use to update the roles.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {object} the updated roles (only) in the same structure as returned by mattermost-redux `getRoles`.\n */\nexport function rolesFromMapping(mappingValues, roles) {\n    const rolesClone = JSON.parse(JSON.stringify(roles));\n\n    // Purge roles that aren't present in MAPPING, we don't care about them.\n    purgeNonPertinentRoles(rolesClone);\n\n    Object.keys(MAPPING).forEach((mappingKey) => {\n        const value = mappingValues[mappingKey];\n        if (value) {\n            mutateRolesBasedOnMapping(mappingKey, value, rolesClone);\n        }\n    });\n\n    // Purge roles that didn't have permissions changes, we don't care about them.\n    Object.entries(rolesClone).forEach(([roleName, roleClone]) => {\n        const originalPermissionSet = new Set(roles[roleName].permissions);\n        const newPermissionSet = new Set(roleClone.permissions);\n        const difference = [...newPermissionSet].filter((x) => !originalPermissionSet.has(x));\n\n        if (originalPermissionSet.size === newPermissionSet.size && difference.length === 0) {\n            delete rolesClone[roleName];\n        }\n    });\n\n    return rolesClone;\n}\n\n/**\n * Get the mapping value that matches for a given set of roles.\n *\n * @param {string} key to match under in the mapping.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {string} the value that the roles/permissions assignment match in the mapping.\n */\nexport function mappingValueFromRoles(key, roles) {\n    for (const o of mappingPartIterator(MAPPING[key], roles)) {\n        if (o.allConditionsAreMet) {\n            return o.value;\n        }\n    }\n    throw new Error(`No matching mapping value found for key '${key}' with the given roles.`);\n}\n\nfunction purgeNonPertinentRoles(roles) {\n    const pertinentRoleNames = roleNamesInMapping();\n\n    Object.keys(roles).forEach((key) => {\n        if (!pertinentRoleNames.includes(key)) {\n            delete roles[key];\n        }\n    });\n}\n\nfunction mutateRolesBasedOnMapping(mappingKey, value, roles) {\n    const roleRules = MAPPING[mappingKey][value];\n\n    if (typeof roleRules === 'undefined') {\n        throw new Error(`Value '${value}' not present in MAPPING for key '${mappingKey}'.`);\n    }\n\n    roleRules.forEach((item) => {\n        const role = roles[item.roleName];\n        if (item.shouldHave) {\n            addPermissionToRole(item.permission, role);\n        } else {\n            removePermissionFromRole(item.permission, role);\n        }\n    });\n}\n\n// Returns a set of the role names present in MAPPING.\nfunction roleNamesInMapping() {\n    let roleNames = [];\n\n    Object.values(MAPPING).forEach((v1) => {\n        Object.values(v1).forEach((v2) => {\n            const names = v2.map((item) => item.roleName); // eslint-disable-line max-nested-callbacks\n            roleNames = roleNames.concat(names);\n        });\n    });\n\n    return [...new Set(roleNames.map((item) => item))];\n}\n\nfunction* mappingPartIterator(mappingPart, roles) {\n    for (const value in mappingPart) {\n        if (mappingPart.hasOwnProperty(value)) {\n            const roleRules = mappingPart[value];\n\n            const hasUnmetCondition = roleRules.some((item) => {\n                const role = roles[item.roleName];\n                return (item.shouldHave && !role.permissions.includes(item.permission)) || (!item.shouldHave && role.permissions.includes(item.permission));\n            });\n\n            yield {value, allConditionsAreMet: !hasUnmetCondition};\n        }\n    }\n}\n\nfunction addPermissionToRole(permission, role) {\n    if (!role.permissions.includes(permission)) {\n        role.permissions.push(permission);\n    }\n}\n\nfunction removePermissionFromRole(permission, role) {\n    const permissionIndex = role.permissions.indexOf(permission);\n    if (permissionIndex !== -1) {\n        role.permissions.splice(permissionIndex, 1);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function() {\n    return (\n        <div className='alert alert-warning'>\n            <FormattedMessage\n                id='admin.set_by_env'\n                defaultMessage='This setting has been set through an environment variable. It cannot be changed through the System Console.'\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst SECTION_NONE = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNone'\n                defaultMessage='None'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNoneDescription'\n                defaultMessage='Mattermost will connect over an insecure connection.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_TLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTls'\n                defaultMessage='TLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTlsDescription'\n                defaultMessage='Encrypts the communication between Mattermost and your server.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_STARTTLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStart'\n                defaultMessage='STARTTLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStartDescription'\n                defaultMessage='Takes an existing insecure connection and attempts to upgrade it to a secure connection using TLS.'\n            />\n        </td>\n    </tr>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_EMAIL = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_LDAP = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_WEBSERVER = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n        </tbody>\n    </table>\n);\n\nexport const WEBSERVER_MODE_HELP_TEXT = (\n    <div>\n        <table\n            className='table table-bordered table-margin--none'\n            cellPadding='5'\n        >\n            <tbody>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzip'\n                            defaultMessage='gzip'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzipDescription'\n                            defaultMessage='The Mattermost server will serve static files compressed with gzip.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressed'\n                            defaultMessage='Uncompressed'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressedDescription'\n                            defaultMessage='The Mattermost server will serve static files uncompressed.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabled'\n                            defaultMessage='Disabled'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabledDescription'\n                            defaultMessage='The Mattermost server will not serve static files.'\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <p className='help-text'>\n            <FormattedMessage\n                id='admin.webserverModeHelpText'\n                defaultMessage='gzip compression applies to static content files. It is recommended to enable gzip to improve performance unless your environment has specific restrictions, such as a web proxy that distributes gzip files poorly.'\n            />\n        </p>\n    </div>\n);\n\nexport const LOG_LEVEL_OPTIONS = [\n    {\n        value: 'DEBUG',\n        display_name: 'DEBUG',\n        display_name_default: 'DEBUG',\n    },\n    {\n        value: 'INFO',\n        display_name: 'INFO',\n        display_name_default: 'INFO',\n    },\n    {\n        value: 'ERROR',\n        display_name: 'ERROR',\n        display_name_default: 'ERROR',\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class RadioSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <div\n                    className='radio'\n                    key={value}\n                >\n                    <label>\n                        <input\n                            type='radio'\n                            value={value}\n                            name={this.props.id}\n                            checked={value === this.props.value}\n                            onChange={this.handleChange}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        />\n                        {text}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                {options}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport * as I18n from 'i18n/i18n.jsx';\n\nimport {saveConfig} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {formatText} from 'utils/text_formatting.jsx';\nimport {rolesFromMapping, mappingValueFromRoles} from 'utils/policy_roles_adapter';\nimport * as Utils from 'utils/utils.jsx';\nimport RequestButton from 'components/admin_console/request_button/request_button';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport BooleanSetting from 'components/admin_console/boolean_setting.jsx';\nimport TextSetting from 'components/admin_console/text_setting.jsx';\nimport DropdownSetting from 'components/admin_console/dropdown_setting.jsx';\nimport MultiSelectSetting from 'components/admin_console/multiselect_settings.jsx';\nimport RadioSetting from 'components/admin_console/radio_setting.jsx';\nimport ColorSetting from 'components/admin_console/color_setting.jsx';\nimport GeneratedSetting from 'components/admin_console/generated_setting.jsx';\nimport UserAutocompleteSetting from 'components/admin_console/user_autocomplete_setting.jsx';\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport JobsTable from 'components/admin_console/jobs';\nimport FileUploadSetting from 'components/admin_console/file_upload_setting.jsx';\nimport RemoveFileSetting from 'components/admin_console/remove_file_setting.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport FormError from 'components/form_error.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport default class SchemaAdminSettings extends React.Component {\n    static propTypes = {\n        config: PropTypes.object,\n        environmentConfig: PropTypes.object,\n        setNavigationBlocked: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n        this.isPlugin = false;\n\n        this.buildSettingFunctions = {\n            [Constants.SettingsTypes.TYPE_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_LONG_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_NUMBER]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_COLOR]: this.buildColorSetting,\n            [Constants.SettingsTypes.TYPE_BOOL]: this.buildBoolSetting,\n            [Constants.SettingsTypes.TYPE_PERMISSION]: this.buildPermissionSetting,\n            [Constants.SettingsTypes.TYPE_DROPDOWN]: this.buildDropdownSetting,\n            [Constants.SettingsTypes.TYPE_RADIO]: this.buildRadioSetting,\n            [Constants.SettingsTypes.TYPE_BANNER]: this.buildBannerSetting,\n            [Constants.SettingsTypes.TYPE_GENERATED]: this.buildGeneratedSetting,\n            [Constants.SettingsTypes.TYPE_USERNAME]: this.buildUsernameSetting,\n            [Constants.SettingsTypes.TYPE_BUTTON]: this.buildButtonSetting,\n            [Constants.SettingsTypes.TYPE_LANGUAGE]: this.buildLanguageSetting,\n            [Constants.SettingsTypes.TYPE_JOBSTABLE]: this.buildJobsTableSetting,\n            [Constants.SettingsTypes.TYPE_FILE_UPLOAD]: this.buildFileUploadSetting,\n            [Constants.SettingsTypes.TYPE_CUSTOM]: this.buildCustomSetting,\n        };\n        this.state = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.schema && props.schema.id !== state.prevSchemaId) {\n            return {\n                prevSchemaId: props.schema.id,\n                saveNeeded: false,\n                saving: false,\n                serverError: null,\n                errorTooltip: false,\n                ...SchemaAdminSettings.getStateFromConfig(props.config, props.schema, props.roles),\n            };\n        }\n        return null;\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'permissions') {\n            const settings = (this.props.schema && this.props.schema.settings) || [];\n            const rolesBinding = settings.reduce((acc, val) => {\n                if (val.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    acc[val.permissions_mapping_name] = this.state[val.key].toString();\n                }\n                return acc;\n            }, {});\n            const updatedRoles = rolesFromMapping(rolesBinding, this.props.roles);\n\n            let success = true;\n\n            await Promise.all(Object.values(updatedRoles).map(async (item) => {\n                try {\n                    await this.props.editRole(item);\n                } catch (err) {\n                    success = false;\n                    this.setState({\n                        saving: false,\n                        serverError: err.message,\n                    });\n                }\n            }));\n\n            if (!success) {\n                return;\n            }\n        }\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'config') {\n            this.doSubmit(null, SchemaAdminSettings.getStateFromConfig);\n        } else {\n            this.setState({\n                saving: false,\n                saveNeeded: false,\n                serverError: null,\n            });\n            this.props.setNavigationBlocked(false);\n        }\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    this.setConfigValue(config, setting.key, null);\n                    return;\n                }\n\n                let value = this.getSettingValue(setting);\n                const previousValue = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigSave) {\n                    value = setting.onConfigSave(value, previousValue);\n                }\n\n                this.setConfigValue(config, setting.key, value);\n            });\n\n            if (schema.onConfigSave) {\n                return schema.onConfigSave(config, this.props.config);\n            }\n        }\n\n        return config;\n    }\n\n    static getStateFromConfig(config, schema, roles) {\n        let state = {};\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    try {\n                        state[setting.key] = mappingValueFromRoles(setting.permissions_mapping_name, roles) === 'true';\n                    } catch (e) {\n                        state[setting.key] = false;\n                    }\n                    return;\n                }\n\n                let value = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigLoad) {\n                    value = setting.onConfigLoad(value, config);\n                }\n\n                state[setting.key] = value == null ? setting.default : value;\n            });\n\n            if (schema.onConfigLoad) {\n                state = {...state, ...schema.onConfigLoad(config)};\n            }\n        }\n\n        return state;\n    }\n\n    getSetting(key) {\n        for (const setting of this.props.schema.settings) {\n            if (setting.key === key) {\n                return setting;\n            }\n        }\n\n        return null;\n    }\n\n    getSettingValue(setting) {\n        // Force boolean values to false when disabled.\n        if (setting.type === Constants.SettingsTypes.TYPE_BOOL) {\n            if (this.isDisabled(setting)) {\n                return false;\n            }\n        }\n        if (setting.type === Constants.SettingsTypes.TYPE_TEXT && setting.dynamic_value) {\n            return setting.dynamic_value(this.state[setting.key], this.props.config, this.state, this.props.license);\n        }\n\n        return this.state[setting.key];\n    }\n\n    renderTitle = () => {\n        if (!this.props.schema) {\n            return '';\n        }\n        if (this.props.schema.translate === false) {\n            return this.props.schema.name || this.props.schema.id;\n        }\n        return <FormattedMessage id={this.props.schema.name || this.props.schema.id}/>;\n    }\n\n    renderBanner = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (this.props.schema.translate === false) {\n            return <span>{setting.label}</span>;\n        }\n\n        if (typeof setting.label === 'string') {\n            if (setting.label_markdown) {\n                return (\n                    <FormattedMarkdownMessage\n                        id={setting.label}\n                        values={setting.label_values}\n                        defaultMessage={setting.label_default}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={setting.label}\n                    defaultMessage={setting.label_default}\n                    values={setting.label_values}\n                />\n            );\n        }\n        return setting.label;\n    }\n\n    renderHelpText = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (this.props.schema.translate === false) {\n            return <span>{setting.help_text}</span>;\n        }\n\n        let helpText;\n        let isMarkdown;\n        let helpTextValues;\n        let helpTextDefault;\n        if (setting.disabled_help_text && this.isDisabled(setting)) {\n            helpText = setting.disabled_help_text;\n            isMarkdown = setting.disabled_help_text_markdown;\n            helpTextValues = setting.disabled_help_text_values;\n            helpTextDefault = setting.disabled_help_text_default;\n        } else {\n            helpText = setting.help_text;\n            isMarkdown = setting.help_text_markdown;\n            helpTextValues = setting.help_text_values;\n            helpTextDefault = setting.help_text_default;\n        }\n\n        if (typeof helpText === 'string') {\n            if (isMarkdown) {\n                return (\n                    <FormattedMarkdownMessage\n                        id={helpText}\n                        values={helpTextValues}\n                        defaultMessage={helpTextDefault}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={helpText}\n                    defaultMessage={helpTextDefault}\n                    values={helpTextValues}\n                />\n            );\n        }\n\n        return helpText;\n    }\n\n    renderLabel = (setting) => {\n        if (!this.props.schema) {\n            return '';\n        }\n\n        if (this.props.schema.translate === false) {\n            return setting.label;\n        }\n        return Utils.localizeMessage(setting.label, setting.label_default);\n    }\n\n    isDisabled = (setting) => {\n        if (!setting.isDisabled || typeof setting.isDisabled !== 'function') {\n            return false;\n        }\n\n        return setting.isDisabled(this.props.config, this.state, this.props.license);\n    }\n\n    isHidden = (setting) => {\n        if (!setting.isHidden || typeof setting.isHidden !== 'function') {\n            return false;\n        }\n\n        return setting.isHidden(this.props.config, this.state, this.props.license);\n    }\n\n    buildButtonSetting = (setting) => {\n        return (\n            <RequestButton\n                key={this.props.schema.id + '_text_' + setting.key}\n                requestAction={setting.action}\n                helpText={this.renderHelpText(setting)}\n                loadingText={Utils.localizeMessage(setting.loading, setting.loading_default)}\n                buttonText={<span>{this.renderLabel(setting)}</span>}\n                showSuccessMessage={Boolean(setting.success_message)}\n                includeDetailedError={true}\n                errorMessage={{\n                    id: setting.error_message,\n                    defaultMessage: setting.error_message_default,\n                }}\n                successMessage={setting.success_message && {\n                    id: setting.success_message,\n                    defaultMessage: setting.success_message_default,\n                }}\n            />\n        );\n    }\n\n    buildTextSetting = (setting) => {\n        let inputType = 'input';\n        if (setting.type === Constants.SettingsTypes.TYPE_NUMBER) {\n            inputType = 'number';\n        } else if (setting.type === Constants.SettingsTypes.TYPE_LONG_TEXT) {\n            inputType = 'textarea';\n        }\n\n        let value = this.state[setting.key] || '';\n        if (setting.dynamic_value) {\n            value = setting.dynamic_value(value, this.props.config, this.state, this.props.license);\n        }\n\n        return (\n            <TextSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                type={inputType}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n                maxLength={setting.max_length}\n            />\n        );\n    }\n\n    buildColorSetting = (setting) => {\n        return (\n            <ColorSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBoolSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildPermissionSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handlePermissionChange}\n            />\n        );\n    }\n\n    buildDropdownSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: Utils.localizeMessage(o.display_name)}));\n        const selectedValue = this.state[setting.key] || values[0].value;\n\n        let selectedOptionForHelpText = null;\n        for (const option of options) {\n            if (option.help_text && option.value === selectedValue) {\n                selectedOptionForHelpText = option;\n                break;\n            }\n        }\n\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_dropdown_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(selectedOptionForHelpText || setting)}\n                value={selectedValue}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildLanguageSetting = (setting) => {\n        const locales = I18n.getAllLanguages();\n        const values = Object.keys(locales).map((l) => {\n            return {value: locales[l].value, text: locales[l].name, order: locales[l].order};\n        }).sort((a, b) => a.order - b.order);\n\n        if (setting.multiple) {\n            const noResultText = (\n                <FormattedMessage\n                    id={setting.no_result}\n                    defaultMessage={setting.no_result_default}\n                />\n            );\n            const notPresent = (\n                <FormattedMessage\n                    id={setting.not_present}\n                    defaultMessage={setting.not_present_default}\n                />\n            );\n            return (\n                <MultiSelectSetting\n                    key={this.props.schema.id + '_language_' + setting.key}\n                    id={setting.key}\n                    label={this.renderLabel(setting)}\n                    values={values}\n                    helpText={this.renderHelpText(setting)}\n                    selected={(this.state[setting.key] && this.state[setting.key].split(',')) || []}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                    onChange={(changedId, value) => this.handleChange(changedId, value.join(','))}\n                    noResultText={noResultText}\n                    notPresent={notPresent}\n                />\n            );\n        }\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_language_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                values={values}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0].value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildRadioSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: o.display_name}));\n\n        return (\n            <RadioSetting\n                key={this.props.schema.id + '_radio_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0]}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBannerSetting = (setting) => {\n        if (this.isDisabled(setting)) {\n            return null;\n        }\n        return (\n            <div\n                className={'banner ' + setting.banner_type}\n                key={this.props.schema.id + '_bool_' + setting.key}\n            >\n                <div className='banner__content'>\n                    <span>{this.renderBanner(setting)}</span>\n                </div>\n            </div>\n        );\n    }\n\n    buildGeneratedSetting = (setting) => {\n        return (\n            <GeneratedSetting\n                key={this.props.schema.id + '_generated_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                regenerateHelpText={setting.regenerate_help_text}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleGeneratedChange}\n            />\n        );\n    }\n\n    handleGeneratedChange = (id, s) => {\n        this.handleChange(id, s.replace('+', '-').replace('/', '_'));\n    }\n\n    handleChange = (id, value) => {\n        let saveNeeded = 'config';\n        if (this.state.saveNeeded === 'permissions') {\n            saveNeeded = 'both';\n        }\n        this.setState({\n            saveNeeded,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    handlePermissionChange = (id, value) => {\n        let saveNeeded = 'permissions';\n        if (this.state.saveNeeded === 'config') {\n            saveNeeded = 'both';\n        }\n        this.setState({\n            saveNeeded,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    buildUsernameSetting = (setting) => {\n        return (\n            <UserAutocompleteSetting\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default) || Utils.localizeMessage('search_bar.search', 'Search')}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildJobsTableSetting = (setting) => {\n        return (\n            <JobsTable\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                jobType={setting.job_type}\n                getExtraInfoText={setting.render_job}\n                disabled={this.isDisabled(setting)}\n                createJobButtonText={\n                    <FormattedMessage\n                        id={setting.label}\n                        defaultMessage={setting.label_default}\n                    />\n                }\n                createJobHelpText={\n                    <FormattedMarkdownMessage\n                        id={setting.help_text}\n                        defaultMessage={setting.help_text_default}\n                    />\n                }\n            />\n        );\n    }\n\n    buildFileUploadSetting = (setting) => {\n        if (this.state[setting.key]) {\n            const removeFile = (id, callback) => {\n                const successCallback = () => {\n                    this.handleChange(setting.key, '');\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: null});\n                };\n                const errorCallback = (error) => {\n                    callback();\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: error.message});\n                };\n                setting.remove_action(successCallback, errorCallback);\n            };\n            return (\n                <RemoveFileSetting\n                    id={this.props.schema.id}\n                    key={this.props.schema.id + '_fileupload_' + setting.key}\n                    label={this.renderLabel(setting)}\n                    helpText={\n                        <FormattedMessage\n                            id={setting.remove_help_text}\n                            defaultMessage={setting.remove_help_text_default}\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage(setting.remove_button_text, setting.remove_button_text_default)}\n                    removingText={Utils.localizeMessage(setting.removing_text, setting.removing_text_default)}\n                    fileName={this.state[setting.key]}\n                    onSubmit={removeFile}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                />\n            );\n        }\n        const uploadFile = (id, file, callback) => {\n            const successCallback = () => {\n                const fileName = file.name;\n                this.handleChange(id, fileName);\n                this.setState({[setting.key]: fileName, [`${setting.key}Error`]: null});\n                if (callback && typeof callback === 'function') {\n                    callback();\n                }\n            };\n            const errorCallback = (error) => {\n                if (callback && typeof callback === 'function') {\n                    callback(error.message);\n                }\n            };\n            setting.upload_action(file, successCallback, errorCallback);\n        };\n        return (\n            <FileUploadSetting\n                id={setting.key}\n                key={this.props.schema.id + '_fileupload_' + setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                uploadingText={Utils.localizeMessage(setting.uploading_text, setting.uploading_text_default)}\n                disabled={this.isDisabled(setting)}\n                fileType={setting.fileType}\n                onSubmit={uploadFile}\n                error={this.state.idpCertificateFileError}\n                setByEnv={this.isSetByEnv(setting.key)}\n            />\n        );\n    }\n\n    buildCustomSetting = (setting) => {\n        const CustomComponent = setting.component;\n        return (\n            <CustomComponent\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const schema = this.props.schema;\n\n        if (!schema) {\n            return <LoadingScreen/>;\n        }\n\n        const settingsList = [];\n        if (schema.settings) {\n            schema.settings.forEach((setting) => {\n                if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {\n                    // This is a hack required as plugin settings are case insensitive\n                    let s = setting;\n                    if (this.isPlugin) {\n                        s = {...setting, key: setting.key.toLowerCase()};\n                    }\n                    settingsList.push(this.buildSettingFunctions[setting.type](s));\n                }\n            });\n        }\n\n        let header;\n        if (schema.header) {\n            header = (\n                <div\n                    className='banner'\n                    dangerouslySetInnerHTML={{__html: formatText(schema.header, {mentionHighlight: false})}}\n                />\n            );\n        }\n\n        let footer;\n        if (schema.footer) {\n            footer = (\n                <div\n                    className='banner'\n                    dangerouslySetInnerHTML={{__html: formatText(schema.footer, {mentionHighlight: false})}}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                {header}\n                {settingsList}\n                {footer}\n            </SettingsGroup>\n        );\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    doSubmit = (callback, getStateFromConfig) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                    serverErrorId: err.id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    static getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[pathPart];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = pathParts[0];\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(SchemaAdminSettings.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    render = () => {\n        const schema = this.props.schema;\n\n        if (schema && schema.component) {\n            const CustomComponent = schema.component;\n            return (<CustomComponent {...this.props}/>);\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    {this.renderTitle()}\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={Utils.localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref='errorMessage'\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            target={this.refs.errorMessage}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class LineChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number.isRequired,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number.isRequired,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    chart = null;\n    chartOptions = {\n        legend: {\n            display: false,\n        },\n    };\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        const willHaveData = nextProps.data && nextProps.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (!willHaveData && hasChart) {\n            // Clean up the rendered chart before we render and destroy its context\n            this.chart.destroy();\n            this.chart = null;\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            return;\n        }\n\n        const hasData = this.props.data && this.props.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (hasData) {\n            // Update the rendered chart or initialize it as necessary\n            this.initChart(hasChart);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n    }\n\n    initChart = (update) => {\n        if (!this.refs.canvas) {\n            return;\n        }\n\n        var el = ReactDOM.findDOMNode(this.refs.canvas);\n        var ctx = el.getContext('2d');\n        this.chart = new Chart(ctx, {type: 'line', data: this.props.data, options: this.chartOptions || {}}); // eslint-disable-line new-cap\n\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    render() {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else if (this.props.data.labels.length === 0) {\n            content = (\n                <h5>\n                    <FormattedMessage\n                        id='analytics.chart.meaningful'\n                        defaultMessage='Not enough data for a meaningful representation.'\n                    />\n                </h5>\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='total-count by-day'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class StatisticCount extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Statistic title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Statistic icon\n         */\n        icon: PropTypes.string.isRequired,\n\n        /*\n         * Data count\n         */\n        count: PropTypes.number,\n    }\n\n    render() {\n        const loading = (\n            <FormattedMessage\n                id='analytics.chart.loading'\n                defaultMessage='Loading...'\n            />\n        );\n\n        return (\n            <div className='col-lg-3 col-md-4 col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                        <i className={'fa ' + this.props.icon}/>\n                    </div>\n                    <div className='content'>{isNaN(this.props.count) ? loading : this.props.count}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport * as Utils from 'utils/utils.jsx';\n\nexport function formatChannelDoughtnutData(totalPublic, totalPrivate) {\n    const channelTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.publicChannels', 'Public Channels'),\n            Utils.localizeMessage('analytics.system.privateGroups', 'Private Channels'),\n        ],\n        datasets: [{\n            data: [totalPublic, totalPrivate],\n            backgroundColor: ['#46BFBD', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FFC870'],\n        }],\n    };\n\n    return channelTypeData;\n}\n\nexport function formatPostDoughtnutData(filePosts, hashtagPosts, totalPosts) {\n    const postTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.totalFilePosts', 'Posts with Files'),\n            Utils.localizeMessage('analytics.system.totalHashtagPosts', 'Posts with Hashtags'),\n            Utils.localizeMessage('analytics.system.textPosts', 'Posts with Text-only'),\n        ],\n        datasets: [{\n            data: [filePosts, hashtagPosts, (totalPosts - filePosts - hashtagPosts)],\n            backgroundColor: ['#46BFBD', '#F7464A', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FF5A5E', '#FFC870'],\n        }],\n    };\n\n    return postTypeData;\n}\n\nexport function formatPostsPerDayData(data) {\n    var chartData = {\n        labels: [],\n        datasets: [{\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [],\n        }],\n    };\n\n    for (var index in data) {\n        if (data[index]) {\n            var row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n\nexport function formatUsersWithPostsPerDayData(data) {\n    var chartData = {\n        labels: [],\n        datasets: [{\n            label: '',\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [],\n        }],\n    };\n\n    for (var index in data) {\n        if (data[index]) {\n            var row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function Banner(props) {\n    let title = (\n        <FormattedMessage\n            id='admin.banner.heading'\n            defaultMessage='Note:'\n        />\n    );\n\n    if (props.title) {\n        title = props.title;\n    }\n\n    return (\n        <div className='banner'>\n            <div className='banner__content'>\n                <h4 className='banner__heading'>\n                    {title}\n                </h4>\n                <p>\n                    {props.description}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nBanner.defaultProps = {\n};\nBanner.propTypes = {\n    title: PropTypes.node,\n    description: PropTypes.node.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class AccordionToggleIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='30px'\n                    height='30px'\n                    viewBox='0 0 30 30'\n                >\n                    <g\n                        id='Developer-Export'\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='none'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-995.000000, -1372.000000)'\n                            id='All-Team-Members'\n                        >\n                            <g transform='translate(245.000000, 698.000000)'>\n                                <g\n                                    id='Team-Administrators'\n                                    transform='translate(0.000000, 651.000000)'\n                                >\n                                    <g id='accordion-header'>\n                                        <g\n                                            id='accordion---expanded'\n                                            transform='translate(750.000000, 23.000000)'\n                                        >\n                                            <path\n                                                d='M23.1484532,13.3124932 C23.3437659,13.1171805 23.3437659,12.7968676 23.1484532,12.6015549 L21.8515766,11.3124908 C21.6562639,11.1171781 21.3437635,11.1171781 21.1484508,11.3124908 L15.0000083,17.4609333 L8.8515659,11.3124908 C8.65625317,11.1171781 8.34375279,11.1171781 8.14844006,11.3124908 L6.85156352,12.6015549 C6.65625078,12.7968676 6.65625078,13.1171805 6.85156352,13.3124932 L14.6484454,21.1015626 C14.8437582,21.2968754 15.1562585,21.2968754 15.3515713,21.1015626 L23.1484532,13.3124932 Z'\n                                                id=''\n                                                fill='#979797'\n                                            />\n                                            <circle\n                                                id='Oval-2'\n                                                stroke='#989898'\n                                                strokeWidth='2'\n                                                cx='15'\n                                                cy='15'\n                                                r='14'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionsTree from './permissions_tree.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        config,\n    };\n}\n\nexport default connect(mapStateToProps)(PermissionsTree);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckboxCheckedIcon from 'components/svg/checkbox_checked_icon.jsx';\nimport CheckboxPartialIcon from 'components/svg/checkbox_partial_icon.jsx';\n\nexport default class PermissionCheckbox extends React.PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        value: '',\n    }\n\n    render() {\n        const {value} = this.props;\n        let icon = null;\n        let extraClass = '';\n        if (value === 'checked') {\n            icon = (<CheckboxCheckedIcon/>);\n            extraClass = 'checked';\n        } else if (value === 'intermediate') {\n            icon = (<CheckboxPartialIcon/>);\n            extraClass = 'intermediate';\n        }\n        return (\n            <div className={'permission-check ' + extraClass}>\n                {icon}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage, injectIntl, intlShape} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {generateId} from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport class PermissionDescription extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        id: PropTypes.string.isRequired,\n        rowType: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        selectRow: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.id = generateId();\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    closeTooltip = () => {\n        this.setState({open: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('span');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({open: isElipsis});\n    }\n\n    parentPermissionClicked = (e) => {\n        const isInheritLink = e.target.parentElement.parentElement.className === 'inherit-link-wrapper';\n        if (e.target.parentElement.className !== 'permission-description' && !isInheritLink) {\n            e.stopPropagation();\n        } else if (isInheritLink) {\n            this.props.selectRow(this.props.id);\n            e.stopPropagation();\n        }\n    }\n\n    render() {\n        const {inherited, id, rowType} = this.props;\n\n        let content = '';\n        if (inherited) {\n            content = (\n                <span className='inherit-link-wrapper'>\n                    <FormattedHTMLMessage\n                        id='admin.permissions.inherited_from'\n                        values={{\n                            name: this.props.intl.formatMessage({\n                                id: 'admin.permissions.roles.' + inherited.name + '.name',\n                                defaultMessage: inherited.display_name,\n                            }),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            content = (\n                <FormattedMessage\n                    id={'admin.permissions.' + rowType + '.' + id + '.description'}\n                    values={this.props.additionalValues}\n                />\n            );\n        }\n        let tooltip = (\n            <Overlay\n                show={this.state.open}\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                target={this.refs.content}\n            >\n                <Tooltip id={this.id}>\n                    {content}\n                </Tooltip>\n            </Overlay>\n        );\n        if (content.props.values && Object.keys(content.props.values).length > 0) {\n            tooltip = null;\n        }\n        content = (\n            <span\n                className='permission-description'\n                onClick={this.parentPermissionClicked}\n                ref='content'\n                onMouseOver={this.openTooltip}\n                onMouseOut={this.closeTooltip}\n            >\n                {content}\n                {tooltip}\n            </span>\n        );\n\n        return content;\n    }\n}\n\nexport default injectIntl(PermissionDescription);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {imageURLForTeam} from 'utils/utils.jsx';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n    }\n\n    render() {\n        const {team} = this.props;\n        const teamIconUrl = imageURLForTeam(team);\n        let icon = null;\n        if (teamIconUrl) {\n            icon = (\n                <div\n                    className='team-btn__image'\n                    style={{backgroundImage: `url('${teamIconUrl}')`}}\n                />\n            );\n        } else {\n            icon = (\n                <div className='team-btn__initials'>\n                    {team.display_name ? team.display_name.replace(/\\s/g, '').substring(0, 2) : '??'}\n                </div>\n            );\n        }\n        return (\n            <div className='team-info-block'>\n                <span className='icon'>{icon}</span>\n                <div className='team-data'>\n                    <div className='title'>{team.display_name}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig, getEnvironmentConfig} from 'mattermost-redux/actions/admin';\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {withRouter} from 'react-router-dom';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {setNavigationBlocked, deferNavigation, cancelNavigation, confirmNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked, showNavigationPrompt} from 'selectors/views/admin';\n\nimport AdminConsole from './admin_console.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n        environmentConfig: Selectors.getEnvironmentConfig(state),\n        license: getLicense(state),\n        navigationBlocked: getNavigationBlocked(state),\n        showNavigationPrompt: showNavigationPrompt(state),\n        isCurrentUserSystemAdmin: isCurrentUserSystemAdmin(state),\n        roles: getRoles(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getConfig,\n            getEnvironmentConfig,\n            setNavigationBlocked,\n            deferNavigation,\n            cancelNavigation,\n            confirmNavigation,\n            loadRolesIfNeeded,\n            editRole,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminConsole));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport 'bootstrap';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport SystemNotice from 'components/system_notice';\nimport {reloadIfServerVersionChanged} from 'actions/global_actions.jsx';\nimport ClusterSettings from 'components/admin_console/cluster_settings.jsx';\nimport DataRetentionSettings from 'components/admin_console/data_retention_settings.jsx';\nimport DatabaseSettings from 'components/admin_console/database_settings.jsx';\nimport ElasticsearchSettings from 'components/admin_console/elasticsearch_settings.jsx';\nimport EmailSettings from 'components/admin_console/email_settings.jsx';\nimport MessageExportSettings from 'components/admin_console/message_export_settings';\nimport PasswordSettings from 'components/admin_console/password_settings.jsx';\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings';\nimport PushSettings from 'components/admin_console/push_settings.jsx';\nimport DiscardChangesModal from 'components/discard_changes_modal.jsx';\n\nimport AdminSidebar from './admin_sidebar';\nimport AdminDefinition from './admin_definition';\n\nconst SCRoute = ({component: Component, extraProps, ...rest}) => ( //eslint-disable-line react/prop-types\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\nexport default class AdminConsole extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        environmentConfig: PropTypes.object,\n        license: PropTypes.object.isRequired,\n        roles: PropTypes.object.isRequired,\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n        showNavigationPrompt: PropTypes.bool.isRequired,\n        isCurrentUserSystemAdmin: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getConfig: PropTypes.func.isRequired,\n            getEnvironmentConfig: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n            confirmNavigation: PropTypes.func.isRequired,\n            cancelNavigation: PropTypes.func.isRequired,\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.getConfig();\n        this.props.actions.getEnvironmentConfig();\n        this.props.actions.loadRolesIfNeeded(['channel_user', 'team_user', 'system_user', 'channel_admin', 'team_admin', 'system_admin']);\n        reloadIfServerVersionChanged();\n    }\n\n    mainRolesLoaded(roles) {\n        return (\n            roles &&\n            roles.channel_admin &&\n            roles.channel_user &&\n            roles.team_admin &&\n            roles.team_user &&\n            roles.system_admin &&\n            roles.system_user\n        );\n    }\n\n    render() {\n        const {\n            license,\n            config,\n            environmentConfig,\n            showNavigationPrompt,\n        } = this.props;\n        const {setNavigationBlocked, cancelNavigation, confirmNavigation} = this.props.actions;\n\n        if (!this.props.isCurrentUserSystemAdmin) {\n            return (\n                <Redirect to='/'/>\n            );\n        }\n\n        if (!this.mainRolesLoaded(this.props.roles)) {\n            return null;\n        }\n\n        if (Object.keys(config).length === 0) {\n            return <div/>;\n        }\n        if (config && Object.keys(config).length === 0 && config.constructor === 'Object') {\n            return (\n                <div className='admin-console__wrapper'>\n                    <AnnouncementBar/>\n                    <div className='admin-console'/>\n                </div>\n            );\n        }\n\n        const discardChangesModal = (\n            <DiscardChangesModal\n                show={showNavigationPrompt}\n                onConfirm={confirmNavigation}\n                onCancel={cancelNavigation}\n            />\n        );\n\n        // not every page in the system console will need the license and config, but the vast majority will\n        const extraProps = {\n            license,\n            config,\n            environmentConfig,\n            setNavigationBlocked,\n        };\n\n        return (\n            <div className='admin-console__wrapper'>\n                <AnnouncementBar/>\n                <SystemNotice/>\n                <AdminSidebar/>\n                <div className='admin-console'>\n                    <Switch>\n                        <SCRoute\n                            path={`${this.props.match.url}/system_analytics`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.system_analytics.schema,\n                            }}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/general`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/configuration`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.configuration.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/localization`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.localization.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/users_and_teams`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            roles: this.props.roles,\n                                            editRole: this.props.actions.editRole,\n                                            schema: AdminDefinition.settings.general.users_and_teams.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/privacy`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.privacy.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/compliance`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.compliance.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/logging`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.general.logging.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/configuration`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/permissions`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/schemes`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.schemes.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/system-scheme`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.systemScheme.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/team-override-scheme/:scheme_id`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.teamScheme.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/team-override-scheme`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.permissions.teamScheme.schema,\n                                        }}\n                                    />\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/authentication`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/authentication_email`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.email.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/gitlab`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.gitlab.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/oauth`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.oauth.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/ldap`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.ldap.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/saml`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.saml.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/mfa`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.authentication.mfa.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/authentication_email`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/security`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/sign_up`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.signup.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/password`}\n                                        component={PasswordSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/public_links`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.public_links.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/sessions`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.sessions.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/connections`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.connections.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/client_versions`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.security.clientVersions.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/sign_up`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/notifications`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/notifications_email`}\n                                        component={EmailSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/push`}\n                                        component={PushSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/notifications_email`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/integrations`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/custom`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            roles: this.props.roles,\n                                            editRole: this.props.actions.editRole,\n                                            schema: AdminDefinition.settings.integrations.custom_integrations.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/webrtc`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.integrations.webrtc.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/external`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.integrations.external.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/custom`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/plugins`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/configuration`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.configuration.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/management`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.management.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/custom/:plugin_id`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.plugins.custom.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/configuration`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/files`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/storage`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.files.storage.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/storage`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/customization`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/custom_brand`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.customBrand.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/announcement`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.announcement.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/emoji`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.emoji.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/gif`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.gif.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/posts`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.posts.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/legal_and_support`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.legal_and_support.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/native_app_links`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.customization.native_app_links.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/custom_brand`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/compliance`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/data_retention`}\n                                        component={DataRetentionSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/message_export`}\n                                        component={MessageExportSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <Redirect to={`${props.match.url}/data_retention`}/>\n                                </Switch>\n                            )}\n                        />\n                        <Route\n                            path={`${this.props.match.url}/advanced`}\n                            render={(props) => (\n                                <Switch>\n                                    <SCRoute\n                                        path={`${props.match.url}/rate`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.rate.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/database`}\n                                        component={DatabaseSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/elasticsearch`}\n                                        component={ElasticsearchSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/developer`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.developer.schema,\n                                        }}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/cluster`}\n                                        component={ClusterSettings}\n                                        extraProps={extraProps}\n                                    />\n                                    <SCRoute\n                                        path={`${props.match.url}/metrics`}\n                                        component={SchemaAdminSettings}\n                                        extraProps={{\n                                            ...extraProps,\n                                            schema: AdminDefinition.settings.advanced.metrics.schema,\n                                        }}\n                                    />\n                                    <Redirect to={`${props.match.url}/rate`}/>\n                                </Switch>\n                            )}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/users`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.system_users.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/team_analytics`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.team_analytics.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/license`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.other.license.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/audits`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.other.audits.schema,\n                            }}\n                        />\n                        <SCRoute\n                            path={`${this.props.match.url}/logs`}\n                            component={SchemaAdminSettings}\n                            extraProps={{\n                                ...extraProps,\n                                schema: AdminDefinition.reporting.server_logs.schema,\n                            }}\n                        />\n                        <Redirect to={`${this.props.match.url}/system_analytics`}/>\n                    </Switch>\n                </div>\n                {discardChangesModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport ClusterTableContainer from './cluster_table_container.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ClusterSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.overrideHandleChange = this.overrideHandleChange.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ClusterSettings.Enable = this.state.Enable;\n        config.ClusterSettings.ClusterName = this.state.ClusterName;\n        config.ClusterSettings.OverrideHostname = this.state.OverrideHostname;\n        config.ClusterSettings.UseIpAddress = this.state.UseIpAddress;\n        config.ClusterSettings.UseExperimentalGossip = this.state.UseExperimentalGossip;\n        config.ClusterSettings.ReadOnlyConfig = this.state.ReadOnlyConfig;\n        config.ClusterSettings.GossipPort = this.parseIntNonZero(this.state.GossipPort, 8074);\n        config.ClusterSettings.StreamingPort = this.parseIntNonZero(this.state.StreamingPort, 8075);\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const settings = config.ClusterSettings;\n\n        return {\n            Enable: settings.Enable,\n            ClusterName: settings.ClusterName,\n            OverrideHostname: settings.OverrideHostname,\n            UseIpAddress: settings.UseIpAddress,\n            UseExperimentalGossip: settings.UseExperimentalGossip,\n            ReadOnlyConfig: settings.ReadOnlyConfig,\n            GossipPort: settings.GossipPort,\n            StreamingPort: settings.StreamingPort,\n            showWarning: false,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.advance.cluster'\n                defaultMessage='High Availability'\n            />\n        );\n    }\n\n    overrideHandleChange(id, value) {\n        this.setState({\n            showWarning: true,\n        });\n\n        this.handleChange(id, value);\n    }\n\n    renderSettings() {\n        const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.Cluster === 'true';\n        if (!licenseEnabled) {\n            return null;\n        }\n\n        var configLoadedFromCluster = null;\n\n        if (Client4.clusterId) {\n            configLoadedFromCluster = (\n                <div\n                    style={style.configLoadedFromCluster}\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.loadedFrom'\n                        defaultMessage='This configuration file was loaded from Node ID {clusterId}. Please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html) if you are accessing the System Console through a load balancer and experiencing issues.'\n                        values={{\n                            clusterId: Client4.clusterId,\n                        }}\n                    />\n                </div>\n            );\n        }\n\n        var warning = null;\n        if (this.state.showWarning) {\n            warning = (\n                <div\n                    style={style.warning}\n                    className='alert alert-warning'\n                >\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.should_not_change'\n                        defaultMessage='WARNING: These settings may not sync with the other servers in the cluster. High Availability inter-node communication will not start until you modify the config.json to be identical on all servers and restart Mattermost. Please see the [documentation](!http://docs.mattermost.com/deployment/cluster.html) on how to add or remove a server from the cluster. If you are accessing the System Console through a load balancer and experiencing issues, please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html).'\n                    />\n                </div>\n            );\n        }\n\n        var clusterTableContainer = null;\n        if (this.state.Enable) {\n            clusterTableContainer = (<ClusterTableContainer/>);\n        }\n\n        return (\n            <SettingsGroup>\n                {configLoadedFromCluster}\n                {clusterTableContainer}\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.cluster.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect. When High Availability mode is enabled, the System Console is set to read-only and can only be changed from the configuration file unless ReadOnlyConfig is disabled in the configuration file.'\n                    />\n                </div>\n                {warning}\n                <BooleanSetting\n                    id='Enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.enableTitle'\n                            defaultMessage='Enable High Availability Mode:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.cluster.enableDescription'\n                            defaultMessage='When true, Mattermost will run in High Availability mode. Please see [documentation](!http://docs.mattermost.com/deployment/cluster.html) to learn more about configuring High Availability for Mattermost.'\n                        />\n                    }\n                    value={this.state.Enable}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.Enable')}\n                />\n                <TextSetting\n                    id='ClusterName'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterName'\n                            defaultMessage='Cluster Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.ClusterNameEx', 'E.g.: \"Production\" or \"Staging\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterNameDesc'\n                            defaultMessage='The cluster to join by name.  Only nodes with the same cluster name will join together.  This is to support Blue-Green deployments or staging pointing to the same database.'\n                        />\n                    }\n                    value={this.state.ClusterName}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ClusterName')}\n                />\n                <TextSetting\n                    id='OverrideHostname'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostname'\n                            defaultMessage='Override Hostname:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.OverrideHostnameEx', 'E.g.: \"app-server-01\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostnameDesc'\n                            defaultMessage='The default value of <blank> will attempt to get the Hostname from the OS or use the IP Address.  You can override the hostname of this server with this property.  It is not recommended to override the Hostname unless needed. This property can also be set to a specific IP Address if needed.'\n                        />\n                    }\n                    value={this.state.OverrideHostname}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.OverrideHostname')}\n                />\n                <BooleanSetting\n                    id='UseIpAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseIpAddress'\n                            defaultMessage='Use IP Address:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseIpAddressDesc'\n                            defaultMessage='When true, the cluster will attempt to communicate via IP Address vs using the hostname.'\n                        />\n                    }\n                    value={this.state.UseIpAddress}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseIpAddress')}\n                />\n                <BooleanSetting\n                    id='UseExperimentalGossip'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseExperimentalGossip'\n                            defaultMessage='Use Experimental Gossip:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseExperimentalGossipDesc'\n                            defaultMessage='When true, the server will attempt to communicate via the gossip protocol over the gossip port.  When false the server will attempt to communicate over the streaming port. When false the gossip port and protocol are still used to determine cluster health.'\n                        />\n                    }\n                    value={this.state.UseExperimentalGossip}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseExperimentalGossip')}\n                />\n                <BooleanSetting\n                    id='ReadOnlyConfig'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ReadOnlyConfig'\n                            defaultMessage='Read Only Config:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.ReadOnlyConfigDesc'\n                            defaultMessage='When true, the server will reject changes made to the configuration file from the system console. When running in production it is recommened to set this to true.'\n                        />\n                    }\n                    value={this.state.ReadOnlyConfig}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ReadOnlyConfig')}\n                />\n                <TextSetting\n                    id='GossipPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPort'\n                            defaultMessage='Gossip Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.GossipPortEx', 'E.g.: \"8074\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPortDesc'\n                            defaultMessage='The port used for the gossip protocol.  Both UDP and TCP should be allowed on this port.'\n                        />\n                    }\n                    value={this.state.GossipPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.GossipPort')}\n                />\n                <TextSetting\n                    id='StreamingPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPort'\n                            defaultMessage='Streaming Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.StreamingPortEx', 'E.g.: \"8075\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPortDesc'\n                            defaultMessage='The port used for streaming data between servers.'\n                        />\n                    }\n                    value={this.state.StreamingPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.StreamingPort')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n\nconst style = {\n    configLoadedFromCluster: {marginBottom: 10},\n    warning: {marginBottom: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getClusterStatus} from 'actions/admin_actions.jsx';\nimport LoadingScreen from '../loading_screen.jsx';\n\nimport ClusterTable from './cluster_table.jsx';\n\nexport default class ClusterTableContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.load = this.load.bind(this);\n        this.reload = this.reload.bind(this);\n\n        this.interval = null;\n\n        this.state = {\n            clusterInfos: null,\n        };\n    }\n\n    load() {\n        getClusterStatus(\n            (data) => {\n                this.setState({\n                    clusterInfos: data,\n                });\n            },\n            null\n        );\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.load();\n\n        // reload the cluster status every 15 seconds\n        this.interval = setInterval(this.load, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    reload(e) {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            clusterInfos: null,\n        });\n\n        this.load();\n    }\n\n    render() {\n        if (this.state.clusterInfos == null) {\n            return (<LoadingScreen/>);\n        }\n\n        return (\n            <ClusterTable\n                clusterInfos={this.state.clusterInfos}\n                reload={this.reload}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport statusGreen from 'images/status_green.png';\nimport statusYellow from 'images/status_yellow.png';\n\nexport default class ClusterTable extends React.Component {\n    static propTypes = {\n        clusterInfos: PropTypes.array.isRequired,\n        reload: PropTypes.func.isRequired,\n    }\n\n    render() {\n        var versionMismatch = (\n            <img\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var configMismatch = (\n            <img\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var version = '';\n        var configHash = '';\n        var singleItem = false;\n\n        if (this.props.clusterInfos.length) {\n            version = this.props.clusterInfos[0].version;\n            configHash = this.props.clusterInfos[0].config_hash;\n            singleItem = this.props.clusterInfos.length === 1;\n        }\n\n        this.props.clusterInfos.map((clusterInfo) => {\n            if (clusterInfo.version !== version) {\n                versionMismatch = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            if (clusterInfo.config_hash !== configHash) {\n                configMismatch = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            return null;\n        });\n\n        var items = this.props.clusterInfos.map((clusterInfo) => {\n            var status = null;\n\n            if (clusterInfo.hostname === '') {\n                clusterInfo.hostname = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.version === '') {\n                clusterInfo.version = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.config_hash === '') {\n                clusterInfo.config_hash = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (singleItem) {\n                status = (\n                    <img\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            } else {\n                status = (\n                    <img\n                        className='cluster-status'\n                        src={statusGreen}\n                    />\n                );\n            }\n\n            return (\n                <tr key={clusterInfo.ipaddress}>\n                    <td style={style.clusterCell}>{status}</td>\n                    <td style={style.clusterCell}>{clusterInfo.hostname}</td>\n                    <td style={style.clusterCell}>{versionMismatch} {clusterInfo.version}</td>\n                    <td style={style.clusterCell}><div className='config-hash'>{configMismatch} {clusterInfo.config_hash}</div></td>\n                    <td style={style.clusterCell}>{clusterInfo.ipaddress}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div\n                className='cluster-panel__table'\n                style={style.clusterTable}\n            >\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        onClick={this.props.reload}\n                    >\n                        <i\n                            className='fa fa-refresh'\n                            title={Utils.localizeMessage('generic_icons.reload', 'Reload Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.cluster.status_table.reload'\n                            defaultMessage=' Reload Cluster Status'\n                        />\n                    </button>\n                </div>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.status'\n                                    defaultMessage='Status'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.hostname'\n                                    defaultMessage='Hostname'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.version'\n                                    defaultMessage='Version'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.config_hash'\n                                    defaultMessage='Config File MD5'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.url'\n                                    defaultMessage='Gossip Address'\n                                />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    clusterTable: {margin: 10, marginBottom: 30},\n    clusterCell: {whiteSpace: 'nowrap'},\n};\n","module.exports = __webpack_public_path__ + \"files/f2f389817448b841c0d55028e053915e.png\";","module.exports = __webpack_public_path__ + \"files/cb5754883ea95a8681ed2beec10b8a63.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class DataRetentionSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n        this.renderConfirmModal = this.renderConfirmModal.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.DataRetentionSettings.EnableMessageDeletion = this.state.enableMessageDeletion === 'true';\n        config.DataRetentionSettings.EnableFileDeletion = this.state.enableFileDeletion === 'true';\n        config.DataRetentionSettings.MessageRetentionDays = parseInt(this.state.messageRetentionDays, 10);\n        config.DataRetentionSettings.FileRetentionDays = parseInt(this.state.fileRetentionDays, 10);\n        config.DataRetentionSettings.DeletionJobStartTime = this.state.deletionJobStartTime;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableMessageDeletion: String(config.DataRetentionSettings.EnableMessageDeletion),\n            enableFileDeletion: String(config.DataRetentionSettings.EnableFileDeletion),\n            messageRetentionDays: config.DataRetentionSettings.MessageRetentionDays,\n            fileRetentionDays: config.DataRetentionSettings.FileRetentionDays,\n            deletionJobStartTime: config.DataRetentionSettings.DeletionJobStartTime,\n            showConfirmModal: false,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.setState({showConfirmModal: true});\n    };\n\n    handleSaveConfirmed = () => {\n        this.setState({showConfirmModal: false});\n\n        this.doSubmit();\n    };\n\n    handleSaveCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    renderConfirmModal() {\n        const title = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.title'\n                defaultMessage='Confirm data retention policy'\n            />\n        );\n\n        const messageList = [];\n\n        if (this.state.enableMessageDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageDeletion'\n                    defaultMessage='All messages will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.messageRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageIndefinite'\n                    defaultMessage='All messages will be retained indefinitely.'\n                />\n            );\n        }\n\n        if (this.state.enableFileDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileDeletion'\n                    defaultMessage='All files will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.fileRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileIndefinite'\n                    defaultMessage='All files will be retained indefinitely.'\n                />\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.description'\n                        defaultMessage='Are you sure you want to apply the following data retention policy:'\n                    />\n                </p>\n                <ul>\n                    {messageList.map((item, index) => {\n                        return <li key={index}>{item}</li>;\n                    })}\n                </ul>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.clarification'\n                        defaultMessage='Once deleted, messages and files cannot be retrieved.'\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.confirm'\n                defaultMessage='Confirm Settings'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleSaveConfirmed}\n                onCancel={this.handleSaveCanceled}\n            />\n        );\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.data_retention.title'\n                defaultMessage='Data Retention Policy (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        const enableMessageDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepMessagesIndefinitely', 'Keep all messages indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepMessageForTime', 'Keep messages for a set amount of time')},\n        ];\n\n        const enableFileDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepFilesIndefinitely', 'Keep all files indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepFilesForTime', 'Keep files for a set amount of time')},\n        ];\n\n        let messageRetentionDaysSetting = '';\n        if (this.state.enableMessageDeletion === 'true') {\n            messageRetentionDaysSetting = (\n                <TextSetting\n                    id='messageRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.messageRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.messageRetentionDays.description'\n                            defaultMessage='Set how many days messages are kept in Mattermost. Messages, including file attachments older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.messageRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.MessageRetentionDays')}\n                />\n            );\n        }\n\n        let fileRetentionDaysSetting = '';\n        if (this.state.enableFileDeletion === 'true') {\n            fileRetentionDaysSetting = (\n                <TextSetting\n                    id='fileRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.fileRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.fileRetentionDays.description'\n                            defaultMessage='Set how many days file uploads are kept in Mattermost. Files older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.fileRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.FileRetentionDays')}\n                />\n            );\n        }\n\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <SettingsGroup>\n                {confirmModal}\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.data_retention.note.description'\n                            defaultMessage='Caution: Once a message or a file is deleted, the action is irreversible. Please be careful when setting up a custom data retention policy. See {documentationLink} to learn more.'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-dataretention-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.data_retention.note.description.documentationLinkText'\n                                            defaultMessage='documentation'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n                <DropdownSetting\n                    id='enableMessageDeletion'\n                    values={enableMessageDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.title'\n                            defaultMessage='Message Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps messages in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableMessageDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableMessageDeletion')}\n                />\n                {messageRetentionDaysSetting}\n                <DropdownSetting\n                    id='enableFileDeletion'\n                    values={enableFileDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.title'\n                            defaultMessage='File Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps file uploads in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableFileDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableFileDeletion')}\n                />\n                {fileRetentionDaysSetting}\n                <TextSetting\n                    id='deletionJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.title'\n                            defaultMessage='Data Deletion Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.data_retention.deletionJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled data retention job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.deletionJobStartTime}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DeletionJobStartTime')}\n                />\n                <JobsTable\n                    jobType={JobTypes.DATA_RETENTION}\n                    disabled={this.state.enableMessageDeletion !== 'true' && this.state.enableFileDeletion !== 'true'}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.title'\n                            defaultMessage='Run Deletion Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.help'\n                            defaultMessage='Initiates a Data Retention deletion job immediately.'\n                        />\n                    }\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {cancelJob, createJob} from 'actions/job_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport {JobStatuses} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nclass JobTable extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Used for formatting dates\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Array of jobs\n         */\n        jobs: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch jobs\n             */\n            getJobsByType: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Function called when displaying extra text.\n         */\n        getExtraInfoText: PropTypes.func,\n\n        /**\n         * Grey buttons out when disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Help text under the create job button\n         */\n        createJobHelpText: PropTypes.element.isRequired,\n\n        /**\n         * Button text to create a new job\n         */\n        createJobButtonText: PropTypes.element.isRequired,\n\n        /**\n         * The type of jobs to include in this table.\n         */\n        jobType: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.interval = null;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.interval = setInterval(this.reload, 15000);\n    }\n\n    componentDidMount() {\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => this.setState({loading: false})\n        );\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    getStatus = (job) => {\n        if (job.status === JobStatuses.PENDING) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusPending'\n                        defaultMessage='Pending'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusInProgress'\n                        defaultMessage='In Progress'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.SUCCESS) {\n            return (\n                <span\n                    className='status-icon-success'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusSuccess'\n                        defaultMessage='Success'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.ERROR) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusError'\n                        defaultMessage='Error'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceling'\n                        defaultMessage='Canceling...'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCELED) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceled'\n                        defaultMessage='Canceled'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <span title={Utils.localizeMessage('admin.jobTable.jobId', 'Job ID: ') + job.id}>{job.status}</span>\n        );\n    }\n\n    getExtraInfoText = (job) => {\n        if (job.data && job.data.error && job.data.error.length > 0) {\n            return <span title={job.data.error}>{job.data.error}</span>;\n        }\n\n        if (this.props.getExtraInfoText) {\n            return this.props.getExtraInfoText(job);\n        }\n\n        return <span/>;\n    }\n\n    getRunLength = (job) => {\n        let millis = job.last_activity_at - job.start_at;\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            const runningMillis = Date.now() - job.start_at;\n            if (runningMillis > millis) {\n                millis = runningMillis;\n            }\n        }\n\n        let lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') + '--';\n\n        if (job.last_activity_at > 0) {\n            lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') +\n                this.props.intl.formatDate(new Date(job.last_activity_at), {\n                    year: 'numeric',\n                    month: 'short',\n                    day: '2-digit',\n                }) + ' - ' +\n                this.props.intl.formatTime(new Date(job.last_activity_at), {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                });\n        }\n\n        var seconds = Math.round(millis / 1000);\n        var minutes = Math.round(millis / (1000 * 60));\n\n        if (millis <= 0 || job.status === JobStatuses.CANCELED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        if (seconds <= 120) {\n            return (\n                <span\n                    className='whitespace--nowrap'\n                    title={lastActivity}\n                >\n                    {seconds + Utils.localizeMessage('admin.jobTable.runLengthSeconds', ' seconds')}\n                </span>\n            );\n        }\n\n        return (\n            <span\n                className='whitespace--nowrap'\n                title={lastActivity}\n            >\n                {minutes + Utils.localizeMessage('admin.jobTable.runLengthMinutes', ' minutes')}\n            </span>\n        );\n    }\n\n    getFinishAt = (status, millis) => {\n        if (millis === 0 || status === JobStatuses.PENDING || status === JobStatuses.IN_PROGRESS || status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        const date = new Date(millis);\n        return (\n            <span className='whitespace--nowrap'>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    reload = () => {\n        this.setState({loading: true});\n\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    };\n\n    handleCancelJob = (e) => {\n        e.preventDefault();\n        const jobId = e.currentTarget.getAttribute('data-job-id');\n\n        cancelJob(\n            jobId,\n            () => {\n                this.reload();\n            },\n            (err) => {\n                ErrorStore.storeLastError(err);\n                ErrorStore.emitChange();\n                this.reload();\n            }\n        );\n    };\n\n    handleCreateJob = (e) => {\n        e.preventDefault();\n\n        const job = {\n            type: this.props.jobType,\n        };\n\n        createJob(\n            job,\n            () => {\n                this.reload();\n            },\n            (err) => {\n                ErrorStore.storeLastError(err);\n                ErrorStore.emitChange();\n                this.reload();\n            }\n        );\n    };\n\n    getCancelButton = (job) => {\n        let cancelButton = null;\n\n        if (!this.props.disabled && (job.status === JobStatuses.PENDING || job.status === JobStatuses.IN_PROGRESS)) {\n            cancelButton = (\n                <span\n                    data-job-id={job.id}\n                    onClick={this.handleCancelJob}\n                    className='job-table__cancel-button'\n                    title={Utils.localizeMessage('admin.jobTable.cancelButton', 'Cancel')}\n                >\n                    {'×'}\n                </span>\n            );\n        }\n\n        return cancelButton;\n    }\n\n    render() {\n        var items = this.props.jobs.map((job) => {\n            return (\n                <tr key={job.id}>\n                    <td\n                        width='30px'\n                        className='whitespace--nowrap text-center'\n                    >\n                        {this.getCancelButton(job)}\n                    </td>\n                    <td className='whitespace--nowrap'>{this.getStatus(job)}</td>\n                    <td className='whitespace--nowrap'>{this.getFinishAt(job.status, job.last_activity_at)}</td>\n                    <td className='whitespace--nowrap'>{this.getRunLength(job)}</td>\n                    <td colSpan='3'>{this.getExtraInfoText(job)}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div className='job-table__panel'>\n                <div className='job-table__create-button'>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleCreateJob}\n                            disabled={this.props.disabled}\n                        >\n                            {this.props.createJobButtonText}\n                        </button>\n                    </div>\n                    <div className='help-text'>\n                        {this.props.createJobHelpText}\n                    </div>\n                </div>\n                <div className='job-table__table'>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th width='30px'/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerStatus'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerFinishAt'\n                                        defaultMessage='Finish Time'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerRunTime'\n                                        defaultMessage='Run Time'\n                                    />\n                                </th>\n                                <th colSpan='3'>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerExtraInfo'\n                                        defaultMessage='Details'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {items}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(JobTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as JobsActions from 'mattermost-redux/actions/jobs';\n\nimport store from 'stores/redux_store.jsx';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nexport async function createJob(job, success, error) {\n    const {data, error: err} = await JobsActions.createJob(job)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n\nexport async function cancelJob(jobId, success, error) {\n    const {data, error: err} = await JobsActions.cancelJob(jobId)(dispatch, getState);\n    if (data && success) {\n        success(data);\n    } else if (err && error) {\n        error({id: err.server_error_id, ...err});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {recycleDatabaseConnection} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class DatabaseSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        // driverName and dataSource are read-only from the UI\n\n        config.SqlSettings.MaxIdleConns = this.parseIntNonZero(this.state.maxIdleConns);\n        config.SqlSettings.MaxOpenConns = this.parseIntNonZero(this.state.maxOpenConns);\n        config.SqlSettings.Trace = this.state.trace;\n        config.SqlSettings.QueryTimeout = this.parseIntNonZero(this.state.queryTimeout);\n        config.SqlSettings.ConnMaxLifetimeMilliseconds = this.parseIntNonNegative(this.state.connMaxLifetimeMilliseconds);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            driverName: config.SqlSettings.DriverName,\n            dataSource: config.SqlSettings.DataSource,\n            maxIdleConns: config.SqlSettings.MaxIdleConns,\n            maxOpenConns: config.SqlSettings.MaxOpenConns,\n            trace: config.SqlSettings.Trace,\n            queryTimeout: config.SqlSettings.QueryTimeout,\n            connMaxLifetimeMilliseconds: config.SqlSettings.ConnMaxLifetimeMilliseconds,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.database.title'\n                defaultMessage='Database Settings'\n            />\n        );\n    }\n\n    renderSettings() {\n        const dataSource = '**********' + this.state.dataSource.substring(this.state.dataSource.indexOf('@'));\n\n        let recycleDbButton = <div/>;\n        if (this.props.license.IsLicensed === 'true') {\n            recycleDbButton = (\n                <RequestButton\n                    requestAction={recycleDatabaseConnection}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.recycle.recycleDescription'\n                            defaultMessage='Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {reloadConfiguration} feature to load the new settings while the server is running. The administrator should then use {featureName} feature to recycle the database connections based on the new settings.'\n                            values={{\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.recycle.recycleDescription.featureName'\n                                            defaultMessage='Recycle Database Connections'\n                                        />\n                                    </b>\n                                ),\n                                reloadConfiguration: (\n                                    <a href='../general/configuration'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.recycle.recycleDescription.reloadConfiguration'\n                                                defaultMessage='Configuration > Reload Configuration from Disk'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.recycle.button'\n                            defaultMessage='Recycle Database Connections'\n                        />\n                    }\n                    showSuccessMessage={false}\n                    errorMessage={{\n                        id: t('admin.recycle.reloadFail'),\n                        defaultMessage: 'Recycling unsuccessful: {error}',\n                    }}\n                    includeDetailedError={true}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.sql.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DriverName'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.driverName'\n                            defaultMessage='Driver Name:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={this.state.driverName}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.driverNameDescription'\n                                defaultMessage='Set the database driver in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DataSource'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.dataSource'\n                            defaultMessage='Data Source:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={dataSource}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.dataSourceDescription'\n                                defaultMessage='Set the database source in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <TextSetting\n                    id='maxIdleConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsTitle'\n                            defaultMessage='Maximum Idle Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxConnectionsExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsDescription'\n                            defaultMessage='Maximum number of idle connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxIdleConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxIdleConns')}\n                />\n                <TextSetting\n                    id='maxOpenConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenTitle'\n                            defaultMessage='Maximum Open Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxOpenExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenDescription'\n                            defaultMessage='Maximum number of open connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxOpenConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxOpenConns')}\n                />\n                <TextSetting\n                    id='queryTimeout'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutTitle'\n                            defaultMessage='Query Timeout:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.queryTimeoutExample', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutDescription'\n                            defaultMessage='The number of seconds to wait for a response from the database after opening a connection and sending the query. Errors that you see in the UI or in the logs as a result of a query timeout can vary depending on the type of query.'\n                        />\n                    }\n                    value={this.state.queryTimeout}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.QueryTimeout')}\n                />\n                <TextSetting\n                    id='connMaxLifetimeMilliseconds'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeTitle'\n                            defaultMessage='Maximum Connection Lifetime:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.connMaxLifetimeExample', 'E.g.: \"3600000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeDescription'\n                            defaultMessage='Maximum lifetime for a connection to the database in milliseconds.'\n                        />\n                    }\n                    value={this.state.connMaxLifetimeMilliseconds}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.ConnMaxLifetimeMilliseconds')}\n                />\n                <BooleanSetting\n                    id='trace'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.traceTitle'\n                            defaultMessage='SQL Statement Logging: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.traceDescription'\n                            defaultMessage='(Development Mode) When true, executing SQL statements are written to the log.'\n                        />\n                    }\n                    value={this.state.trace}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.Trace')}\n                />\n                {recycleDbButton}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {elasticsearchPurgeIndexes, elasticsearchTest} from 'actions/admin_actions.jsx';\nimport {JobStatuses, JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport JobsTable from './jobs';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class ElasticsearchSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.doTestConfig = this.doTestConfig.bind(this);\n        this.handleSettingChanged = this.handleSettingChanged.bind(this);\n        this.handleSaved = this.handleSaved.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.ElasticsearchSettings.ConnectionUrl = this.state.connectionUrl;\n        config.ElasticsearchSettings.Username = this.state.username;\n        config.ElasticsearchSettings.Password = this.state.password;\n        config.ElasticsearchSettings.Sniff = this.state.sniff;\n        config.ElasticsearchSettings.EnableIndexing = this.state.enableIndexing;\n        config.ElasticsearchSettings.EnableSearching = this.state.enableSearching;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            connectionUrl: config.ElasticsearchSettings.ConnectionUrl,\n            username: config.ElasticsearchSettings.Username,\n            password: config.ElasticsearchSettings.Password,\n            sniff: config.ElasticsearchSettings.Sniff,\n            enableIndexing: config.ElasticsearchSettings.EnableIndexing,\n            enableSearching: config.ElasticsearchSettings.EnableSearching,\n            configTested: true,\n            canSave: true,\n            canPurgeAndIndex: config.ElasticsearchSettings.EnableIndexing,\n        };\n    }\n\n    handleSettingChanged(id, value) {\n        if (id === 'enableIndexing') {\n            if (value === false) {\n                this.setState({\n                    enableSearching: false,\n                });\n            } else {\n                this.setState({\n                    canSave: false,\n                    configTested: false,\n                });\n            }\n        }\n\n        if (id === 'connectionUrl' || id === 'username' || id === 'password' || id === 'sniff') {\n            this.setState({\n                configTested: false,\n                canSave: false,\n            });\n        }\n\n        if (id !== 'enableSearching') {\n            this.setState({\n                canPurgeAndIndex: false,\n            });\n        }\n\n        this.handleChange(id, value);\n    }\n\n    handleSaved() {\n        this.setState({\n            canPurgeAndIndex: this.state.enableIndexing,\n        });\n    }\n\n    canSave() {\n        return this.state.canSave;\n    }\n\n    doTestConfig(success, error) {\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.getConfigFromState(config);\n\n        elasticsearchTest(\n            config,\n            () => {\n                this.setState({\n                    configTested: true,\n                    canSave: true,\n                });\n                success();\n                this.doSubmit();\n            },\n            (err) => {\n                this.setState({\n                    configTested: false,\n                    canSave: false,\n                });\n                error(err);\n            }\n        );\n    }\n\n    getExtraInfo(job) {\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <FormattedMessage\n                    id='admin.elasticsearch.percentComplete'\n                    defaultMessage='{percent}% Complete'\n                    values={{percent: Number(job.progress)}}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.elasticsearch.title'\n                defaultMessage='Elasticsearch'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableIndexing'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingTitle'\n                            defaultMessage='Enable Elasticsearch Indexing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingDescription'\n                            defaultMessage='When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Elasticsearch for search queries\" is enabled. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.enableIndexingDescription.documentationLinkText'\n                                            defaultMessage='Learn more about Elasticsearch in our documentation.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableIndexing')}\n                />\n                <TextSetting\n                    id='connectionUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlTitle'\n                            defaultMessage='Server Connection Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.connectionUrlExample', 'E.g.: \"https://elasticsearch.example.org:9200\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlDescription'\n                            defaultMessage='The address of the Elasticsearch server. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-server-setup/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.connectionUrlExample.documentationLinkText'\n                                            defaultMessage='Please see documentation with server setup instructions.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.connectionUrl}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.ConnectionUrl')}\n                />\n                <TextSetting\n                    id='username'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameTitle'\n                            defaultMessage='Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.usernameExample', 'E.g.: \"elastic\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameDescription'\n                            defaultMessage='(Optional) The username to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.username}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Username')}\n                />\n                <TextSetting\n                    id='password'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordTitle'\n                            defaultMessage='Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.password', 'E.g.: \"yourpassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordDescription'\n                            defaultMessage='(Optional) The password to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.password}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Password')}\n                />\n                <BooleanSetting\n                    id='sniff'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffTitle'\n                            defaultMessage='Enable Cluster Sniffing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffDescription'\n                            defaultMessage='When true, sniffing finds and connects to all data nodes in your cluster automatically.'\n                        />\n                    }\n                    value={this.state.sniff}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Sniff')}\n                />\n                <RequestButton\n                    requestAction={this.doTestConfig}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.testHelpText'\n                            defaultMessage='Tests if the Mattermost server can connect to the Elasticsearch server specified. Testing the connection only saves the configuration if the test is successful. See log file for more detailed error messages.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.elasticsearch_test_button'\n                            defaultMessage='Test Connection'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.testConfigSuccess'),\n                        defaultMessage: 'Test successful. Configuration saved.',\n                    }}\n                    disabled={!this.state.enableIndexing}\n                />\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.elasticsearch.bulkIndexingTitle'\n                            defaultMessage='Bulk Indexing:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='job-table-setting'>\n                            <JobsTable\n                                jobType={JobTypes.ELASTICSEARCH_POST_INDEXING}\n                                disabled={!this.state.canPurgeAndIndex}\n                                createJobButtonText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.title'\n                                        defaultMessage='Index Now'\n                                    />\n                                }\n                                createJobHelpText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.help'\n                                        defaultMessage='All posts in the database will be indexed from oldest to newest. Elasticsearch is available during indexing but search results may be incomplete until the indexing job is complete.'\n                                    />\n                                }\n                                getExtraInfoText={this.getExtraInfo}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <RequestButton\n                    requestAction={elasticsearchPurgeIndexes}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesHelpText'\n                            defaultMessage='Purging will entirely remove the index on the Elasticsearch server. Search results may be incomplete until a bulk index of the existing post database is rebuilt.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton'\n                            defaultMessage='Purge Index'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.success'),\n                        defaultMessage: 'Indexes purged successfully.',\n                    }}\n                    errorMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.error'),\n                        defaultMessage: 'Failed to purge indexes: {error}',\n                    }}\n                    disabled={!this.state.canPurgeAndIndex}\n                    label={(\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton.label'\n                            defaultMessage='Purge Indexes:'\n                        />\n                    )}\n                />\n                <BooleanSetting\n                    id='enableSearching'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingTitle'\n                            defaultMessage='Enable Elasticsearch for search queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.'\n                        />\n                    }\n                    value={this.state.enableSearching}\n                    disabled={!this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableSearching')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport ErrorStore from 'stores/error_store.jsx';\nimport {ErrorBarTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport EmailConnectionTest from 'components/admin_console/email_connection_test';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport {ConnectionSecurityDropdownSettingEmail} from './connection_security_dropdown_setting.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst EMAIL_NOTIFICATION_CONTENTS_FULL = 'full';\nconst EMAIL_NOTIFICATION_CONTENTS_GENERIC = 'generic';\n\nexport default class EmailSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.handleSaved = this.handleSaved.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.EmailSettings.SendEmailNotifications = this.state.sendEmailNotifications;\n        config.EmailSettings.EnablePreviewModeBanner = this.state.enablePreviewModeBanner;\n        config.EmailSettings.FeedbackName = this.state.feedbackName;\n        config.EmailSettings.FeedbackEmail = this.state.feedbackEmail;\n        config.EmailSettings.FeedbackOrganization = this.state.feedbackOrganization;\n        config.EmailSettings.EnableSMTPAuth = this.state.enableSMTPAuth;\n        config.EmailSettings.SMTPUsername = this.state.smtpUsername;\n        config.EmailSettings.SMTPPassword = this.state.smtpPassword;\n        config.EmailSettings.SMTPServer = this.state.smtpServer;\n        config.EmailSettings.SMTPPort = this.state.smtpPort;\n        config.EmailSettings.ConnectionSecurity = this.state.connectionSecurity;\n        config.EmailSettings.EnableEmailBatching = this.state.enableEmailBatching;\n        config.ServiceSettings.EnableSecurityFixAlert = this.state.enableSecurityFixAlert;\n        config.EmailSettings.SkipServerCertificateVerification = this.state.skipServerCertificateVerification;\n        config.EmailSettings.EmailNotificationContentsType = this.state.emailNotificationContentsType;\n\n        return config;\n    }\n\n    handleSaved(newConfig) {\n        if (newConfig.EmailSettings.SendEmailNotifications || !newConfig.EmailSettings.EnablePreviewModeBanner) {\n            ErrorStore.clearError(ErrorBarTypes.PREVIEW_MODE);\n        }\n    }\n\n    getStateFromConfig(config) {\n        return {\n            sendEmailNotifications: config.EmailSettings.SendEmailNotifications,\n            enablePreviewModeBanner: config.EmailSettings.EnablePreviewModeBanner,\n            feedbackName: config.EmailSettings.FeedbackName,\n            feedbackEmail: config.EmailSettings.FeedbackEmail,\n            feedbackOrganization: config.EmailSettings.FeedbackOrganization,\n            enableSMTPAuth: config.EmailSettings.EnableSMTPAuth,\n            smtpUsername: config.EmailSettings.SMTPUsername,\n            smtpPassword: config.EmailSettings.SMTPPassword,\n            smtpServer: config.EmailSettings.SMTPServer,\n            smtpPort: config.EmailSettings.SMTPPort,\n            connectionSecurity: config.EmailSettings.ConnectionSecurity,\n            enableEmailBatching: config.EmailSettings.EnableEmailBatching,\n            skipServerCertificateVerification: config.EmailSettings.SkipServerCertificateVerification,\n            enableSecurityFixAlert: config.ServiceSettings.EnableSecurityFixAlert,\n            emailNotificationContentsType: config.EmailSettings.EmailNotificationContentsType,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.notifications.email'\n                defaultMessage='Email'\n            />\n        );\n    }\n\n    renderSettings() {\n        let enableEmailBatchingDisabledText = null;\n\n        if (this.props.config.ClusterSettings.Enable) {\n            enableEmailBatchingDisabledText = (\n                <span\n                    key='admin.email.enableEmailBatching.clusterEnabled'\n                    className='help-text'\n                >\n                    <FormattedHTMLMessage\n                        id='admin.email.enableEmailBatching.clusterEnabled'\n                        defaultMessage='Email batching cannot be enabled unless the SiteURL is configured in <b>Configuration > SiteURL</b>.'\n                    />\n                </span>\n            );\n        } else if (!this.props.config.ServiceSettings.SiteURL) {\n            enableEmailBatchingDisabledText = (\n                <span\n                    key='admin.email.enableEmailBatching.siteURL'\n                    className='help-text'\n                >\n                    <FormattedMarkdownMessage\n                        id='admin.email.enableEmailBatching.siteURL'\n                        defaultMessage='Email batching cannot be enabled unless the SiteURL is configured in **Configuration > SiteURL**.'\n                    />\n                </span>\n            );\n        }\n\n        let emailNotificationContentsTypeDropdown = null;\n        let emailNotificationContentsHelpText = null;\n        if (this.props.license.EmailNotificationContents === 'true') {\n            const emailNotificationContentsTypes = [];\n            emailNotificationContentsTypes.push({value: EMAIL_NOTIFICATION_CONTENTS_FULL, text: Utils.localizeMessage('admin.email.notification.contents.full', 'Send full message contents')});\n            emailNotificationContentsTypes.push({value: EMAIL_NOTIFICATION_CONTENTS_GENERIC, text: Utils.localizeMessage('admin.email.notification.contents.generic', 'Send generic description with only sender name')});\n\n            if (this.state.emailNotificationContentsType === EMAIL_NOTIFICATION_CONTENTS_FULL) {\n                emailNotificationContentsHelpText = (\n                    <FormattedMarkdownMessage\n                        key='admin.email.notification.contents.full.description'\n                        id='admin.email.notification.contents.full.description'\n                        defaultMessage='Sender name and channel are included in email notifications.\\nTypically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.'\n                    />\n                );\n            } else if (this.state.emailNotificationContentsType === EMAIL_NOTIFICATION_CONTENTS_GENERIC) {\n                emailNotificationContentsHelpText = (\n                    <FormattedMarkdownMessage\n                        key='admin.email.notification.contents.generic.description'\n                        id='admin.email.notification.contents.generic.description'\n                        defaultMessage='Only the name of the person who sent the message, with no information about channel name or message contents are included in email notifications.\\nTypically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.'\n                    />\n                );\n            }\n\n            emailNotificationContentsTypeDropdown = (\n                <DropdownSetting\n                    id='emailNotificationContentsType'\n                    values={emailNotificationContentsTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notification.contents.title'\n                            defaultMessage='Email Notification Contents: '\n                        />\n                    }\n                    value={this.state.emailNotificationContentsType}\n                    onChange={this.handleChange}\n                    helpText={emailNotificationContentsHelpText}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EmailNotificationContentsType')}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='sendEmailNotifications'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationsTitle'\n                            defaultMessage='Enable Email Notifications: '\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.notificationsDescription'\n                            defaultMessage='Typically set to true in production. When true, Mattermost attempts to send email notifications. Developers may set this field to false to skip email setup for faster development.'\n                        />\n                    }\n                    value={this.state.sendEmailNotifications}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('EmailSettings.SendEmailNotifications')}\n                />\n                <BooleanSetting\n                    id='enablePreviewModeBanner'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enablePreviewModeBannerTitle'\n                            defaultMessage='Enable Preview Mode Banner:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.email.enablePreviewModeBannerDescription'\n                            defaultMessage='When true, the Preview Mode banner is displayed so users are aware that email notifications are disabled. When false, the Preview Mode banner is not displayed to users.'\n                        />\n                    }\n                    value={this.state.enablePreviewModeBanner}\n                    onChange={this.handleChange}\n                    disabled={this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnablePreviewModeBanner')}\n                />\n                <BooleanSetting\n                    id='enableEmailBatching'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enableEmailBatchingTitle'\n                            defaultMessage='Enable Email Batching: '\n                        />\n                    }\n                    helpText={[\n                        <FormattedHTMLMessage\n                            key='admin.email.enableEmailBatchingDesc'\n                            id='admin.email.enableEmailBatchingDesc'\n                            defaultMessage='When true, users will have email notifications for multiple direct messages and mentions combined into a single email. Batching will occur at a default interval of 15 minutes, configurable in Account Settings > Notifications.'\n                        />,\n                        enableEmailBatchingDisabledText,\n                    ]}\n                    value={this.state.enableEmailBatching && !this.props.config.ClusterSettings.Enable && Boolean(this.props.config.ServiceSettings.SiteURL)}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || this.props.config.ClusterSettings.Enable || !this.props.config.ServiceSettings.SiteURL}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnableEmailBatching')}\n                />\n                {emailNotificationContentsTypeDropdown}\n                <TextSetting\n                    id='feedbackName'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationDisplayTitle'\n                            defaultMessage='Notification Display Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationDisplayExample', 'Ex: \"Mattermost Notification\", \"System\", \"No-Reply\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationDisplayDescription'\n                            defaultMessage='Display name on email account used when sending notification emails from Mattermost.'\n                        />\n                    }\n                    value={this.state.feedbackName}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackName')}\n                />\n                <TextSetting\n                    id='feedbackEmail'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationEmailTitle'\n                            defaultMessage='Notification From Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationEmailExample', 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationEmailDescription'\n                            defaultMessage='Email address displayed on email account used when sending notification emails from Mattermost.'\n                        />\n                    }\n                    value={this.state.feedbackEmail}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackEmail')}\n                />\n                <TextSetting\n                    id='feedbackOrganization'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.notificationOrganization'\n                            defaultMessage='Notification Footer Mailing Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.notificationOrganizationExample', 'Ex: \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.notificationOrganizationDescription'\n                            defaultMessage='Organization name and address displayed on email notifications from Mattermost, such as \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\". If the field is left empty, the organization name and address will not be displayed.'\n                        />\n                    }\n                    value={this.state.feedbackOrganization}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.FeedbackOrganization')}\n                />\n                <TextSetting\n                    id='smtpServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpServerTitle'\n                            defaultMessage='SMTP Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpServerExample', 'Ex: \"smtp.yourcompany.com\", \"email-smtp.us-east-1.amazonaws.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpServerDescription'\n                            defaultMessage='Location of SMTP email server.'\n                        />\n                    }\n                    value={this.state.smtpServer}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPServer')}\n                />\n                <TextSetting\n                    id='smtpPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpPortTitle'\n                            defaultMessage='SMTP Server Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpPortExample', 'Ex: \"25\", \"465\", \"587\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpPortDescription'\n                            defaultMessage='Port of SMTP email server.'\n                        />\n                    }\n                    value={this.state.smtpPort}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPPort')}\n                />\n                <BooleanSetting\n                    id='enableSMTPAuth'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.enableSMTPAuthTitle'\n                            defaultMessage='Enable SMTP Authentication: '\n                        />\n                    }\n                    helpText={[\n                        <FormattedHTMLMessage\n                            key='admin.email.enableSMTPAuthDesc'\n                            id='admin.email.enableSMTPAuthDesc'\n                            defaultMessage='When true, SMTP Authentication is enabled.'\n                        />,\n                    ]}\n                    value={this.state.enableSMTPAuth}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.EnableSMTPAuth')}\n                />\n                <TextSetting\n                    id='smtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpUsernameTitle'\n                            defaultMessage='SMTP Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpUsernameExample', 'Ex: \"admin@yourcompany.com\", \"AKIADTOVBGERKLCBV\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpUsernameDescription'\n                            defaultMessage=' Obtain this credential from administrator setting up your email server.'\n                        />\n                    }\n                    value={this.state.smtpUsername}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || !this.state.enableSMTPAuth}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPUsername')}\n                />\n                <TextSetting\n                    id='smtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.smtpPasswordTitle'\n                            defaultMessage='SMTP Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.smtpPasswordExample', 'Ex: \"yourpassword\", \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.smtpPasswordDescription'\n                            defaultMessage=' Obtain this credential from administrator setting up your email server.'\n                        />\n                    }\n                    value={this.state.smtpPassword}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || !this.state.enableSMTPAuth}\n                    setByEnv={this.isSetByEnv('EmailSettings.SMTPPassword')}\n                />\n                <ConnectionSecurityDropdownSettingEmail\n                    value={this.state.connectionSecurity}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('EmailSettings.ConnectionSecurity')}\n                />\n                <EmailConnectionTest\n                    config={this.props.config}\n                    getConfigFromState={this.getConfigFromState}\n                    disabled={!this.state.sendEmailNotifications}\n                />\n                <BooleanSetting\n                    id='skipServerCertificateVerification'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.skipServerCertificateVerification.title'\n                            defaultMessage='Skip Server Certificate Verification: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.email.skipServerCertificateVerification.description'\n                            defaultMessage='When true, Mattermost will not verify the email server certificate.'\n                        />\n                    }\n                    value={this.state.skipServerCertificateVerification}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications || this.state.connectionSecurity === ''}\n                    setByEnv={this.isSetByEnv('EmailSettings.SkipServerCertificateVerification')}\n                />\n                <BooleanSetting\n                    id='enableSecurityFixAlert'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.securityTitle'\n                            defaultMessage='Enable Security Alerts: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.securityDesc'\n                            defaultMessage='When true, System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.'\n                        />\n                    }\n                    value={this.state.enableSecurityFixAlert}\n                    onChange={this.handleChange}\n                    disabled={!this.state.sendEmailNotifications}\n                    setByEnv={this.isSetByEnv('ServiceSettings.EnableSecurityFixAlert')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {testEmail} from 'mattermost-redux/actions/admin';\n\nimport EmailConnectionTestButton from './email_connection_test.jsx';\n\nexport default connect(null, mapDispatchToProps)(EmailConnectionTestButton);\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            testEmail,\n        }, dispatch),\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class EmailConnectionTestButton extends React.Component {\n    static get propTypes() {\n        return {\n            config: PropTypes.object.isRequired,\n            getConfigFromState: PropTypes.func.isRequired,\n            disabled: PropTypes.bool.isRequired,\n            actions: PropTypes.shape({\n                testEmail: PropTypes.func.isRequired,\n            }).isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            testing: false,\n            success: false,\n            fail: null,\n        };\n    }\n\n    handleTestConnection = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            testing: true,\n            success: false,\n            fail: null,\n        });\n\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.props.getConfigFromState(config);\n\n        this.props.actions.testEmail(config).then(\n            (data) => {\n                if (data.error) {\n                    let fail = data.error.message;\n                    if (data.error.detailed_error) {\n                        fail += ' - ' + data.error.detailed_error;\n                    }\n                    this.setState({\n                        testing: false,\n                        fail,\n                    });\n                } else {\n                    this.setState({\n                        testing: false,\n                        success: true,\n                    });\n                }\n            }\n        );\n    }\n\n    render() {\n        let testMessage = null;\n        if (this.state.success) {\n            testMessage = (\n                <div className='alert alert-success'>\n                    <i\n                        className='fa fa-check'\n                        title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                    />\n                    <FormattedMessage\n                        id='admin.email.emailSuccess'\n                        defaultMessage='No errors were reported while sending an email.  Please check your inbox to make sure.'\n                    />\n                </div>\n            );\n        } else if (this.state.fail) {\n            testMessage = (\n                <div className='alert alert-warning'>\n                    <i\n                        className='fa fa-warning'\n                        title={Utils.localizeMessage('generic_icons.warning', 'Warning Icon')}\n                    />\n                    {this.state.fail}\n                </div>\n            );\n        }\n\n        let contents = null;\n        if (this.state.testing) {\n            contents = (\n                <span>\n                    <span\n                        className='fa fa-refresh icon--rotate'\n                        title={Utils.localizeMessage('generic_icons.testing', 'Testing Icon')}\n                    />\n                    {Utils.localizeMessage('admin.email.testing', 'Testing...')}\n                </span>\n            );\n        } else {\n            contents = (\n                <FormattedMessage\n                    id='admin.email.connectionSecurityTest'\n                    defaultMessage='Test Connection'\n                />\n            );\n        }\n\n        return (\n            <div className='form-group email-connection-test'>\n                <div className='col-sm-offset-4 col-sm-8'>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleTestConnection}\n                            disabled={this.props.disabled}\n                        >\n                            {contents}\n                        </button>\n                        <div>\n                            {testMessage}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport DropdownSetting from './dropdown_setting.jsx';\n\nimport {CONNECTION_SECURITY_HELP_TEXT_EMAIL} from './admin_definition_constants';\n\nexport function ConnectionSecurityDropdownSettingEmail(props) {\n    return (\n        <DropdownSetting\n            id='connectionSecurity'\n            values={[\n                {value: '', text: Utils.localizeMessage('admin.connectionSecurityNone', 'None')},\n                {value: 'TLS', text: Utils.localizeMessage('admin.connectionSecurityTls', 'TLS (Recommended)')},\n                {value: 'STARTTLS', text: Utils.localizeMessage('admin.connectionSecurityStart')},\n            ]}\n            label={\n                <FormattedMessage\n                    id='admin.connectionSecurityTitle'\n                    defaultMessage='Connection Security:'\n                />\n            }\n            value={props.value}\n            onChange={props.onChange}\n            disabled={props.disabled}\n            helpText={CONNECTION_SECURITY_HELP_TEXT_EMAIL}\n            setByEnv={props.setByEnv}\n        />\n    );\n}\nConnectionSecurityDropdownSettingEmail.defaultProps = {\n};\n\nConnectionSecurityDropdownSettingEmail.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    setByEnv: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {JobTypes} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getSiteURL} from 'utils/url.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport BooleanSetting from './boolean_setting.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\nimport RadioSetting from './radio_setting';\n\nconst exportFormats = {\n    EXPORT_FORMAT_CSV: 'csv',\n    EXPORT_FORMAT_ACTIANCE: 'actiance',\n    EXPORT_FORMAT_GLOBALRELAY: 'globalrelay',\n};\n\nexport default class MessageExportSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n    }\n\n    getConfigFromState(config) {\n        config.MessageExportSettings.EnableExport = this.state.enableComplianceExport;\n        config.MessageExportSettings.ExportFormat = this.state.exportFormat;\n        config.MessageExportSettings.DailyRunTime = this.state.exportJobStartTime;\n\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            config.MessageExportSettings.GlobalRelaySettings = {\n                CustomerType: this.state.globalRelayCustomerType,\n                SmtpUsername: this.state.globalRelaySmtpUsername,\n                SmtpPassword: this.state.globalRelaySmtpPassword,\n                EmailAddress: this.state.globalRelayEmailAddress,\n\n            };\n        }\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const state = {\n            enableComplianceExport: config.MessageExportSettings.EnableExport,\n            exportFormat: config.MessageExportSettings.ExportFormat,\n            exportJobStartTime: config.MessageExportSettings.DailyRunTime,\n        };\n        if (config.MessageExportSettings.GlobalRelaySettings) {\n            state.globalRelayCustomerType = config.MessageExportSettings.GlobalRelaySettings.CustomerType;\n            state.globalRelaySmtpUsername = config.MessageExportSettings.GlobalRelaySettings.SmtpUsername;\n            state.globalRelaySmtpPassword = config.MessageExportSettings.GlobalRelaySettings.SmtpPassword;\n            state.globalRelayEmailAddress = config.MessageExportSettings.GlobalRelaySettings.EmailAddress;\n        }\n        return state;\n    }\n\n    getJobDetails = (job) => {\n        if (job.data && job.data.messages_exported) {\n            return (\n                <FormattedMessage\n                    id='admin.complianceExport.messagesExportedCount'\n                    defaultMessage='{count} messages exported.'\n                    values={{\n                        count: job.data.messages_exported,\n                    }}\n                />\n            );\n        }\n        return null;\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.complianceExport.title'\n                defaultMessage='Compliance Export (Beta)'\n            />\n        );\n    }\n\n    renderSettings() {\n        const exportFormatOptions = [\n            {value: exportFormats.EXPORT_FORMAT_ACTIANCE, text: Utils.localizeMessage('admin.complianceExport.exportFormat.actiance', 'Actiance XML')},\n            {value: exportFormats.EXPORT_FORMAT_CSV, text: Utils.localizeMessage('admin.complianceExport.exportFormat.csv', 'CSV')},\n            {value: exportFormats.EXPORT_FORMAT_GLOBALRELAY, text: Utils.localizeMessage('admin.complianceExport.exportFormat.globalrelay', 'GlobalRelay EML')},\n        ];\n\n        // if the export format is globalrelay, the user needs to set some additional parameters\n        let globalRelaySettings;\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            const globalRelayCustomerType = (\n                <RadioSetting\n                    id='globalRelayCustomerType'\n                    values={[\n                        {value: 'A9', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a9.description', 'A9/Type 9')},\n                        {value: 'A10', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a10.description', 'A10/Type 10')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.title'\n                            defaultMessage='Customer Type:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.description'\n                            defaultMessage='The type of GlobalRelay customer account that your organization has.'\n                        />\n                    }\n                    value={this.state.globalRelayCustomerType ? this.state.globalRelayCustomerType : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.CustomerType')}\n                />\n            );\n\n            const globalRelaySmtpUsername = (\n                <TextSetting\n                    id='globalRelaySmtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.title'\n                            defaultMessage='SMTP Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpUsername.example', 'E.g.: \"globalRelayUser\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.description'\n                            defaultMessage='The username that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpUsername ? this.state.globalRelaySmtpUsername : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpUsername')}\n                />\n            );\n\n            const globalRelaySmtpPassword = (\n                <TextSetting\n                    id='globalRelaySmtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.title'\n                            defaultMessage='SMTP Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpPassword.example', 'E.g.: \"globalRelayPassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.description'\n                            defaultMessage='The password that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpPassword ? this.state.globalRelaySmtpPassword : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpPassword')}\n                />\n            );\n\n            const globalRelayEmail = (\n                <TextSetting\n                    id='globalRelayEmailAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.title'\n                            defaultMessage='Email Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelayEmailAddress.example', 'E.g.: \"globalrelay@mattermost.com\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.description'\n                            defaultMessage='The email address that your GlobalRelay server monitors for incoming Compliance Exports.'\n                        />\n                    }\n                    value={this.state.globalRelayEmailAddress ? this.state.globalRelayEmailAddress : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.EmailAddress')}\n                />\n            );\n\n            globalRelaySettings = (\n                <SettingsGroup id={'globalRelaySettings'} >\n                    {globalRelayCustomerType}\n                    {globalRelaySmtpUsername}\n                    {globalRelaySmtpPassword}\n                    {globalRelayEmail}\n                </SettingsGroup>\n            );\n        }\n\n        const dropdownHelpText = (\n            <FormattedMarkdownMessage\n                id='admin.complianceExport.exportFormat.description'\n                defaultMessage='Format of the compliance export. Corresponds to the system that you want to import the data into.\\n \\nFor Actiance XML, compliance export files are written to the \\\"exports\\\" subdirectory of the configured [Local Storage Directory]({siteURL}/admin_console/files/storage). For Global Relay EML, they are emailed to the configured email address.'\n                values={{siteURL: getSiteURL()}}\n            />\n        );\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableComplianceExport'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.complianceExportTitle'\n                            defaultMessage='Enable Compliance Export:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.complianceExportDesc'\n                            defaultMessage='When true, Mattermost will export all messages that were posted in the last 24 hours. The export task is scheduled to run once per day. See [the documentation](!https://about.mattermost.com/default-compliance-export-documentation) to learn more.'\n                        />\n                    }\n                    value={this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableExport')}\n                />\n\n                <TextSetting\n                    id='exportJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportJobStartTime.title'\n                            defaultMessage='Compliance Export Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.exportJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.exportJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled compliance export job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.exportJobStartTime}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DailyRunTime')}\n                />\n\n                <DropdownSetting\n                    id='exportFormat'\n                    values={exportFormatOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportFormat.title'\n                            defaultMessage='Export Format:'\n                        />\n                    }\n                    helpText={dropdownHelpText}\n                    value={this.state.exportFormat}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.ExportFormat')}\n                />\n\n                {globalRelaySettings}\n\n                <JobsTable\n                    jobType={JobTypes.MESSAGE_EXPORT}\n                    disabled={!this.state.enableComplianceExport}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.title'\n                            defaultMessage='Run Compliance Export Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.help'\n                            defaultMessage='Initiates a Compliance Export job immediately.'\n                        />\n                    }\n                    getExtraInfoText={this.getJobDetails}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings.jsx';\nimport Setting from './setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nexport default class PasswordSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n\n        this.renderSettings = this.renderSettings.bind(this);\n\n        this.getSampleErrorMsg = this.getSampleErrorMsg.bind(this);\n\n        this.handlePasswordLengthChange = this.handlePasswordLengthChange.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n\n        this.state = Object.assign(this.state, {\n            passwordMinimumLength: props.config.PasswordSettings.MinimumLength,\n            passwordLowercase: props.config.PasswordSettings.Lowercase,\n            passwordNumber: props.config.PasswordSettings.Number,\n            passwordUppercase: props.config.PasswordSettings.Uppercase,\n            passwordSymbol: props.config.PasswordSettings.Symbol,\n            maximumLoginAttempts: props.config.ServiceSettings.MaximumLoginAttempts,\n        });\n\n        // Update sample message from config settings\n        t('user.settings.security.passwordErrorLowercase');\n        t('user.settings.security.passwordErrorLowercaseUppercase');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseUppercaseSymbol');\n        t('user.settings.security.passwordErrorLowercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseSymbol');\n        t('user.settings.security.passwordErrorUppercase');\n        t('user.settings.security.passwordErrorUppercaseNumber');\n        t('user.settings.security.passwordErrorUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorUppercaseSymbol');\n        t('user.settings.security.passwordErrorNumber');\n        t('user.settings.security.passwordErrorNumberSymbol');\n        t('user.settings.security.passwordErrorSymbol');\n\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (props.config.PasswordSettings.Lowercase) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (props.config.PasswordSettings.Uppercase) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (props.config.PasswordSettings.Number) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (props.config.PasswordSettings.Symbol) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        this.sampleErrorMsg = (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (this.state.passwordMinimumLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    getConfigFromState(config) {\n        config.PasswordSettings.MinimumLength = this.parseIntNonZero(this.state.passwordMinimumLength, Constants.MIN_PASSWORD_LENGTH);\n        config.PasswordSettings.Lowercase = this.refs.lowercase.checked;\n        config.PasswordSettings.Uppercase = this.refs.uppercase.checked;\n        config.PasswordSettings.Number = this.refs.number.checked;\n        config.PasswordSettings.Symbol = this.refs.symbol.checked;\n\n        config.ServiceSettings.MaximumLoginAttempts = this.parseIntNonZero(this.state.maximumLoginAttempts);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            passwordMinimumLength: config.PasswordSettings.MinimumLength,\n            passwordLowercase: config.PasswordSettings.Lowercase,\n            passwordNumber: config.PasswordSettings.Number,\n            passwordUppercase: config.PasswordSettings.Uppercase,\n            passwordSymbol: config.PasswordSettings.Symbol,\n            maximumLoginAttempts: config.ServiceSettings.MaximumLoginAttempts,\n        };\n    }\n\n    getSampleErrorMsg(minLength) {\n        if (this.props.config.PasswordSettings.MinimumLength > Constants.MAX_PASSWORD_LENGTH || this.props.config.PasswordSettings.MinimumLength < Constants.MIN_PASSWORD_LENGTH) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.passwordMinLength'\n                    default='Invalid minimum length, cannot show preview.'\n                />\n            );\n        }\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (this.refs.lowercase.checked) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (this.refs.uppercase.checked) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (this.refs.number.checked) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (this.refs.symbol.checked) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        return (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (minLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    handlePasswordLengthChange(id, value) {\n        this.sampleErrorMsg = this.getSampleErrorMsg(value);\n        this.handleChange(id, value);\n    }\n\n    handleCheckboxChange(id, value) {\n        this.sampleErrorMsg = this.getSampleErrorMsg(this.state.passwordMinimumLength);\n        this.handleChange(id, value);\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.security.password'\n                defaultMessage='Password'\n            />\n        );\n    }\n\n    renderSettings() {\n        return (\n            <SettingsGroup>\n                <div>\n                    <TextSetting\n                        id='passwordMinimumLength'\n                        label={\n                            <FormattedMessage\n                                id='admin.password.minimumLength'\n                                defaultMessage='Minimum Password Length:'\n                            />\n                        }\n                        placeholder={Utils.localizeMessage('admin.password.minimumLengthExample', 'E.g.: \"5\"')}\n                        helpText={\n                            <FormattedMessage\n                                id='admin.password.minimumLengthDescription'\n                                defaultMessage='Minimum number of characters required for a valid password. Must be a whole number greater than or equal to {min} and less than or equal to {max}.'\n                                values={{\n                                    min: Constants.MIN_PASSWORD_LENGTH,\n                                    max: Constants.MAX_PASSWORD_LENGTH,\n                                }}\n                            />\n                        }\n                        value={this.state.passwordMinimumLength}\n                        onChange={this.handlePasswordLengthChange}\n                        setByEnv={this.isSetByEnv('PasswordSettings.MinimumLength')}\n                    />\n                    <Setting\n                        label={\n                            <FormattedMessage\n                                id='passwordRequirements'\n                                defaultMessage='Password Requirements:'\n                            />\n                        }\n                    >\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='lowercase'\n                                    defaultChecked={this.state.passwordLowercase}\n                                    name='admin.password.lowercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.lowercase'\n                                    defaultMessage='At least one lowercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='uppercase'\n                                    defaultChecked={this.state.passwordUppercase}\n                                    name='admin.password.uppercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.uppercase'\n                                    defaultMessage='At least one uppercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='number'\n                                    defaultChecked={this.state.passwordNumber}\n                                    name='admin.password.number'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.number'\n                                    defaultMessage='At least one number'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='symbol'\n                                    defaultChecked={this.state.passwordSymbol}\n                                    name='admin.password.symbol'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.symbol'\n                                    defaultMessage='At least one symbol (e.g. \"~!@#$%^&*()\")'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <br/>\n                            <label>\n                                <FormattedMessage\n                                    id='admin.password.preview'\n                                    defaultMessage='Error message preview:'\n                                />\n                            </label>\n                            <br/>\n                            {this.sampleErrorMsg}\n                        </div>\n                    </Setting>\n                </div>\n                <TextSetting\n                    id='maximumLoginAttempts'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.attemptTitle'\n                            defaultMessage='Maximum Login Attempts:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.attemptExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.attemptDescription'\n                            defaultMessage='Login attempts allowed before user is locked out and required to reset password via email.'\n                        />\n                    }\n                    value={this.state.maximumLoginAttempts}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MaximumLoginAttempts')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\n\nimport FormError from 'components/form_error.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class MultiSelectSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        selected: PropTypes.array.isRequired,\n        mustBePresent: PropTypes.string,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n        noResultText: PropTypes.node,\n        errorText: PropTypes.node,\n        notPresent: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {error: false};\n    }\n\n    handleChange(newValue) {\n        const values = newValue.map((n) => {\n            return n.value;\n        });\n\n        if (this.props.selected.length > 0 && this.props.mustBePresent && values.join(',').indexOf(this.props.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.props.onChange(this.props.id, values);\n            this.setState({error: false});\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) { // eslint-disable-line camelcase\n        if (newProps.selected.length > 0 && newProps.mustBePresent && newProps.selected.join(',').indexOf(newProps.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.setState({error: false});\n        }\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <ReactSelect\n                    id={this.props.id}\n                    multi={true}\n                    labelKey='text'\n                    options={this.props.values}\n                    joinValues={true}\n                    clearable={false}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                    noResultsText={this.props.noResultText}\n                    onChange={this.handleChange}\n                    value={this.props.selected}\n                />\n                <FormError error={this.state.error}/>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {ChromePicker} from 'react-color';\n\nimport Setting from './setting.jsx';\n\nexport default class ColorSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The unique identifer for the admin console setting\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The text/jsx display name for the setting\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * The text/jsx help text to display underneath the setting\n         */\n        helpText: PropTypes.node,\n\n        /*\n         * The hex color value\n         */\n        value: PropTypes.string.isRequired,\n\n        /*\n         * Function called when the input changes\n         */\n        onChange: PropTypes.func,\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPicker: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.closePicker);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.closePicker);\n    }\n\n    handleChange = (color) => {\n        this.props.onChange(this.props.id, color.hex);\n    }\n\n    togglePicker = () => {\n        if (this.props.disabled) {\n            this.setState({showPicker: false});\n        } else {\n            this.setState({showPicker: !this.state.showPicker});\n        }\n    }\n\n    closePicker = (e) => {\n        if (!e.target.closest('.' + this.getPickerClass())) {\n            this.setState({showPicker: false});\n        }\n    }\n\n    onTextInput = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    getPickerClass = () => {\n        return this.props.id ? 'picker-' + this.props.id.replace('.', '-') : '';\n    }\n\n    render() {\n        let picker;\n        if (this.state.showPicker) {\n            picker = (\n                <div className={'color-picker__popover ' + this.getPickerClass()}>\n                    <ChromePicker\n                        color={this.props.value}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div className='input-group color-picker colorpicker-element'>\n                    <input\n                        type='text'\n                        className='form-control'\n                        value={this.props.value}\n                        onChange={this.onTextInput}\n                        disabled={this.props.disabled}\n                    />\n                    <span\n                        className={'input-group-addon ' + this.getPickerClass()}\n                        onClick={this.togglePicker}\n                    >\n                        <i style={{backgroundColor: this.props.value}}/>\n                    </span>\n                    {picker}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SetByEnv from './set_by_env';\n\nexport default class GeneratedSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            value: PropTypes.string.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool.isRequired,\n            setByEnv: PropTypes.bool.isRequired,\n            disabledText: PropTypes.node,\n            helpText: PropTypes.node.isRequired,\n            regenerateText: PropTypes.node,\n            regenerateHelpText: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            disabled: false,\n            regenerateText: (\n                <FormattedMessage\n                    id='admin.regenerate'\n                    defaultMessage='Regenerate'\n                />\n            ),\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.regenerate = this.regenerate.bind(this);\n    }\n\n    regenerate(e) {\n        e.preventDefault();\n\n        this.props.onChange(this.props.id, crypto.randomBytes(256).toString('base64').substring(0, 32));\n    }\n\n    render() {\n        let disabledText = null;\n        if (this.props.disabled && this.props.disabledText) {\n            disabledText = (\n                <div className='admin-console__disabled-text'>\n                    {this.props.disabledText}\n                </div>\n            );\n        }\n\n        let regenerateHelpText = null;\n        if (this.props.regenerateHelpText) {\n            regenerateHelpText = (\n                <div className='help-text'>\n                    {this.props.regenerateHelpText}\n                </div>\n            );\n        }\n\n        let text = this.props.value;\n        if (!text) {\n            text = (\n                <span className='placeholder-text'>{this.props.placeholder}</span>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={this.props.id}\n                >\n                    {this.props.label}\n                </label>\n                <div className='col-sm-8'>\n                    <div\n                        className='form-control disabled'\n                        id={this.props.id}\n                    >\n                        {text}\n                    </div>\n                    {disabledText}\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.regenerate}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        >\n                            {this.props.regenerateText}\n                        </button>\n                    </div>\n                    {regenerateHelpText}\n                    {this.props.setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport Setting from 'components/admin_console/setting.jsx';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nexport default class UserAutocompleteSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.string,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.userSuggestionProviders = [new GenericUserProvider()];\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    handleUserSelected = (user) => {\n        this.props.onChange(this.props.id, user.username);\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div\n                    className='admin-setting-user__dropdown'\n                >\n                    <SuggestionBox\n                        id={'admin_user_setting_' + this.props.id}\n                        className='form-control'\n                        placeholder={this.props.placeholder}\n                        value={this.props.value}\n                        onChange={this.handleChange}\n                        onItemSelected={this.handleUserSelected}\n                        listComponent={SuggestionList}\n                        listStyle='bottom'\n                        providers={this.userSuggestionProviders}\n                        disabled={this.props.disabled}\n                        requiredCharacters={0}\n                        openOnFocus={true}\n                    />\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class FileUploadSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            uploadingText: PropTypes.node,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            fileType: PropTypes.string.isRequired,\n            error: PropTypes.string,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fileName: null,\n            serverError: props.error,\n        };\n    }\n\n    handleChange = () => {\n        const files = this.refs.fileInput.files;\n        if (files && files.length > 0) {\n            this.setState({fileSelected: true, fileName: files[0].name});\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        $(this.refs.upload_button).button('loading');\n        this.props.onSubmit(this.props.id, this.refs.fileInput.files[0], (error) => {\n            $(this.refs.upload_button).button('reset');\n            if (error) {\n                Utils.clearFileInput(this.refs.fileInput);\n            }\n        });\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        } else {\n            fileName = (\n                <FormattedMessage\n                    id='admin.file_upload.noFile'\n                    defaultMessage='No file uploaded'\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='file__upload'>\n                        <button\n                            className='btn btn-default'\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.file_upload.chooseFile'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            disabled={this.props.disabled}\n                            accept={this.props.fileType}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        ref='upload_button'\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.uploadingText}`}\n                    >\n                        <FormattedMessage\n                            id='admin.file_upload.uploadFile'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    {serverError}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class RemoveFileSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            removeButtonText: PropTypes.node.isRequired,\n            removingText: PropTypes.node,\n            fileName: PropTypes.string.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    handleRemove = (e) => {\n        e.preventDefault();\n\n        $(this.refs.remove_button).button('loading');\n        this.props.onSubmit(this.props.id, () => {\n            $(this.refs.remove_button).button('reset');\n        });\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='help-text remove-filename'>\n                        {this.props.fileName}\n                    </div>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        ref='remove_button'\n                        disabled={this.props.disabled}\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.removingText}`}\n                    >\n                        {this.props.removeButtonText}\n                    </button>\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings.jsx';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting.jsx';\n\nconst PUSH_NOTIFICATIONS_OFF = 'off';\nconst PUSH_NOTIFICATIONS_MHPNS = 'mhpns';\nconst PUSH_NOTIFICATIONS_MTPNS = 'mtpns';\nconst PUSH_NOTIFICATIONS_CUSTOM = 'custom';\n\nexport default class PushSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.canSave = this.canSave.bind(this);\n        this.handleAgreeChange = this.handleAgreeChange.bind(this);\n        this.getConfigFromState = this.getConfigFromState.bind(this);\n        this.renderSettings = this.renderSettings.bind(this);\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n\n    canSave() {\n        return this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_MHPNS || this.state.agree;\n    }\n\n    handleAgreeChange(e) {\n        this.setState({\n            agree: e.target.checked,\n        });\n    }\n\n    handleDropdownChange(id, value) {\n        if (id === 'pushNotificationServerType') {\n            this.setState({\n                agree: false,\n            });\n\n            if (value === PUSH_NOTIFICATIONS_MHPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MHPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_MTPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MTPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_CUSTOM &&\n                (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS ||\n                this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS)) {\n                this.setState({\n                    pushNotificationServer: '',\n                });\n            }\n        }\n\n        this.handleChange(id, value);\n    }\n\n    getConfigFromState(config) {\n        config.EmailSettings.SendPushNotifications = this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_OFF;\n        config.EmailSettings.PushNotificationServer = this.state.pushNotificationServer.trim();\n        config.EmailSettings.PushNotificationContents = this.state.pushNotificationContents;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        let pushNotificationServerType = PUSH_NOTIFICATIONS_CUSTOM;\n        let agree = false;\n        if (!config.EmailSettings.SendPushNotifications) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_OFF;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MHPNS &&\n            this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MHPNS;\n            agree = true;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MTPNS) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MTPNS;\n        }\n\n        let pushNotificationServer = config.EmailSettings.PushNotificationServer;\n        if (pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushNotificationServer = Constants.MTPNS;\n        } else if (pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushNotificationServer = Constants.MHPNS;\n        }\n\n        return {\n            pushNotificationServerType,\n            pushNotificationServer,\n            pushNotificationContents: config.EmailSettings.PushNotificationContents,\n            agree,\n        };\n    }\n\n    isPushNotificationServerSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('EmailSettings.SendPushNotifications') ||\n            this.isSetByEnv('EmailSettings.PushNotificationServer');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.notifications.title'\n                defaultMessage='Notification Settings'\n            />\n        );\n    }\n\n    renderSettings() {\n        const pushNotificationServerTypes = [];\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_OFF, text: Utils.localizeMessage('admin.email.pushOff', 'Do not send push notifications')});\n        if (this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MHPNS, text: Utils.localizeMessage('admin.email.mhpns', 'Use encrypted, production-quality HPNS connection to iOS and Android apps')});\n        }\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MTPNS, text: Utils.localizeMessage('admin.email.mtpns', 'Use iOS and Android apps on iTunes and Google Play with TPNS')});\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_CUSTOM, text: Utils.localizeMessage('admin.email.selfPush', 'Manually enter Push Notification Service location')});\n\n        let sendHelpText = null;\n        let pushServerHelpText = null;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF) {\n            sendHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.pushOffHelp'\n                    defaultMessage='Please see [documentation on push notifications](!https://about.mattermost.com/default-mobile-push-notifications/) to learn more about setup options.'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mhpnsHelp'\n                    defaultMessage='Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Hosted Push Notification Service](!https://about.mattermost.com/default-hpns/).'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mtpnsHelp'\n                    defaultMessage='Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Test Push Notification Service](!https://about.mattermost.com/default-tpns/).'\n                />\n            );\n        } else {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.easHelp'\n                    defaultMessage='Learn more about compiling and deploying your own mobile apps from an [Enterprise App Store](!https://about.mattermost.com/default-enterprise-app-store).'\n                />\n            );\n        }\n\n        let tosCheckbox;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            tosCheckbox = (\n                <div className='form-group'>\n                    <div className='col-sm-4'/>\n                    <div className='col-sm-8'>\n                        <input\n                            type='checkbox'\n                            ref='agree'\n                            checked={this.state.agree}\n                            onChange={this.handleAgreeChange}\n                        />\n                        <FormattedMarkdownMessage\n                            id='admin.email.agreeHPNS'\n                            defaultMessage=' I understand and accept the Mattermost Hosted Push Notification Service [Terms of Service](!https://about.mattermost.com/hpns-terms/) and [Privacy Policy](!https://about.mattermost.com/hpns-privacy/).'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <SettingsGroup\n                header={\n                    <FormattedMessage\n                        id='admin.notifications.push'\n                        defaultMessage='Mobile Push'\n                    />\n                }\n            >\n                <DropdownSetting\n                    id='pushNotificationServerType'\n                    values={pushNotificationServerTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushTitle'\n                            defaultMessage='Enable Push Notifications: '\n                        />\n                    }\n                    value={this.state.pushNotificationServerType}\n                    onChange={this.handleDropdownChange}\n                    helpText={sendHelpText}\n                    setByEnv={this.isPushNotificationServerSetByEnv()}\n                />\n                {tosCheckbox}\n                <TextSetting\n                    id='pushNotificationServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushServerTitle'\n                            defaultMessage='Push Notification Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.pushServerEx', 'E.g.: \"http://push-test.mattermost.com\"')}\n                    helpText={pushServerHelpText}\n                    value={this.state.pushNotificationServer}\n                    onChange={this.handleChange}\n                    disabled={this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_CUSTOM}\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationServer')}\n                />\n                <DropdownSetting\n                    id='pushNotificationContents'\n                    values={[\n                        {value: 'generic_no_channel', text: Utils.localizeMessage('admin.email.genericNoChannelPushNotification', '\"Send generic description with only sender name')},\n                        {value: 'generic', text: Utils.localizeMessage('admin.email.genericPushNotification', 'Send generic description with sender and channel names')},\n                        {value: 'full', text: Utils.localizeMessage('admin.email.fullPushNotification', 'Send full message snippet')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushContentTitle'\n                            defaultMessage='Push Notification Contents:'\n                        />\n                    }\n                    value={this.state.pushNotificationContents}\n                    onChange={this.handleDropdownChange}\n                    disabled={this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.email.pushContentDesc'\n                            defaultMessage='\"Send generic description with only sender name\" includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\\n \\n\"Send generic description with sender and channel names\" includes the name of the person who sent the message and the channel it was sent in, but not the message text.\\n \\n\"Send full message snippet\" includes a message excerpt in push notifications, which may contain confidential information sent in messages. If your Push Notification Service is outside your firewall, it is *highly recommended* this option only be used with an \"https\" protocol to encrypt the connection.'\n                        />\n                    }\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationContents')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nexport default class DiscardChangesModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='discard_changes_modal.title'\n                defaultMessage='Discard Changes?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='discard_changes_modal.message'\n                defaultMessage='You have unsaved changes, are you sure you want to discard them?'\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button = (\n            <FormattedMessage\n                id='discard_changes_modal.leave'\n                defaultMessage='Yes, Discard'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPlugins} from 'mattermost-redux/actions/admin';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport AdminSidebar from './admin_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';\n    const siteName = config.SiteName;\n\n    return {\n        license,\n        config: state.entities.admin.config,\n        plugins: state.entities.admin.plugins,\n        buildEnterpriseReady,\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getPlugins,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {pure: false})(AdminSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport AdminSidebarCategory from 'components/admin_console/admin_sidebar_category.jsx';\nimport AdminSidebarHeader from 'components/admin_console/admin_sidebar_header.jsx';\nimport AdminSidebarSection from 'components/admin_console/admin_sidebar_section.jsx';\n\nexport default class AdminSidebar extends React.Component {\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        config: PropTypes.object,\n        plugins: PropTypes.object,\n        buildEnterpriseReady: PropTypes.bool,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get installed plugins\n             */\n            getPlugins: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        plugins: {},\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPlugins();\n        }\n\n        this.updateTitle();\n\n        if (!Utils.isMobile()) {\n            $('.admin-sidebar .nav-pills__container').perfectScrollbar({\n                suppressScrollX: true,\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        if (!Utils.isMobile()) {\n            $('.admin-sidebar .nav-pills__container').perfectScrollbar({\n                suppressScrollX: true,\n            });\n        }\n    }\n\n    updateTitle = () => {\n        let currentSiteName = '';\n        if (this.props.siteName) {\n            currentSiteName = ' - ' + this.props.siteName;\n        }\n\n        document.title = Utils.localizeMessage('sidebar_right_menu.console', 'System Console') + currentSiteName;\n    }\n\n    render() {\n        let oauthSettings = null;\n        let ldapSettings = null;\n        let samlSettings = null;\n        let clusterSettings = null;\n        let metricsSettings = null;\n        let complianceSettings = null;\n        let mfaSettings = null;\n        let messageExportSettings = null;\n        let complianceSection = null;\n\n        let license = null;\n        let audits = null;\n        let announcement = null;\n\n        if (this.props.buildEnterpriseReady) {\n            license = (\n                <AdminSidebarSection\n                    name='license'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.license'\n                            defaultMessage='Edition and License'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (this.props.license.IsLicensed === 'true') {\n            if (this.props.license.LDAP === 'true') {\n                ldapSettings = (\n                    <AdminSidebarSection\n                        name='ldap'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.ldap'\n                                defaultMessage='AD/LDAP'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Cluster === 'true') {\n                clusterSettings = (\n                    <AdminSidebarSection\n                        name='cluster'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.cluster'\n                                defaultMessage='High Availability'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Metrics === 'true') {\n                metricsSettings = (\n                    <AdminSidebarSection\n                        name='metrics'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.metrics'\n                                defaultMessage='Performance Monitoring'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.SAML === 'true') {\n                samlSettings = (\n                    <AdminSidebarSection\n                        name='saml'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.saml'\n                                defaultMessage='SAML 2.0'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.Compliance === 'true') {\n                complianceSettings = (\n                    <AdminSidebarSection\n                        name='compliance'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.compliance'\n                                defaultMessage='Compliance'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.MFA === 'true') {\n                mfaSettings = (\n                    <AdminSidebarSection\n                        name='mfa'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.mfa'\n                                defaultMessage='MFA'\n                            />\n                        }\n                    />\n                );\n            }\n\n            if (this.props.license.MessageExport === 'true') {\n                messageExportSettings = (\n                    <AdminSidebarSection\n                        name='message_export'\n                        title={\n                            <FormattedMessage\n                                id='admin.sidebar.compliance_export'\n                                defaultMessage='Compliance Export (Beta)'\n                            />\n                        }\n                    />\n                );\n            }\n\n            oauthSettings = (\n                <AdminSidebarSection\n                    name='oauth'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.oauth'\n                            defaultMessage='OAuth 2.0'\n                        />\n                    }\n                />\n            );\n            announcement = (\n                <AdminSidebarSection\n                    name='announcement'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.announcement'\n                            defaultMessage='Announcement Banner'\n                        />\n                    }\n                />\n            );\n        } else {\n            oauthSettings = (\n                <AdminSidebarSection\n                    name='gitlab'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.gitlab'\n                            defaultMessage='GitLab'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (this.props.license.IsLicensed === 'true') {\n            audits = (\n                <AdminSidebarSection\n                    name='audits'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.audits'\n                            defaultMessage='Complaince and Auditing'\n                        />\n                    }\n                />\n            );\n        }\n\n        let otherCategory = null;\n        if (license || audits) {\n            otherCategory = (\n                <AdminSidebarCategory\n                    parentLink='/admin_console'\n                    icon='fa-wrench'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.other'\n                            defaultMessage='OTHER'\n                        />\n                    }\n                >\n                    {license}\n                    {audits}\n                </AdminSidebarCategory>\n            );\n        }\n\n        const webrtcSettings = (\n            <AdminSidebarSection\n                name='webrtc'\n                title={\n                    <FormattedMessage\n                        id='admin.sidebar.webrtc'\n                        defaultMessage='WebRTC (Beta)'\n                    />\n                }\n            />\n        );\n\n        let elasticSearchSettings = null;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.Elasticsearch === 'true') {\n            elasticSearchSettings = (\n                <AdminSidebarSection\n                    name='elasticsearch'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.elasticsearch'\n                            defaultMessage='Elasticsearch'\n                        />\n                    }\n                />\n            );\n        }\n\n        let dataRetentionSettings = null;\n        if (this.props.license.IsLicensed === 'true' && this.props.license.DataRetention === 'true') {\n            dataRetentionSettings = (\n                <AdminSidebarSection\n                    name='data_retention'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.data_retention'\n                            defaultMessage='Data Retention Policy (Beta)'\n                        />\n                    }\n                />\n            );\n        }\n\n        const SHOW_CLIENT_VERSIONS = false;\n        let clientVersions = null;\n        if (SHOW_CLIENT_VERSIONS) {\n            clientVersions = (\n                <AdminSidebarSection\n                    name='client_versions'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.client_versions'\n                            defaultMessage='Client Versions'\n                        />\n                    }\n                />\n            );\n        }\n\n        if (dataRetentionSettings || messageExportSettings) {\n            complianceSection = (\n                <AdminSidebarSection\n                    name='compliance'\n                    type='text'\n                    title={\n                        <FormattedMessage\n                            id='admin.sidebar.compliance'\n                            defaultMessage='Compliance'\n                        />\n                    }\n                >\n                    {dataRetentionSettings}\n                    {messageExportSettings}\n                </AdminSidebarSection>\n            );\n        }\n\n        const customPlugins = [];\n        if (this.props.config.PluginSettings.Enable) {\n            Object.values(this.props.plugins).forEach((p) => {\n                if (!p.settings_schema || Object.keys(p.settings_schema) === 0) {\n                    return;\n                }\n\n                customPlugins.push(\n                    <AdminSidebarSection\n                        key={'customplugin' + p.id}\n                        name={'custom/' + p.id}\n                        title={p.name}\n                    />\n                );\n            });\n        }\n\n        return (\n            <div className='admin-sidebar'>\n                <AdminSidebarHeader/>\n                <div className='nav-pills__container'>\n                    <ul className='nav nav-pills nav-stacked'>\n                        <AdminSidebarCategory\n                            parentLink='/admin_console'\n                            icon='fa-bar-chart'\n                            title={\n                                <FormattedMessage\n                                    id='admin.sidebar.reports'\n                                    defaultMessage='REPORTING'\n                                />\n                            }\n                        >\n                            <AdminSidebarSection\n                                name='system_analytics'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.view_statistics'\n                                        defaultMessage='Site Statistics'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='team_analytics'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.statistics'\n                                        defaultMessage='Team Statistics'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='users'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.users'\n                                        defaultMessage='Users'\n                                    />\n                                }\n                            />\n                            <AdminSidebarSection\n                                name='logs'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.logs'\n                                        defaultMessage='Logs'\n                                    />\n                                }\n                            />\n                        </AdminSidebarCategory>\n                        <AdminSidebarCategory\n                            sectionClass='sections--settings'\n                            parentLink='/admin_console'\n                            icon='fa-gear'\n                            title={\n                                <FormattedMessage\n                                    id='admin.sidebar.settings'\n                                    defaultMessage='SETTINGS'\n                                />\n                            }\n                        >\n                            <AdminSidebarSection\n                                name='general'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.general'\n                                        defaultMessage='General'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='configuration'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.configuration'\n                                            defaultMessage='Configuration'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='localization'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.localization'\n                                            defaultMessage='Localization'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='users_and_teams'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.usersAndTeams'\n                                            defaultMessage='Users and Teams'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='privacy'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.privacy'\n                                            defaultMessage='Privacy'\n                                        />\n                                    }\n                                />\n                                {complianceSettings}\n                                <AdminSidebarSection\n                                    name='logging'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.logging'\n                                            defaultMessage='Logging'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            {this.props.license.IsLicensed === 'true' &&\n                                <AdminSidebarSection\n                                    name='permissions'\n                                    type='text'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.permissions'\n                                            defaultMessage='Advanced Permissions'\n                                        />\n                                    }\n                                >\n                                    {this.props.license.CustomPermissionsSchemes !== 'true' &&\n                                        <AdminSidebarSection\n                                            name='system-scheme'\n                                            title={\n                                                <FormattedMessage\n                                                    id='admin.sidebar.system-scheme'\n                                                    defaultMessage='System scheme'\n                                                />\n                                            }\n                                        />}\n                                    {this.props.license.CustomPermissionsSchemes === 'true' &&\n                                        <AdminSidebarSection\n                                            name='schemes'\n                                            title={\n                                                <FormattedMessage\n                                                    id='admin.sidebar.schemes'\n                                                    defaultMessage='Permission Schemes'\n                                                />\n                                            }\n                                        />}\n                                </AdminSidebarSection>}\n                            <AdminSidebarSection\n                                name='authentication'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.authentication'\n                                        defaultMessage='Authentication'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='authentication_email'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.email'\n                                            defaultMessage='Email'\n                                        />\n                                    }\n                                />\n                                {oauthSettings}\n                                {ldapSettings}\n                                {samlSettings}\n                                {mfaSettings}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='security'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.security'\n                                        defaultMessage='Security'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='sign_up'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.signUp'\n                                            defaultMessage='Sign Up'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='password'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.password'\n                                            defaultMessage='Password'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='public_links'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.publicLinks'\n                                            defaultMessage='Public Links'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='sessions'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.sessions'\n                                            defaultMessage='Sessions'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='connections'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.connections'\n                                            defaultMessage='Connections'\n                                        />\n                                    }\n                                />\n                                {clientVersions}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='notifications'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.notifications'\n                                        defaultMessage='Notifications'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='notifications_email'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.email'\n                                            defaultMessage='Email'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='push'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.push'\n                                            defaultMessage='Mobile Push'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='integrations'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.integrations'\n                                        defaultMessage='Integrations'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='custom'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.customIntegrations'\n                                            defaultMessage='Custom Integrations'\n                                        />\n                                    }\n                                />\n                                {webrtcSettings}\n                                <AdminSidebarSection\n                                    name='external'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.external'\n                                            defaultMessage='External Services'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='plugins'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.plugins'\n                                        defaultMessage='Plugins (Beta)'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='configuration'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.plugins.configuration'\n                                            defaultMessage='Configuration'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='management'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.plugins.management'\n                                            defaultMessage='Management'\n                                        />\n                                    }\n                                />\n                                {customPlugins}\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='files'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.files'\n                                        defaultMessage='Files'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    key='storage'\n                                    name='storage'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.storage'\n                                            defaultMessage='Storage'\n                                        />\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            <AdminSidebarSection\n                                name='customization'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.customization'\n                                        defaultMessage='Customization'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='custom_brand'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.customBrand'\n                                            defaultMessage='Custom Branding'\n                                        />\n                                    }\n                                />\n                                {announcement}\n                                <AdminSidebarSection\n                                    name='emoji'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.emoji'\n                                            defaultMessage='Emoji'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='gif'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.gif'\n                                            defaultMessage='GIF (Beta)'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='posts'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.posts'\n                                            defaultMessage='Posts'\n                                        />\n\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='legal_and_support'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.legalAndSupport'\n                                            defaultMessage='Legal and Support'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='native_app_links'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.nativeAppLinks'\n                                            defaultMessage='Mattermost App Links'\n                                        />\n\n                                    }\n                                />\n                            </AdminSidebarSection>\n                            {complianceSection}\n                            <AdminSidebarSection\n                                name='advanced'\n                                type='text'\n                                title={\n                                    <FormattedMessage\n                                        id='admin.sidebar.advanced'\n                                        defaultMessage='Advanced'\n                                    />\n                                }\n                            >\n                                <AdminSidebarSection\n                                    name='rate'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.rateLimiting'\n                                            defaultMessage='Rate Limiting'\n                                        />\n                                    }\n                                />\n                                <AdminSidebarSection\n                                    name='database'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.database'\n                                            defaultMessage='Database'\n                                        />\n                                    }\n                                />\n                                {elasticSearchSettings}\n                                <AdminSidebarSection\n                                    name='developer'\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.sidebar.developer'\n                                            defaultMessage='Developer'\n                                        />\n                                    }\n                                />\n                                {clusterSettings}\n                                {metricsSettings}\n                            </AdminSidebarSection>\n                        </AdminSidebarCategory>\n                        {otherCategory}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {NavLink, Route} from 'react-router-dom';\n\nexport default class AdminSidebarCategory extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string,\n            title: PropTypes.node.isRequired,\n            icon: PropTypes.string.isRequired,\n            sectionClass: PropTypes.string,\n            parentLink: PropTypes.string,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n        };\n    }\n\n    static get contextTypes() {\n        return {\n            router: PropTypes.object.isRequired,\n        };\n    }\n\n    render() {\n        let link = this.props.parentLink;\n        let title = (\n            <div className='category-title category-title--active'>\n                <i className={'category-icon fa ' + this.props.icon}/>\n                <span className='category-title__text'>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </div>\n        );\n\n        if (this.props.name) {\n            link += '/' + name;\n            title = (\n                <NavLink\n                    to={link}\n                    className='category-title'\n                    activeClassName='category-title category-title--active'\n                >\n                    {title}\n                </NavLink>\n            );\n        }\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <Route\n                    path={link}\n                    render={() => (\n                        <ul className={'sections ' + this.props.sectionClass}>\n                            {\n                                React.Children.map(this.props.children, (child) => {\n                                    if (child === null) {\n                                        return null;\n                                    }\n\n                                    return React.cloneElement(child, {\n                                        parentLink: link,\n                                    });\n                                })\n                            }\n                        </ul>\n                    )}\n                />\n            );\n        }\n\n        return (\n            <li className='sidebar-category'>\n                {title}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport UserStore from 'stores/user_store.jsx';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown';\n\nexport default class SidebarHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    toggleDropdown = (e) => {\n        e.preventDefault();\n\n        if (this.refs.dropdown.blockToggle) {\n            this.refs.dropdown.blockToggle = false;\n            return;\n        }\n\n        $('.team__header').find('.dropdown-toggle').dropdown('toggle');\n    }\n\n    render() {\n        var me = UserStore.getCurrentUser();\n        var profilePicture = null;\n\n        if (!me) {\n            return null;\n        }\n\n        if (me.last_picture_update) {\n            profilePicture = (\n                <img\n                    className='user__picture'\n                    src={Client4.getProfilePictureUrl(me.id, me.last_picture_update)}\n                />\n            );\n        }\n\n        return (\n            <div className='team__header theme'>\n                <a\n                    href='#'\n                    onClick={this.toggleDropdown}\n                >\n                    {profilePicture}\n                    <div className='header__info'>\n                        <div className='team__name'>\n                            <FormattedMessage\n                                id='admin.sidebarHeader.systemConsole'\n                                defaultMessage='System Console'\n                            />\n                        </div>\n                        <div className='user__name'>{'@' + me.username}</div>\n                    </div>\n                </a>\n                <AdminNavbarDropdown ref='dropdown'/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        navigationBlocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport TeamStore from 'stores/team_store.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport AboutBuildModal from 'components/about_build_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport MenuIcon from 'components/svg/menu_icon';\n\nexport default class AdminNavbarDropdown extends React.Component {\n    static propTypes = {\n\n        /*\n         * Bool whether the navigation is blocked by unsaved changes\n         */\n        navigationBlocked: PropTypes.bool,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Action to attempt a navigation and set a callback\n             * to execute after the navigation is confirmed\n             */\n            deferNavigation: PropTypes.func,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teams: TeamStore.getAll(),\n            teamMembers: TeamStore.getMyTeamMembers(),\n            showAboutModal: false,\n        };\n    }\n\n    componentDidMount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).on('hide.bs.dropdown', () => {\n            this.blockToggle = true;\n            setTimeout(() => {\n                this.blockToggle = false;\n            }, 100);\n        });\n\n        TeamStore.addChangeListener(this.onTeamChange);\n    }\n\n    componentWillUnmount() {\n        $(ReactDOM.findDOMNode(this.refs.dropdown)).off('hide.bs.dropdown');\n        TeamStore.removeChangeListener(this.onTeamChange);\n    }\n\n    handleAboutModal = (e) => {\n        e.preventDefault();\n\n        this.setState({showAboutModal: true});\n    };\n\n    handleLogout = (e) => {\n        if (this.props.navigationBlocked) {\n            e.preventDefault();\n            this.props.actions.deferNavigation(GlobalActions.emitUserLoggedOutEvent);\n        } else {\n            GlobalActions.emitUserLoggedOutEvent();\n        }\n    };\n\n    aboutModalDismissed = () => {\n        this.setState({showAboutModal: false});\n    };\n\n    onTeamChange = () => {\n        this.setState({\n            teams: TeamStore.getAll(),\n            teamMembers: TeamStore.getMyTeamMembers(),\n        });\n    };\n\n    render() {\n        var teamsArray = []; // Array of team objects\n        var teams = []; // Array of team components\n        let switchTeams;\n\n        if (this.state.teamMembers && this.state.teamMembers.length > 0) {\n            for (const index in this.state.teamMembers) {\n                if (this.state.teamMembers.hasOwnProperty(index)) {\n                    const teamMember = this.state.teamMembers[index];\n                    const team = this.state.teams[teamMember.team_id];\n                    teamsArray.push(team);\n                }\n            }\n\n            teamsArray = filterAndSortTeamsByDisplayName(teamsArray);\n\n            for (const team of teamsArray) {\n                teams.push(\n                    <li key={'team_' + team.name}>\n                        <BlockableLink\n                            id={'swithTo' + Utils.createSafeId(team.name)}\n                            to={'/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`}\n                        >\n                            <FormattedMessage\n                                id='navbar_dropdown.switchTo'\n                                defaultMessage='Switch to '\n                            />\n                            {team.display_name}\n                        </BlockableLink>\n                    </li>\n                );\n            }\n\n            teams.push(\n                <li\n                    key='teamDiv'\n                    className='divider'\n                />\n            );\n        } else {\n            switchTeams = (\n                <li>\n                    <BlockableLink\n                        to={'/select_team'}\n                    >\n                        <i\n                            className='fa fa-exchange'\n                            title={Utils.localizeMessage('select_team.icon', 'Select Team Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.nav.switch'\n                            defaultMessage='Team Selection'\n                        />\n                    </BlockableLink>\n                </li>\n            );\n        }\n\n        return (\n            <ul className='nav navbar-nav navbar-right admin-navbar-dropdown'>\n                <li\n                    ref='dropdown'\n                    className='dropdown'\n                >\n                    <a\n                        href='#'\n                        id='adminNavbarDropdownButton'\n                        className='dropdown-toggle admin-navbar-dropdown__toggle'\n                        data-toggle='dropdown'\n                        role='button'\n                        aria-expanded='false'\n                    >\n                        <MenuIcon className='dropdown__icon admin-navbar-dropdown__icon'/>\n                    </a>\n                    <ul\n                        className='dropdown-menu'\n                        role='menu'\n                    >\n                        {teams}\n                        {switchTeams}\n                        <li\n                            key='teamDiv'\n                            className='divider'\n                        />\n                        <li>\n                            <a\n                                href='https://about.mattermost.com/administrators-guide/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.administratorsGuide'\n                                    defaultMessage='Administrator Guide'\n                                />\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href='https://about.mattermost.com/troubleshooting-forum/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.troubleshootingForum'\n                                    defaultMessage='Troubleshooting Forum'\n                                />\n                            </a>\n                        </li>\n                        <li>\n                            <a\n                                href='https://about.mattermost.com/commercial-support/'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.commercialSupport'\n                                    defaultMessage='Commercial Support'\n                                />\n                            </a>\n                        </li>\n                        <li>\n                            <button\n                                className='style--none'\n                                onClick={this.handleAboutModal}\n                            >\n                                <FormattedMessage\n                                    id='navbar_dropdown.about'\n                                    defaultMessage='About Mattermost'\n                                />\n                            </button>\n                        </li>\n                        <li className='divider'/>\n                        <li>\n                            <button\n                                className='style--none'\n                                id='logout'\n                                onClick={this.handleLogout}\n                            >\n                                <FormattedMessage\n                                    id='admin.nav.logout'\n                                    defaultMessage='Logout'\n                                />\n                            </button>\n                        </li>\n                        <AboutBuildModal\n                            show={this.state.showAboutModal}\n                            onModalDismissed={this.aboutModalDismissed}\n                        />\n                    </ul>\n                </li>\n            </ul>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {NavLink} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\n\nexport default class BlockableLink extends React.Component {\n    static propTypes = {\n\n        /*\n         * Bool whether navigation is blocked\n         */\n        blocked: PropTypes.bool.isRequired,\n\n        /*\n         * String Link destination\n         */\n        to: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function for deferring navigation while blocked\n             */\n            deferNavigation: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = (e) => {\n        if (this.props.blocked) {\n            e.preventDefault();\n\n            this.props.actions.deferNavigation(() => {\n                browserHistory.push(this.props.to);\n            });\n        }\n    };\n\n    render() {\n        const props = {...this.props};\n        Reflect.deleteProperty(props, 'blocked');\n        Reflect.deleteProperty(props, 'actions');\n\n        return (\n            <NavLink\n                {...props}\n                onClick={this.handleClick}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class AdminSidebarSection extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            type: PropTypes.string,\n            parentLink: PropTypes.string,\n            subsection: PropTypes.bool,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            subsection: false,\n            children: [],\n        };\n    }\n\n    getLink() {\n        return this.props.parentLink + '/' + this.props.name;\n    }\n\n    render() {\n        const link = this.getLink();\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <ul className='nav nav__sub-menu subsections'>\n                    {\n                        React.Children.map(this.props.children, (child) => {\n                            if (child === null) {\n                                return null;\n                            }\n\n                            return React.cloneElement(child, {\n                                parentLink: link,\n                                subsection: true,\n                            });\n                        })\n                    }\n                </ul>\n            );\n        }\n\n        let className = 'sidebar-section';\n        if (this.props.subsection) {\n            className += ' sidebar-subsection';\n        }\n\n        let sidebarItem = (\n            <BlockableLink\n                id={Utils.createSafeId(this.props.name)}\n                className={`${className}-title`}\n                activeClassName={`${className}-title ${className}-title--active`}\n                to={link}\n            >\n                <span className={`${className}-title__text`}>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </BlockableLink>\n        );\n\n        if (this.props.type === 'text') {\n            sidebarItem = (\n                <div\n                    className={`${className}-title`}\n                >\n                    <span className={`${className}-title__text`}>\n                        {this.props.title}\n                    </span>\n                    {this.props.action}\n                </div>\n            );\n        }\n\n        return (\n            <li className={className}>\n                {sidebarItem}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\nimport {t} from 'utils/i18n';\nimport {\n    ldapTest, invalidateAllCaches, reloadConfig, testS3Connection,\n    removeIdpSamlCertificate, uploadIdpSamlCertificate,\n    removePrivateSamlCertificate, uploadPrivateSamlCertificate,\n    removePublicSamlCertificate, uploadPublicSamlCertificate,\n} from 'actions/admin_actions';\nimport SystemAnalytics from 'components/analytics/system_analytics';\nimport TeamAnalytics from 'components/analytics/team_analytics';\nimport PluginManagement from 'components/admin_console/plugin_management';\nimport CustomPluginSettings from 'components/admin_console/custom_plugin_settings';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport Audits from './audits';\nimport CustomUrlSchemesSetting from './custom_url_schemes_setting.jsx';\nimport LicenseSettings from './license_settings';\nimport PermissionSchemesSettings from './permission_schemes_settings';\nimport PermissionSystemSchemeSettings from './permission_schemes_settings/permission_system_scheme_settings';\nimport PermissionTeamSchemeSettings from './permission_schemes_settings/permission_team_scheme_settings';\nimport SystemUsers from './system_users';\nimport ServerLogs from './server_logs';\nimport BrandImageSetting from './brand_image_setting/brand_image_setting.jsx';\n\nimport * as DefinitionConstants from './admin_definition_constants';\n\nconst FILE_STORAGE_DRIVER_LOCAL = 'local';\nconst FILE_STORAGE_DRIVER_S3 = 'amazons3';\nconst MEBIBYTE = Math.pow(1024, 2);\nconst MINIMUM_IDLE_TIMEOUT = 5;\n\n// admin_definitions data structure define the autogenerated admin_console\n// section. It defines the structure of the menu based on sections, subsections\n// and pages. Each page contains an schema which defines a component to use for\n// render the entire section or the name of the section (name and\n// name_default), the section in the config file (id), and a list of options to\n// configure (settings).\n//\n// All text fiels contains a transation key, and the <field>_default string are the\n// default text when the translation is still not avaiable (the english version\n// of the text).\n//\n// We can define different types of settings configuration widgets:\n//\n// Widget:\n//   - type: which define the widget type.\n//   - label (and label_default): which define the main text of the setting.\n//   - isDisabled: a function which receive current config, the state of the page and the license.\n//   - isHidden: a function which receive current config, the state of the page and the license.\n//\n// Custom Widget (extends from Widget):\n//   - component: The component used to render the widget\n//\n// JobsTable Widget (extends from Widget):\n//   - job_type: The kind of job from Constants.JobTypes\n//   - render_job: Function to convert a job object into a react component.\n//\n// Banner Widget (extends from Widget):\n//   - banner_type: The type of banner (options: info or warning)\n//\n// Setting Widget (extends from Widget):\n//   - key: The key to store the configuration in the config file.\n//   - help_text (and help_text_default): Long description of the field.\n//   - help_text_markdown: True if the translation text contains markdown.\n//   - help_text_values: Values to fill the translation (if needed).\n//\n// Bool Widget (extends from Setting Widget)\n//\n// Number Widget (extends from Setting Widget)\n//\n// Color Widget (extends from Setting Widget)\n//\n// Text Widget (extends from Setting Widget)\n//   - placeholder (and placeholder_default): Placeholder text to show in the input.\n//   - dynamic_value: function that generate the value of the field based on the current value, the config, the state and the license.\n//   - default_value: function that generate the default value of the field based on the config, the state and the license.\n//   - max_length: The maximun length allowed\n//\n// Button Widget (extends from Setting Widget)\n//   - action: A redux action to execute on click.\n//   - error_message (and error_message_default): Error to show if action doesn't work.\n//   - success_message (and success_message_default): Success message to show if action doesn't work.\n//\n// Language Widget (extends from Setting Widget)\n//   - multiple: If you can select multiple languages.\n//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).\n//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).\n//\n// Dropdown Widget (extends from Setting Widget)\n//   - options: List of options of the dropdown (each options has value, display_name, display_name_default and optionally help_text, help_text_default, help_text_values, help_text_markdown fields).\n//\n// Permissions Flag (extends from Setting Widget)\n//   - permissions_mapping_name: A permission name in the utils/policy_roles_adapter.js file.\n//\n// FileUpload (extends from Setting Widget)\n//   - remove_help_text (and remove_help_text_default):  Long description of the field when a file is uploaded.\n//   - remove_help_text_markdown: True if the translation text contains markdown.\n//   - remove_help_text_values: Values to fill the translation (if needed).\n//   - remove_button_text (and remove_button_text_default): Button text for remove when the file is uploaded.\n//   - removing_text (and removing_text_default): Text shown while the system is removing the file.\n//   - uploading_text (and uploading_text_default): Text shown while the system is uploading the file.\n//   - upload_action: An store action to upload the file.\n//   - remove_action: An store action to remove the file.\n//   - fileType: A list of extensions separated by \",\". E.g. \".jpg,.png,.gif\".\n\nexport const needsUtils = {\n    not: (func) => (config, state, license) => !func(config, state, license),\n    and: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (!func(config, state, license)) {\n                return false;\n            }\n        }\n        return true;\n    },\n    or: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (func(config, state, license)) {\n                return true;\n            }\n        }\n        return false;\n    },\n    stateValueMatch: (key, regex) => (config, state) => state[key].match(regex),\n    stateValueEqual: (key, value) => (config, state) => state[key] === value,\n    stateValueTrue: (key) => (config, state) => Boolean(state[key]),\n    stateValueFalse: (key) => (config, state) => !state[key],\n    hasLicense: (config, state, license) => license.IsLicensed === 'true',\n    hasLicenseFeature: (feature) => (config, state, license) => license.IsLicensed && license[feature] === 'true',\n};\n\nexport default {\n    reporting: {\n        system_analytics: {\n            schema: {\n                id: 'SystemAnalytics',\n                component: SystemAnalytics,\n            },\n        },\n        team_analytics: {\n            schema: {\n                id: 'TeamAnalytics',\n                component: TeamAnalytics,\n            },\n        },\n        system_users: {\n            schema: {\n                id: 'SystemUsers',\n                component: SystemUsers,\n            },\n        },\n        server_logs: {\n            schema: {\n                id: 'ServerLogs',\n                component: ServerLogs,\n            },\n        },\n    },\n    settings: {\n        general: {\n            configuration: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.general.configuration'),\n                    name_default: 'Configuration',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.rate.noteDescription'),\n                            label_default: 'Changing properties in this section will require a server restart before taking effect.',\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.SiteURL',\n                            label: t('admin.service.siteURL'),\n                            label_default: 'Site URL:',\n                            help_text: t('admin.service.siteURLDescription'),\n                            help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.\\n \\nMattermost may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',\n                            help_text_markdown: true,\n                            placeholder: t('admin.service.siteURLExample'),\n                            placeholder_default: 'E.g.: \"http://example.com:8065\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ListenAddress',\n                            label: t('admin.service.listenAddress'),\n                            label_default: 'Listen Address:',\n                            placeholder: t('admin.service.listenExample'),\n                            placeholder_default: 'E.g.: \":8065\"',\n                            help_text: t('admin.service.listenDescription'),\n                            help_text_default: 'The address and port to which to bind and listen. Specifying \":8065\" will bind to all network interfaces. Specifying \"127.0.0.1:8065\" will only bind to the network interface having that IP address. If you choose a port of a lower level (called \"system ports\" or \"well-known ports\", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: \"sudo setcap cap_net_bind_service=+ep ./bin/mattermost\" to allow Mattermost to bind to well-known ports.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.Forward80To443',\n                            label: t('admin.service.forward80To443'),\n                            label_default: 'Forward port 80 to 443:',\n                            help_text: t('admin.service.forward80To443Description'),\n                            help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',\n                            disabled_help_text: t('admin.service.forward80To443Description.disabled'),\n                            disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.\\n \\nThis setting cannot be enabled until your server is [listening](#ListenAddress) on port 443.',\n                            disabled_help_text_markdown: true,\n                            isDisabled: needsUtils.not(needsUtils.stateValueMatch('ServiceSettings.ListenAddress', /:443$/)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.ConnectionSecurity',\n                            label: t('admin.connectionSecurityTitle'),\n                            label_default: 'Connection Security:',\n                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: t('admin.connectionSecurityNone'),\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'TLS',\n                                    display_name: t('admin.connectionSecurityTls'),\n                                    display_name_default: 'TLS (Recommended)',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.TLSCertFile',\n                            label: t('admin.service.tlsCertFile'),\n                            label_default: 'TLS Certificate File:',\n                            help_text: t('admin.service.tlsCertFileDescription'),\n                            help_text_default: 'The certificate file to use.',\n                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.TLSKeyFile',\n                            label: t('admin.service.tlsKeyFile'),\n                            label_default: 'TLS Key File:',\n                            help_text: t('admin.service.tlsKeyFileDescription'),\n                            help_text_default: 'The private key file to use.',\n                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.UseLetsEncrypt',\n                            label: t('admin.service.useLetsEncrypt'),\n                            label_default: 'Use Let\\'s Encrypt:',\n                            help_text: t('admin.service.useLetsEncryptDescription'),\n                            help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',\n                            disabled_help_text: t('admin.service.useLetsEncryptDescription.disabled'),\n                            disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.\\n \\nThis setting cannot be enabled unless the [Forward port 80 to 443](#Forward80To443) setting is set to true.',\n                            disabled_help_text_markdown: true,\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.Forward80To443'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.LetsEncryptCertificateCacheFile',\n                            label: t('admin.service.letsEncryptCertificateCacheFile'),\n                            label_default: 'Let\\'s Encrypt Certificate Cache File:',\n                            help_text: t('admin.service.letsEncryptCertificateCacheFileDescription'),\n                            help_text_default: 'Certificates retrieved and other data about the Let\\'s Encrypt service will be stored in this file.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.UseLetsEncrypt'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.ReadTimeout',\n                            label: t('admin.service.readTimeout'),\n                            label_default: 'Read Timeout:',\n                            help_text: t('admin.service.readTimeoutDescription'),\n                            help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.WriteTimeout',\n                            label: t('admin.service.writeTimeout'),\n                            label_default: 'Write Timeout:',\n                            help_text: t('admin.service.writeTimeoutDescription'),\n                            help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.WebserverMode',\n                            label: t('admin.webserverModeTitle'),\n                            label_default: 'Webserver Mode:',\n                            help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,\n                            options: [\n                                {\n                                    value: 'gzip',\n                                    display_name: t('admin.webserverModeGzip'),\n                                    display_name_default: 'gzip',\n                                },\n                                {\n                                    value: 'uncompressed',\n                                    display_name: t('admin.webserverModeUncompressed'),\n                                    display_name_default: 'Uncompressed',\n                                },\n                                {\n                                    value: 'disabled',\n                                    display_name: t('admin.webserverModeDisabled'),\n                                    display_name_default: 'Disabled',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: reloadConfig,\n                            key: 'ReloadConfigButton',\n                            label: t('admin.reload.button'),\n                            label_default: 'Reload Configuration From Disk',\n                            help_text: t('admin.reload.reloadDescription'),\n                            help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',\n                            help_text_values: {\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.reload.reloadDescription.featureName'\n                                            defaultMessage='Reload Configuration from Disk'\n                                        />\n                                    </b>\n                                ),\n                                recycleDatabaseConnections: (\n                                    <a href='../advanced/database'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.reload.reloadDescription.recycleDatabaseConnections'\n                                                defaultMessage='Database > Recycle Database Connections'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            },\n                            error_message: t('admin.reload.reloadFail'),\n                            error_message_default: 'Reload unsuccessful: {error}',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            key: 'PurgeButton',\n                            action: invalidateAllCaches,\n                            label: t('admin.purge.button'),\n                            label_default: 'Purge All Caches',\n                            help_text: t('admin.purge.purgeDescription'),\n                            help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',\n                            error_message: t('admin.purge.purgeFail'),\n                            error_message_default: 'Purging unsuccessful: {error}',\n                        },\n                    ],\n                },\n            },\n            localization: {\n                schema: {\n                    id: 'LocalizationSettings',\n                    name: t('admin.general.localization'),\n                    name_default: 'Localization',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.DefaultServerLocale',\n                            label: t('admin.general.localization.serverLocaleTitle'),\n                            label_default: 'Default Server Language:',\n                            help_text: t('admin.general.localization.serverLocaleDescription'),\n                            help_text_default: 'Default language for system messages. Changing this will require a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.DefaultClientLocale',\n                            label: t('admin.general.localization.clientLocaleTitle'),\n                            label_default: 'Default Client Language:',\n                            help_text: t('admin.general.localization.clientLocaleDescription'),\n                            help_text_default: 'Default language for newly created users and pages where the user hasn\\'t logged in.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                            key: 'LocalizationSettings.AvailableLocales',\n                            label: t('admin.general.localization.availableLocalesTitle'),\n                            label_default: 'Available Languages:',\n                            help_text: t('admin.general.localization.availableLocalesDescription'),\n                            help_text_markdown: true,\n                            help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\\'re manually adding new languages, the **Default Client Language** must be added before saving this setting.\\n \\nWould like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.',\n                            multiple: true,\n                            no_result: t('admin.general.localization.availableLocalesNoResults'),\n                            no_result_default: 'No results found',\n                            not_present: t('admin.general.localization.availableLocalesNotPresent'),\n                            not_present_default: 'The default client language must be included in the available list',\n                        },\n                    ],\n                },\n            },\n            users_and_teams: {\n                schema: {\n                    id: 'UserAndTeamsSettings',\n                    name: t('admin.general.usersAndTeams'),\n                    name_default: 'Users and Teams',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableUserCreation',\n                            label: t('admin.team.userCreationTitle'),\n                            label_default: 'Enable Account Creation: ',\n                            help_text: t('admin.team.userCreationDescription'),\n                            help_text_default: 'When false, the ability to create accounts is disabled. The create account button displays error when pressed.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_PERMISSION,\n                            key: 'TeamSettings.EnableTeamCreation',\n                            label: t('admin.team.teamCreationTitle'),\n                            label_default: 'Enable Team Creation: ',\n                            help_text: t('admin.team.teamCreationDescription'),\n                            help_text_default: 'When false, only System Administrators can create teams.',\n                            permissions_mapping_name: 'enableTeamCreation',\n                            isHidden: needsUtils.hasLicense,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'TeamSettings.MaxUsersPerTeam',\n                            label: t('admin.team.maxUsersTitle'),\n                            label_default: 'Max Users Per Team:',\n                            help_text: t('admin.team.maxUsersDescription'),\n                            help_text_default: 'Maximum total number of users per team, including both active and inactive users.',\n                            placeholder: t('admin.team.maxUsersExample'),\n                            placeholder_default: 'E.g.: \"25\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'TeamSettings.MaxChannelsPerTeam',\n                            label: t('admin.team.maxChannelsTitle'),\n                            label_default: 'Max Channels Per Team:',\n                            help_text: t('admin.team.maxChannelsDescription'),\n                            help_text_default: 'Maximum total number of channels per team, including both active and archived channels.',\n                            placeholder: t('admin.team.maxChannelsExample'),\n                            placeholder_default: 'E.g.: \"100\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'TeamSettings.MaxNotificationsPerChannel',\n                            label: t('admin.team.maxNotificationsPerChannelTitle'),\n                            label_default: 'Max Notifications Per Channel:',\n                            help_text: t('admin.team.maxNotificationsPerChannelDescription'),\n                            help_text_default: 'Maximum total number of users in a channel before users typing messages, @all, @here, and @channel no longer send notifications because of performance.',\n                            placeholder: t('admin.team.maxNotificationsPerChannelExample'),\n                            placeholder_default: 'E.g.: \"1000\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableConfirmNotificationsToChannel',\n                            label: t('admin.team.enableConfirmNotificationsToChannelTitle'),\n                            label_default: 'Show @channel and @all confirmation dialog: ',\n                            help_text: t('admin.team.enableConfirmNotificationsToChannelDescription'),\n                            help_text_default: 'When true, users will be prompted to confirm when posting @channel and @all in channels with over five members. When false, no confirmation is required.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'TeamSettings.RestrictCreationToDomains',\n                            label: t('admin.team.restrictTitle'),\n                            label_default: 'Restrict account creation to specified email domains:',\n                            help_text: t('admin.team.restrictDescription'),\n                            help_text_default: 'Teams and user accounts can only be created from a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\").',\n                            placeholder: t('admin.team.restrictExample'),\n                            placeholder_default: 'E.g.: \"corp.mattermost.com, mattermost.org\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'TeamSettings.RestrictDirectMessage',\n                            label: t('admin.team.restrictDirectMessage'),\n                            label_default: 'Enable users to open Direct Message channels with:',\n                            help_text: t('admin.team.restrictDirectMessageDesc'),\n                            help_text_default: '\"Any user on the Mattermost server\" enables users to open a Direct Message channel with any user on the server, even if they are not on any teams together. \"Any member of the team\" limits the ability in the Direct Messages \"More\" menu to only open Direct Message channels with users who are in the same team.\\n \\nNote: This setting only affects the UI, not permissions on the server.',\n                            options: [\n                                {\n                                    value: 'any',\n                                    display_name: t('admin.team.restrict_direct_message_any'),\n                                    display_name_default: 'Any user on the Mattermost server',\n                                },\n                                {\n                                    value: 'team',\n                                    display_name: t('admin.team.restrict_direct_message_team'),\n                                    display_name_default: 'Any member of the team',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'TeamSettings.TeammateNameDisplay',\n                            label: t('admin.team.teammateNameDisplay'),\n                            label_default: 'Teammate Name Display:',\n                            help_text: t('admin.team.teammateNameDisplayDesc'),\n                            help_text_default: 'Set how to display users\\' names in posts and the Direct Messages list.',\n                            options: [\n                                {\n                                    value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                                    display_name: t('admin.team.showUsername'),\n                                    display_name_default: 'Show username (default)',\n                                },\n                                {\n                                    value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                                    display_name: t('admin.team.showNickname'),\n                                    display_name_default: 'Show nickname if one exists, otherwise show first and last name',\n                                },\n                                {\n                                    value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                                    display_name: t('admin.team.showFullname'),\n                                    display_name_default: 'Show first and last name',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_PERMISSION,\n                            key: 'TeamSettings.EditOthersPosts',\n                            label: t('admin.team.editOthersPostsTitle'),\n                            label_default: 'Allow Team Administrators to edit others posts:',\n                            help_text: t('admin.team.editOthersPostsDesc'),\n                            help_text_default: 'When true, Team Administrators and System Administrators can edit other user\\'s posts.  When false, only System Administrators can edit other user\\'s posts.',\n                            permissions_mapping_name: 'editOthersPosts',\n                            isHidden: needsUtils.hasLicense,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.ExperimentalViewArchivedChannels',\n                            label: t('admin.viewArchivedChannelsTitle'),\n                            label_default: 'Allow users to view archived channels: ',\n                            help_text: t('admin.viewArchivedChannelsHelpText'),\n                            help_text_default: '(Experimental) When true, allows users to share permalinks and search for content of channels that have been archived. Users can only view the content in channels of which they were a member before the channel was archived.',\n                        },\n                    ],\n                },\n            },\n            privacy: {\n                schema: {\n                    id: 'PrivacySettings',\n                    name: t('admin.general.privacy'),\n                    name_default: 'Privacy',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PrivacySettings.ShowEmailAddress',\n                            label: t('admin.privacy.showEmailTitle'),\n                            label_default: 'Show Email Address:',\n                            help_text: t('admin.privacy.showEmailDescription'),\n                            help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PrivacySettings.ShowFullName',\n                            label: t('admin.privacy.showFullNameTitle'),\n                            label_default: 'Show Full Name:',\n                            help_text: t('admin.privacy.showFullNameDescription'),\n                            help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',\n                        },\n                    ],\n                },\n            },\n            compliance: {\n                schema: {\n                    id: 'ComplianceSettings',\n                    name: t('admin.compliance.title'),\n                    name_default: 'Compliance Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.compliance.newComplianceExportBanner'),\n                            label_markdown: true,\n                            label_default: 'This feature is replaced by a new [Compliance Export]({siteURL}/admin_console/compliance/message_export) feature, and will be removed in a future release. We recommend migrating to the new system.',\n                            label_values: {siteURL: getSiteURL()},\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ComplianceSettings.Enable',\n                            label: t('admin.compliance.enableTitle'),\n                            label_default: 'Enable Compliance Reporting:',\n                            help_text: t('admin.compliance.enableDesc'),\n                            help_text_default: 'When true, Mattermost allows compliance reporting from the **Compliance and Auditing** tab. See [documentation](!https://docs.mattermost.com/administration/compliance.html) to learn more.',\n                            help_text_markdown: true,\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ComplianceSettings.Directory',\n                            label: t('admin.compliance.directoryTitle'),\n                            label_default: 'Compliance Report Directory:',\n                            help_text: t('admin.compliance.directoryDescription'),\n                            help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',\n                            placeholder: t('admin.compliance.directoryExample'),\n                            placeholder_default: 'E.g.: \"./data/\"',\n                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ComplianceSettings.EnableDaily',\n                            label: t('admin.compliance.enableDailyTitle'),\n                            label_default: 'Enable Daily Report:',\n                            help_text: t('admin.compliance.enableDailyDesc'),\n                            help_text_default: 'When true, Mattermost will generate a daily compliance report.',\n                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                    ],\n                },\n            },\n            logging: {\n                schema: {\n                    id: 'LogSettings',\n                    name: t('admin.general.log'),\n                    name_default: 'Logging',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableConsole',\n                            label: t('admin.log.consoleTitle'),\n                            label_default: 'Output logs to console: ',\n                            help_text: t('admin.log.consoleDescription'),\n                            help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LogSettings.ConsoleLevel',\n                            label: t('admin.log.levelTitle'),\n                            label_default: 'Console Log Level:',\n                            help_text: t('admin.log.levelDescription'),\n                            help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.ConsoleJson',\n                            label: t('admin.log.consoleJsonTitle'),\n                            label_default: 'Output console logs as JSON:',\n                            help_text: t('admin.log.jsonDescription'),\n                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableFile',\n                            label: t('admin.log.fileTitle'),\n                            label_default: 'Output logs to file: ',\n                            help_text: t('admin.log.fileDescription'),\n                            help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LogSettings.FileLevel',\n                            label: t('admin.log.fileLevelTitle'),\n                            label_default: 'File Log Level:',\n                            help_text: t('admin.log.fileLevelDescription'),\n                            help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.FileJson',\n                            label: t('admin.log.fileJsonTitle'),\n                            label_default: 'Output file logs as JSON:',\n                            help_text: t('admin.log.jsonDescription'),\n                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LogSettings.FileLocation',\n                            label: t('admin.log.locationTitle'),\n                            label_default: 'File Log Directory:',\n                            help_text: t('admin.log.locationDescription'),\n                            help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it. Changing this setting requires a server restart before taking effect.',\n                            placeholder: t('admin.log.locationPlaceholder'),\n                            placeholder_default: 'Enter your file location',\n                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableWebhookDebugging',\n                            label: t('admin.log.enableWebhookDebugging'),\n                            label_default: 'Enable Webhook Debugging:',\n                            help_text: t('admin.log.enableWebhookDebuggingDescription'),\n                            help_text_default: 'When true, sends webhook debug messages to the server logs. To also output the request body of incoming webhooks, set {boldedLogLevel} to \"DEBUG\".',\n                            help_text_values: {\n                                boldedLogLevel: (\n                                    <strong>\n                                        <FormattedMessage\n                                            id='admin.log.logLevel'\n                                            defaultMessage='Log Level'\n                                        />\n                                    </strong>\n                                ),\n                            },\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LogSettings.EnableDiagnostics',\n                            label: t('admin.log.enableDiagnostics'),\n                            label_default: 'Enable Diagnostics and Error Reporting:',\n                            help_text: t('admin.log.enableDiagnosticsDescription'),\n                            help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our [privacy policy](!https://about.mattermost.com/default-privacy-policy/) to learn more.',\n                            help_text_markdown: true,\n                            onConfigSave: (displayVal, previousVal) => {\n                                if (previousVal && previousVal !== displayVal) {\n                                    trackEvent('ui', 'diagnostics_disabled');\n                                }\n                                return displayVal;\n                            },\n                        },\n                    ],\n                },\n            },\n        },\n        permissions: {\n            schemes: {\n                schema: {\n                    id: 'PermissionSchemes',\n                    component: PermissionSchemesSettings,\n                },\n            },\n            systemScheme: {\n                schema: {\n                    id: 'PermissionSystemScheme',\n                    component: PermissionSystemSchemeSettings,\n                },\n            },\n            teamScheme: {\n                schema: {\n                    id: 'PermissionSystemScheme',\n                    component: PermissionTeamSchemeSettings,\n                },\n            },\n        },\n        authentication: {\n            gitlab: {\n                schema: {\n                    id: 'GitLabSettings',\n                    name: t('admin.authentication.gitlab'),\n                    name_default: 'GitLab',\n                    onConfigLoad: (config) => {\n                        const newState = {};\n                        newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n                        return newState;\n                    },\n                    onConfigSave: (config) => {\n                        const newConfig = {...config};\n                        newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n                        return newConfig;\n                    },\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'GitLabSettings.Enable',\n                            label: t('admin.gitlab.enableTitle'),\n                            label_default: 'Enable authentication with GitLab: ',\n                            help_text: t('admin.gitlab.enableDescription'),\n                            help_text_default: 'When true, Mattermost allows team creation and account signup using GitLab OAuth.\\n \\n1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Id',\n                            label: t('admin.gitlab.clientIdTitle'),\n                            label_default: 'Application ID:',\n                            help_text: t('admin.gitlab.clientIdDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientIdExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.stateValueFalse('GitLabSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Secret',\n                            label: t('admin.gitlab.clientSecretTitle'),\n                            label_default: 'Application Secret Key:',\n                            help_text: t('admin.gitlab.clientSecretDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.stateValueFalse('GitLabSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Url',\n                            label: t('admin.gitlab.siteUrl'),\n                            label_default: 'GitLab Site URL:',\n                            help_text: t('admin.gitlab.siteUrlDescription'),\n                            help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                            placeholder: t('admin.gitlab.siteUrlExample'),\n                            placeholder_default: 'E.g.: https://',\n                            isDisabled: needsUtils.stateValueFalse('GitLabSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.UserApiEndpoint',\n                            label: t('admin.gitlab.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                                }\n                                return '';\n                            },\n                            isDisabled: () => true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.AuthEndpoint',\n                            label: t('admin.gitlab.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                                }\n                                return '';\n                            },\n                            isDisabled: () => true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.TokenEndpoint',\n                            label: t('admin.gitlab.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                                }\n                                return '';\n                            },\n                            isDisabled: () => true,\n                        },\n                    ],\n                },\n            },\n            oauth: {\n                schema: {\n                    id: 'OAuthSettings',\n                    name: t('admin.authentication.oauth'),\n                    name_default: 'OAuth 2.0',\n                    onConfigLoad: (config) => {\n                        const newState = {};\n                        if (config.GitLabSettings && config.GitLabSettings.Enable) {\n                            newState.oauthType = Constants.GITLAB_SERVICE;\n                        }\n                        if (config.Office365Settings && config.Office365Settings.Enable) {\n                            newState.oauthType = Constants.OFFICE365_SERVICE;\n                        }\n                        if (config.GoogleSettings && config.GoogleSettings.Enable) {\n                            newState.oauthType = Constants.GOOGLE_SERVICE;\n                        }\n\n                        newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n\n                        return newState;\n                    },\n                    onConfigSave: (config) => {\n                        const newConfig = {...config};\n                        newConfig.GitLabSettings = config.GitLabSettings || {};\n                        newConfig.Office365Settings = config.Office365Settings || {};\n                        newConfig.GoogleSettings = config.GoogleSettings || {};\n\n                        newConfig.GitLabSettings.Enable = false;\n                        newConfig.Office365Settings.Enable = false;\n                        newConfig.GoogleSettings.Enable = false;\n                        newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n\n                        if (config.oauthType === Constants.GITLAB_SERVICE) {\n                            newConfig.GitLabSettings.Enable = true;\n                        }\n                        if (config.oauthType === Constants.OFFICE365_SERVICE) {\n                            newConfig.Office365Settings.Enable = true;\n                        }\n                        if (config.oauthType === Constants.GOOGLE_SERVICE) {\n                            newConfig.GoogleSettings.Enable = true;\n                        }\n                        delete newConfig.oauthType;\n                        return newConfig;\n                    },\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'oauthType',\n                            label: t('admin.oauth.select'),\n                            label_default: 'Select OAuth 2.0 Service Provider:',\n                            options: [\n                                {\n                                    value: 'off',\n                                    display_name: t('admin.oauth.off'),\n                                    display_name_default: 'Do not allow sign-in via an OAuth 2.0 provider.',\n                                },\n                                {\n                                    value: Constants.GITLAB_SERVICE,\n                                    display_name: t('admin.oauth.gitlab'),\n                                    display_name_default: 'GitLab',\n                                    help_text: t('admin.gitlab.EnableMarkdownDesc'),\n                                    help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                                    help_text_markdown: true,\n                                },\n                                {\n                                    value: Constants.GOOGLE_SERVICE,\n                                    display_name: t('admin.oauth.google'),\n                                    display_name_default: 'Google Apps',\n                                    isHidden: needsUtils.not(needsUtils.hasLicenseFeature('GoogleOAuth')),\n                                    help_text: t('admin.google.EnableMarkdownDesc'),\n                                    help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand sidebar and enter \"Mattermost - your-company-name\" as the **Project Name**, then click **Create**.\\n3. Click the **OAuth consent screen** header and enter \"Mattermost\" as the **Product name shown to users**, then click **Save**.\\n4. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\\n5. Under **Restrictions** and **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\\n6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\\n7. Finally, go to [Google+ API](!https://console.developers.google.com/apis/api/plus/overview\") and click *Enable*. This might take a few minutes to propagate through Google`s systems.',\n                                    help_text_markdown: true,\n                                },\n                                {\n                                    value: Constants.OFFICE365_SERVICE,\n                                    display_name: t('admin.oauth.office365'),\n                                    display_name_default: 'Office 365 (Beta)',\n                                    isHidden: needsUtils.not(needsUtils.hasLicenseFeature('Office365OAuth')),\n                                    help_text: t('admin.office365.EnableMarkdownDesc'),\n                                    help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to app list** > **Add an app** and use \"Mattermost - your-company-name\" as the **Application Name**.\\n3. Under **Application Secrets**, click **Generate New Password** and paste it to the **Application Secret Password** field below.\\n4. Under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\\n5. Finally, click **Save** and then paste the **Application ID** below.',\n                                    help_text_markdown: true,\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Id',\n                            label: t('admin.gitlab.clientIdTitle'),\n                            label_default: 'Application ID:',\n                            help_text: t('admin.gitlab.clientIdDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientIdExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Secret',\n                            label: t('admin.gitlab.clientSecretTitle'),\n                            label_default: 'Application Secret Key:',\n                            help_text: t('admin.gitlab.clientSecretDescription'),\n                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                            placeholder: t('admin.gitlab.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.Url',\n                            label: t('admin.gitlab.siteUrl'),\n                            label_default: 'GitLab Site URL:',\n                            help_text: t('admin.gitlab.siteUrlDescription'),\n                            help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                            placeholder: t('admin.gitlab.siteUrlExample'),\n                            placeholder_default: 'E.g.: https://',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.UserApiEndpoint',\n                            label: t('admin.gitlab.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                                }\n                                return '';\n                            },\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.AuthEndpoint',\n                            label: t('admin.gitlab.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                                }\n                                return '';\n                            },\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GitLabSettings.TokenEndpoint',\n                            label: t('admin.gitlab.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: (value, config, state) => {\n                                if (state['GitLabSettings.Url']) {\n                                    return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                                }\n                                return '';\n                            },\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.Id',\n                            label: t('admin.google.clientIdTitle'),\n                            label_default: 'Client ID:',\n                            help_text: t('admin.google.clientIdDescription'),\n                            help_text_default: 'The Client ID you received when registering your application with Google.',\n                            placeholder: t('admin.google.clientIdExample'),\n                            placeholder_default: 'E.g.: \"7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.Secret',\n                            label: t('admin.google.clientSecretTitle'),\n                            label_default: 'Client Secret:',\n                            help_text: t('admin.google.clientSecretDescription'),\n                            help_text_default: 'The Client Secret you received when registering your application with Google.',\n                            placeholder: t('admin.google.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.UserApiEndpoint',\n                            label: t('admin.google.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: () => 'https://www.googleapis.com/plus/v1/people/me',\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.AuthEndpoint',\n                            label: t('admin.google.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: () => 'https://accounts.google.com/o/oauth2/v2/auth',\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'GoogleSettings.TokenEndpoint',\n                            label: t('admin.google.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: () => 'https://www.googleapis.com/oauth2/v4/token',\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.Id',\n                            label: t('admin.office365.clientIdTitle'),\n                            label_default: 'Application ID:',\n                            help_text: t('admin.office365.clientIdDescription'),\n                            help_text_default: 'The Application/Client ID you received when registering your application with Microsoft.',\n                            placeholder: t('admin.office365.clientIdExample'),\n                            placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.Secret',\n                            label: t('admin.office365.clientSecretTitle'),\n                            label_default: 'Application Secret Password:',\n                            help_text: t('admin.office365.clientSecretDescription'),\n                            help_text_default: 'The Application Secret Password you generated when registering your application with Microsoft.',\n                            placeholder: t('admin.office365.clientSecretExample'),\n                            placeholder_default: 'E.g.: \"shAieM47sNBfgl20f8ci294\"',\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.UserApiEndpoint',\n                            label: t('admin.office365.userTitle'),\n                            label_default: 'User API Endpoint:',\n                            dynamic_value: () => 'https://graph.microsoft.com/v1.0/me',\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.AuthEndpoint',\n                            label: t('admin.office365.authTitle'),\n                            label_default: 'Auth Endpoint:',\n                            dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'Office365Settings.TokenEndpoint',\n                            label: t('admin.office365.tokenTitle'),\n                            label_default: 'Token Endpoint:',\n                            dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n                            isDisabled: () => true,\n                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),\n                        },\n                    ],\n                },\n            },\n            email: {\n                schema: {\n                    id: 'EmailSettings',\n                    name: t('admin.authentication.email'),\n                    name_default: 'Email Authentication',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignUpWithEmail',\n                            label: t('admin.email.allowSignupTitle'),\n                            label_default: 'Enable account creation with email:',\n                            help_text: t('admin.email.allowSignupDescription'),\n                            help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignInWithEmail',\n                            label: t('admin.email.allowEmailSignInTitle'),\n                            label_default: 'Enable sign-in with email:',\n                            help_text: t('admin.email.allowEmailSignInDescription'),\n                            help_text_default: 'When true, Mattermost allows users to sign in using their email and password.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.EnableSignInWithUsername',\n                            label: t('admin.email.allowUsernameSignInTitle'),\n                            label_default: 'Enable sign-in with username:',\n                            help_text: t('admin.email.allowUsernameSignInDescription'),\n                            help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',\n                        },\n                    ],\n                },\n            },\n            ldap: {\n                schema: {\n                    id: 'LdapSettings',\n                    name: t('admin.authentication.ldap'),\n                    name_default: 'AD/LDAP',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.Enable',\n                            label: t('admin.ldap.enableTitle'),\n                            label_default: 'Enable sign-in with AD/LDAP:',\n                            help_text: t('admin.ldap.enableDesc'),\n                            help_text_default: 'When true, Mattermost allows login using AD/LDAP',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.EnableSync',\n                            label: t('admin.ldap.enableSyncTitle'),\n                            label_default: 'Enable Synchronization with AD/LDAP:',\n                            help_text: t('admin.ldap.enableSyncDesc'),\n                            help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LdapServer',\n                            label: t('admin.ldap.serverTitle'),\n                            label_default: 'AD/LDAP Server:',\n                            help_text: t('admin.ldap.serverDesc'),\n                            help_text_default: 'The domain or IP address of AD/LDAP server.',\n                            placeholder: t('admin.ldap.serverEx'),\n                            placeholder_default: 'E.g.: \"10.0.0.23\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.LdapPort',\n                            label: t('admin.ldap.portTitle'),\n                            label_default: 'AD/LDAP Port:',\n                            help_text: t('admin.ldap.portDesc'),\n                            help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',\n                            placeholder: t('admin.ldap.portEx'),\n                            placeholder_default: 'E.g.: \"389\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'LdapSettings.ConnectionSecurity',\n                            label: t('admin.connectionSecurityTitle'),\n                            label_default: 'Connection Security:',\n                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: t('admin.connectionSecurityNone'),\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'TLS',\n                                    display_name: t('admin.connectionSecurityTls'),\n                                    display_name_default: 'TLS (Recommended)',\n                                },\n                                {\n                                    value: 'STARTTLS',\n                                    display_name: t('admin.connectionSecurityStart'),\n                                    display_name_default: 'STARTTLS',\n                                },\n                            ],\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'LdapSettings.SkipCertificateVerification',\n                            label: t('admin.ldap.skipCertificateVerification'),\n                            label_default: 'Skip Certificate Verification:',\n                            help_text: t('admin.ldap.skipCertificateVerificationDesc'),\n                            help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Not recommended for production environments where TLS is required. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('LdapSettings.ConnectionSecurity'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BaseDN',\n                            label: t('admin.ldap.baseTitle'),\n                            label_default: 'BaseDN:',\n                            help_text: t('admin.ldap.baseDesc'),\n                            help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for users in the AD/LDAP tree.',\n                            placeholder: t('admin.ldap.baseEx'),\n                            placeholder_default: 'E.g.: \"ou=Unit Name,dc=corp,dc=example,dc=com\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BindUsername',\n                            label: t('admin.ldap.bindUserTitle'),\n                            label_default: 'Bind Username:',\n                            help_text: t('admin.ldap.bindUserDesc'),\n                            help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.BindPassword',\n                            label: t('admin.ldap.bindPwdTitle'),\n                            label_default: 'Bind Password:',\n                            help_text: t('admin.ldap.bindPwdDesc'),\n                            help_text_default: 'Password of the user given in \"Bind Username\".',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.UserFilter',\n                            label: t('admin.ldap.userFilterTitle'),\n                            label_default: 'User Filter:',\n                            help_text: t('admin.ldap.userFilterDisc'),\n                            help_text_default: '(Optional) Enter an AD/LDAP Filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',\n                            placeholder: t('admin.ldap.userFilterEx'),\n                            placeholder_default: 'Ex. \"(objectClass=user)\"',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.FirstNameAttribute',\n                            label: t('admin.ldap.firstnameAttrTitle'),\n                            label_default: 'First Name Attribute:',\n                            placeholder: t('admin.ldap.firstnameAttrEx'),\n                            placeholder_default: 'E.g.: \"givenName\"',\n                            help_text: t('admin.ldap.firstnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in Mattermost. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LastNameAttribute',\n                            label: t('admin.ldap.lastnameAttrTitle'),\n                            label_default: 'Last Name Attribute:',\n                            placeholder: t('admin.ldap.lastnameAttrEx'),\n                            placeholder_default: 'E.g.: \"sn\"',\n                            help_text: t('admin.ldap.lastnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in Mattermost. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.NicknameAttribute',\n                            label: t('admin.ldap.nicknameAttrTitle'),\n                            label_default: 'Nickname Attribute:',\n                            placeholder: t('admin.ldap.nicknameAttrEx'),\n                            placeholder_default: 'E.g.: \"nickname\"',\n                            help_text: t('admin.ldap.nicknameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in Mattermost. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.PositionAttribute',\n                            label: t('admin.ldap.positionAttrTitle'),\n                            label_default: 'Position Attribute:',\n                            placeholder: t('admin.ldap.positionAttrEx'),\n                            placeholder_default: 'E.g.: \"title\"',\n                            help_text: t('admin.ldap.positionAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in Mattermost. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.EmailAttribute',\n                            label: t('admin.ldap.emailAttrTitle'),\n                            label_default: 'Email Attribute:',\n                            placeholder: t('admin.ldap.emailAttrEx'),\n                            placeholder_default: 'E.g.: \"mail\" or \"userPrincipalName\"',\n                            help_text: t('admin.ldap.emailAttrDesc'),\n                            help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in Mattermost.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.UsernameAttribute',\n                            label: t('admin.ldap.usernameAttrTitle'),\n                            label_default: 'Username Attribute:',\n                            placeholder: t('admin.ldap.usernameAttrEx'),\n                            placeholder_default: 'E.g.: \"sAMAccountName\"',\n                            help_text: t('admin.ldap.usernameAttrDesc'),\n                            help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in Mattermost. This may be the same as the Login ID Attribute.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.IdAttribute',\n                            label: t('admin.ldap.idAttrTitle'),\n                            label_default: 'ID Attribute: ',\n                            placeholder: t('admin.ldap.idAttrEx'),\n                            placeholder_default: 'E.g.: \"objectGUID\"',\n                            help_text: t('admin.ldap.idAttrDesc'),\n                            help_text_markdown: true,\n                            help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change. If a user\\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one.\\n \\nIf you need to change this field after users have already logged in, use the [mattermost ldap idmigrate](!https://about.mattermost.com/default-mattermost-ldap-idmigrate) CLI tool.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueEqual('LdapSettings.Enable', false),\n                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LoginIdAttribute',\n                            label: t('admin.ldap.loginAttrTitle'),\n                            label_default: 'Login ID Attribute: ',\n                            placeholder: t('admin.ldap.loginIdAttrEx'),\n                            placeholder_default: 'E.g.: \"sAMAccountName\"',\n                            help_text: t('admin.ldap.loginAttrDesc'),\n                            help_text_markdown: true,\n                            help_text_default: 'The attribute in the AD/LDAP server used to log in to Mattermost. Normally this attribute is the same as the \"Username Attribute\" field above.\\n \\nIf your team typically uses domain/username to log in to other services with AD/LDAP, you may enter domain/username in this field to maintain consistency between sites.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'LdapSettings.LoginFieldName',\n                            label: t('admin.ldap.loginNameTitle'),\n                            label_default: 'Sign-in Field Default Text:',\n                            placeholder: t('admin.ldap.loginNameEx'),\n                            placeholder_default: 'E.g.: \"AD/LDAP Username\"',\n                            help_text: t('admin.ldap.loginNameDesc'),\n                            help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to \"AD/LDAP Username\".',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.SyncIntervalMinutes',\n                            label: t('admin.ldap.syncIntervalTitle'),\n                            label_default: 'Synchronization Interval (minutes):',\n                            help_text: t('admin.ldap.syncIntervalHelpText'),\n                            help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to \"Inactive\" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.MaxPageSize',\n                            label: t('admin.ldap.maxPageSizeTitle'),\n                            label_default: 'Maximum Page Size:',\n                            placeholder: t('admin.ldap.maxPageSizeEx'),\n                            placeholder_default: 'E.g.: \"2000\"',\n                            help_text: t('admin.ldap.maxPageSizeHelpText'),\n                            help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'LdapSettings.QueryTimeout',\n                            label: t('admin.ldap.queryTitle'),\n                            label_default: 'Query Timeout (seconds):',\n                            placeholder: t('admin.ldap.queryEx'),\n                            placeholder_default: 'E.g.: \"60\"',\n                            help_text: t('admin.ldap.queryDesc'),\n                            help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: ldapTest,\n                            key: 'LdapSettings.LdapTest',\n                            label: t('admin.ldap.ldap_test_button'),\n                            label_default: 'AD/LDAP Test',\n                            help_text: t('admin.ldap.testHelpText'),\n                            help_text_markdown: true,\n                            help_text_default: 'Tests if the Mattemost server can connect to the AD/LDAP server specified. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                            error_message: t('admin.ldap.testFailure'),\n                            error_message_default: 'AD/LDAP Test Failure: {error}',\n                            success_message: t('admin.ldap.testSuccess'),\n                            success_message_default: 'AD/LDAP Test Successful',\n                            isDisabled: needsUtils.and(\n                                needsUtils.stateValueFalse('LdapSettings.Enable'),\n                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_JOBSTABLE,\n                            job_type: Constants.JobTypes.LDAP_SYNC,\n                            label: t('admin.ldap.sync_button'),\n                            label_default: 'AD/LDAP Synchronize Now',\n                            help_text: t('admin.ldap.syncNowHelpText'),\n                            help_text_markdown: true,\n                            help_text_default: 'Initiates an AD/LDAP synchronization immediately. See the table below for status of each synchronization. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                            isDisabled: needsUtils.stateValueFalse('LdapSettings.EnableSync'),\n                            render_job: (job) => {\n                                let mattermostUsers = '0';\n                                let ldapUsers = '0';\n                                let deleteCount = '0';\n                                let updateCount = '0';\n\n                                if (job && job.data) {\n                                    if (job.data.mattermost_users_count && job.data.mattermost_users_count.length > 0) {\n                                        mattermostUsers = job.data.mattermost_users_count;\n                                    }\n\n                                    if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {\n                                        ldapUsers = job.data.ldap_users_count;\n                                    }\n\n                                    if (job.data.delete_count && job.data.delete_count.length > 0) {\n                                        deleteCount = job.data.delete_count;\n                                    }\n\n                                    if (job.data.update_count && job.data.update_count.length > 0) {\n                                        updateCount = job.data.update_count;\n                                    }\n                                }\n\n                                return (\n                                    <FormattedMessage\n                                        id='admin.ldap.jobExtraInfo'\n                                        defaultMessage='Scanned {ldapUsers} LDAP users, updated {updateCount}, deactivated {deleteCount}'\n                                        values={{\n                                            mattermostUsers,\n                                            ldapUsers,\n                                            deleteCount,\n                                            updateCount,\n                                        }}\n                                    />\n                                );\n                            },\n                        },\n                    ],\n                },\n            },\n            saml: {\n                schema: {\n                    id: 'SamlSettings',\n                    name: t('admin.authentication.saml'),\n                    name_default: 'SAML 2.0',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.Enable',\n                            label: t('admin.saml.enableTitle'),\n                            label_default: 'Enable Login With SAML 2.0:',\n                            help_text: t('admin.saml.enableDescription'),\n                            help_text_default: 'When true, Mattermost allows login using SAML 2.0. Please see [documentation](!http://docs.mattermost.com/deployment/sso-saml.html) to learn more about configuring SAML for Mattermost.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.EnableSyncWithLdap',\n                            label: t('admin.saml.enableSyncWithLdapTitle'),\n                            label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',\n                            help_text: t('admin.saml.enableSyncWithLdapDescription'),\n                            help_text_default: 'When true, Mattermost periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at **Authentication > AD/LDAP**. When false, user attributes are updated from SAML during user login. See [documentation](!https://about.mattermost.com/default-saml-ldap-sync) to learn more.',\n                            help_text_markdown: true,\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.EnableSyncWithLdapIncludeAuth',\n                            label: t('admin.saml.enableSyncWithLdapIncludeAuthTitle'),\n                            label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',\n                            help_text: t('admin.saml.enableSyncWithLdapIncludeAuthDescription'),\n                            help_text_default: 'When true, Mattermost will override the SAML ID attribute with the AD/LDAP ID attribute if configured or override the SAML Email attribute with the AD/LDAP Email attribute if SAML ID attribute is not present.  This will allow you automatically migrate users from Email binding to ID binding to prevent creation of new users when an email address changes for a user. Moving from true to false, will remove the override from happening.\\n \\n**Note:** SAML IDs must match the LDAP IDs to prevent disabling of user accounts.  Please review [documentation](!https://docs.mattermost.com/deployment/sso-saml-ldapsync.html) for more information.',\n                            help_text_markdown: true,\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.EnableSyncWithLdap'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.IdpUrl',\n                            label: t('admin.saml.idpUrlTitle'),\n                            label_default: 'SAML SSO URL:',\n                            help_text: t('admin.saml.idpUrlDesc'),\n                            help_text_default: 'The URL where Mattermost sends a SAML request to start login sequence.',\n                            placeholder: t('admin.saml.idpUrlEx'),\n                            placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/SSO/Login\"',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.IdpDescriptorUrl',\n                            label: t('admin.saml.idpDescriptorUrlTitle'),\n                            label_default: 'Identity Provider Issuer URL:',\n                            help_text: t('admin.saml.idpDescriptorUrlDesc'),\n                            help_text_default: 'The issuer URL for the Identity Provider you use for SAML requests.',\n                            placeholder: t('admin.saml.idpDescriptorUrlEx'),\n                            placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/issuer\"',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                            key: 'SamlSettings.IdpCertificateFile',\n                            label: t('admin.saml.idpCertificateFileTitle'),\n                            label_default: 'Identity Provider Public Certificate:',\n                            help_text: t('admin.saml.idpCertificateFileDesc'),\n                            help_text_default: 'The public authentication certificate issued by your Identity Provider.',\n                            remove_help_text: t('admin.saml.idpCertificateFileRemoveDesc'),\n                            remove_help_text_default: 'Remove the public authentication certificate issued by your Identity Provider.',\n                            remove_button_text: t('admin.saml.remove.idp_certificate'),\n                            remove_button_text_default: 'Remove Identity Provider Certificate',\n                            removing_text: t('admin.saml.removing.certificate'),\n                            removing_text_default: 'Removing Certificate...',\n                            uploading_text: t('admin.saml.uploading.certificate'),\n                            uploading_text_default: 'Uploading Certificate...',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                            fileType: '.crt,.cer,.cert,.pem',\n                            upload_action: uploadIdpSamlCertificate,\n                            remove_action: removeIdpSamlCertificate,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.Verify',\n                            label: t('admin.saml.verifyTitle'),\n                            label_default: 'Verify Signature:',\n                            help_text: t('admin.saml.verifyDescription'),\n                            help_text_default: 'When false, Mattermost will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Not recommended for production environments. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.AssertionConsumerServiceURL',\n                            label: t('admin.saml.assertionConsumerServiceURLTitle'),\n                            label_default: 'Service Provider Login URL:',\n                            help_text: t('admin.saml.assertionConsumerServiceURLPopulatedDesc'),\n                            help_text_default: 'This field is also known as the Assertion Consumer Service URL.',\n                            placeholder: t('admin.saml.assertionConsumerServiceURLEx'),\n                            placeholder_default: 'E.g.: \"https://<your-mattermost-url>/login/sso/saml\"',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.Verify'),\n                            ),\n                            onConfigLoad: (value, config) => {\n                                const siteUrl = config.ServiceSettings.SiteURL;\n                                if (siteUrl.length > 0 && value.length === 0) {\n                                    const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';\n                                    return `${siteUrl}${addSlashIfNeeded}login/sso/saml`;\n                                }\n                                return value;\n                            },\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SamlSettings.Encrypt',\n                            label: t('admin.saml.encryptTitle'),\n                            label_default: 'Enable Encryption:',\n                            help_text: t('admin.saml.encryptDescription'),\n                            help_text_default: 'When false, Mattermost will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Not recommended for production environments. For testing only.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                            key: 'SamlSettings.PrivateKeyFile',\n                            label: t('admin.saml.privateKeyFileTitle'),\n                            label_default: 'Service Provider Private Key:',\n                            help_text: t('admin.saml.privateKeyFileFileDesc'),\n                            help_text_default: 'The private key used to decrypt SAML Assertions from the Identity Provider.',\n                            remove_help_text: t('admin.saml.privateKeyFileFileRemoveDesc'),\n                            remove_help_text_default: 'Remove the private key used to decrypt SAML Assertions from the Identity Provider.',\n                            remove_button_text: t('admin.saml.remove.privKey'),\n                            remove_button_text_default: 'Remove Service Provider Private Key',\n                            removing_text: t('admin.saml.removing.privKey'),\n                            removing_text_default: 'Removing Private Key...',\n                            uploading_text: t('admin.saml.uploading.privateKey'),\n                            uploading_text_default: 'Uploading Private Key...',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.Encrypt'),\n                            ),\n                            fileType: '.key',\n                            upload_action: uploadPrivateSamlCertificate,\n                            remove_action: removePrivateSamlCertificate,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                            key: 'SamlSettings.PublicCertificateFile',\n                            label: t('admin.saml.publicCertificateFileTitle'),\n                            label_default: 'Service Provider Public Certificate:',\n                            help_text: t('admin.saml.publicCertificateFileDesc'),\n                            help_text_default: 'The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',\n                            remove_help_text: t('admin.saml.publicCertificateFileRemoveDesc'),\n                            remove_help_text_default: 'Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',\n                            remove_button_text: t('admin.saml.remove.sp_certificate'),\n                            remove_button_text_default: 'Remove Service Provider Certificate',\n                            removing_text: t('admin.saml.removing.certificate'),\n                            removing_text_default: 'Removing Certificate...',\n                            uploading_text: t('admin.saml.uploading.certificate'),\n                            uploading_text_default: 'Uploading Certificate...',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('SamlSettings.Enable'),\n                                needsUtils.stateValueFalse('SamlSettings.Encrypt'),\n                            ),\n                            fileType: '.crt,.cer',\n                            upload_action: uploadPublicSamlCertificate,\n                            remove_action: removePublicSamlCertificate,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.EmailAttribute',\n                            label: t('admin.saml.emailAttrTitle'),\n                            label_default: 'Email Attribute:',\n                            placeholder: t('admin.saml.emailAttrEx'),\n                            placeholder_default: 'E.g.: \"Email\" or \"PrimaryEmail\"',\n                            help_text: t('admin.saml.emailAttrDesc'),\n                            help_text_default: 'The attribute in the SAML Assertion that will be used to populate the email addresses of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.UsernameAttribute',\n                            label: t('admin.saml.usernameAttrTitle'),\n                            label_default: 'Username Attribute:',\n                            placeholder: t('admin.saml.usernameAttrEx'),\n                            placeholder_default: 'E.g.: \"Username\"',\n                            help_text: t('admin.saml.usernameAttrDesc'),\n                            help_text_default: 'The attribute in the SAML Assertion that will be used to populate the username field in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.IdAttribute',\n                            label: t('admin.saml.idAttrTitle'),\n                            label_default: 'Id Attribute:',\n                            placeholder: t('admin.saml.idAttrEx'),\n                            placeholder_default: 'E.g.: \"Id\"',\n                            help_text: t('admin.saml.idAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to bind users from SAML to users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.FirstNameAttribute',\n                            label: t('admin.saml.firstnameAttrTitle'),\n                            label_default: 'First Name Attribute:',\n                            placeholder: t('admin.saml.firstnameAttrEx'),\n                            placeholder_default: 'E.g.: \"FirstName\"',\n                            help_text: t('admin.saml.firstnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.LastNameAttribute',\n                            label: t('admin.saml.lastnameAttrTitle'),\n                            label_default: 'Last Name Attribute:',\n                            placeholder: t('admin.saml.lastnameAttrEx'),\n                            placeholder_default: 'E.g.: \"LastName\"',\n                            help_text: t('admin.saml.lastnameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.NicknameAttribute',\n                            label: t('admin.saml.nicknameAttrTitle'),\n                            label_default: 'Nickname Attribute:',\n                            placeholder: t('admin.saml.nicknameAttrEx'),\n                            placeholder_default: 'E.g.: \"Nickname\"',\n                            help_text: t('admin.saml.nicknameAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.PositionAttribute',\n                            label: t('admin.saml.positionAttrTitle'),\n                            label_default: 'Position Attribute:',\n                            placeholder: t('admin.saml.positionAttrEx'),\n                            placeholder_default: 'E.g.: \"Role\"',\n                            help_text: t('admin.saml.positionAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.LocaleAttribute',\n                            label: t('admin.saml.localeAttrTitle'),\n                            label_default: 'Preferred Language Attribute:',\n                            placeholder: t('admin.saml.localeAttrEx'),\n                            placeholder_default: 'E.g.: \"Locale\" or \"PrimaryLanguage\"',\n                            help_text: t('admin.saml.localeAttrDesc'),\n                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SamlSettings.LoginButtonText',\n                            label: t('admin.saml.loginButtonTextTitle'),\n                            label_default: 'Login Button Text:',\n                            placeholder: t('admin.saml.loginButtonTextEx'),\n                            placeholder_default: 'E.g.: \"With OKTA\"',\n                            help_text: t('admin.saml.loginButtonTextDesc'),\n                            help_text_default: '(Optional) The text that appears in the login button on the login page. Defaults to \"With SAML\".',\n                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),\n                        },\n                    ],\n                },\n            },\n            mfa: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.mfa.title'),\n                    name_default: 'Multi-factor Authentication',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.mfa.bannerDesc'),\n                            label_default: '[Multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',\n                            label_markdown: true,\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableMultifactorAuthentication',\n                            label: t('admin.service.mfaTitle'),\n                            label_default: 'Enable Multi-factor Authentication:',\n                            help_text: t('admin.service.mfaDesc'),\n                            help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnforceMultifactorAuthentication',\n                            label: t('admin.service.enforceMfaTitle'),\n                            label_default: 'Enforce Multi-factor Authentication:',\n                            help_text: t('admin.service.enforceMfaDesc'),\n                            help_text_markdown: true,\n                            help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.\\n \\nIf your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.EnableMultifactorAuthentication'),\n                        },\n                    ],\n                },\n            },\n        },\n        security: {\n            signup: {\n                schema: {\n                    id: 'SignupSettings',\n                    name: t('admin.security.signup'),\n                    name_default: 'Signup',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'EmailSettings.RequireEmailVerification',\n                            label: t('admin.email.requireVerificationTitle'),\n                            label_default: 'Require Email Verification: ',\n                            help_text: t('admin.email.requireVerificationDescription'),\n                            help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',\n                            disabled_help_text: t('admin.security.requireEmailVerification.disabled'),\n                            disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',\n                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_GENERATED,\n                            key: 'EmailSettings.InviteSalt',\n                            label: t('admin.email.inviteSaltTitle'),\n                            label_default: 'Email Invite Salt:',\n                            help_text: t('admin.email.inviteSaltDescription'),\n                            help_text_default: '32-character salt added to signing of email invites. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                            disabled_help_text: t('admin.security.inviteSalt.disabled'),\n                            disabled_help_text_default: 'Invite salt cannot be changed while sending emails is disabled.',\n                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableOpenServer',\n                            label: t('admin.team.openServerTitle'),\n                            label_default: 'Enable Open Server: ',\n                            help_text: t('admin.team.openServerDescription'),\n                            help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableEmailInvitations',\n                            label: t('admin.team.emailInvitationsTitle'),\n                            label_default: 'Enable Email Invitations: ',\n                            help_text: t('admin.team.emailInvitationsDescription'),\n                            help_text_default: 'When true users can invite others to the system using email.',\n                        },\n                    ],\n                },\n            },\n            public_links: {\n                schema: {\n                    id: 'PublicLinkSettings',\n                    name: t('admin.security.public_links'),\n                    name_default: 'Public Links',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnablePublicLink',\n                            label: t('admin.image.shareTitle'),\n                            label_default: 'Enable Public File Links: ',\n                            help_text: t('admin.image.shareDescription'),\n                            help_text_default: 'Allow users to share public links to files and images.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_GENERATED,\n                            key: 'FileSettings.PublicLinkSalt',\n                            label: t('admin.image.publicLinkTitle'),\n                            label_default: 'Public Link Salt:',\n                            help_text: t('admin.image.publicLinkDescription'),\n                            help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                        },\n                    ],\n                },\n            },\n            sessions: {\n                schema: {\n                    id: 'SessionsSettings',\n                    name: t('admin.security.session'),\n                    name_default: 'Sessions',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionLengthWebInDays',\n                            label: t('admin.service.webSessionDays'),\n                            label_default: 'Session Length AD/LDAP and Email (days):',\n                            help_text: t('admin.service.webSessionDaysDesc'),\n                            help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionLengthMobileInDays',\n                            label: t('admin.service.mobileSessionDays'),\n                            label_default: 'Session Length Mobile (days):',\n                            help_text: t('admin.service.mobileSessionDaysDesc'),\n                            help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionLengthSSOInDays',\n                            label: t('admin.service.ssoSessionDays'),\n                            label_default: 'Session Length SSO (days):',\n                            help_text: t('admin.service.ssoSessionDaysDesc'),\n                            help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. If the authentication method is SAML or GitLab, the user may automatically be logged back in to Mattermost if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionCacheInMinutes',\n                            label: t('admin.service.sessionCache'),\n                            label_default: 'Session Cache (minutes):',\n                            help_text: t('admin.service.sessionCacheDesc'),\n                            help_text_default: 'The number of minutes to cache a session in memory.',\n                            placeholder: t('admin.service.sessionDaysEx'),\n                            placeholder_default: 'E.g.: \"30\"',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'ServiceSettings.SessionIdleTimeoutInMinutes',\n                            label: t('admin.service.sessionIdleTimeout'),\n                            label_default: 'Session Idle Timeout (minutes):',\n                            help_text: t('admin.service.sessionIdleTimeoutDesc'),\n                            help_text_default: 'The number of minutes from the last time a user was active on the system to the expiry of the user\\'s session. Once expired, the user will need to log in to continue. Minimum is 5 minutes, and 0 is unlimited.\\n \\nApplies to the desktop app and browsers. For mobile apps, use an EMM provider to lock the app when not in use. In High Availability mode, enable IP hash load balancing for reliable timeout measurement.',\n                            help_text_markdown: true,\n                            placeholder: t('admin.service.sessionIdleTimeoutEx'),\n                            placeholder_default: 'E.g.: \"60\"',\n                            isHidden: needsUtils.not(needsUtils.hasLicenseFeature('Compliance')),\n                            onConfigSave: (value) => {\n                                if (value !== 0 && value < MINIMUM_IDLE_TIMEOUT) {\n                                    return MINIMUM_IDLE_TIMEOUT;\n                                }\n                                return value;\n                            },\n                        },\n                    ],\n                },\n            },\n            connections: {\n                schema: {\n                    id: 'ConnectionSettings',\n                    name: t('admin.security.connection'),\n                    name_default: 'Connections',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.AllowCorsFrom',\n                            label: t('admin.service.corsTitle'),\n                            label_default: 'Enable cross-origin requests from:',\n                            placeholder: t('admin.service.corsEx'),\n                            placeholder_default: 'http://example.com',\n                            help_text: t('admin.service.corsDescription'),\n                            help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use \"*\" if you want to allow CORS from any domain or leave it blank to disable it. Should not be set to \"*\" in production.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.CorsExposedHeaders',\n                            label: t('admin.service.corsExposedHeadersTitle'),\n                            label_default: 'CORS Exposed Headers:',\n                            placeholder: t('admin.service.corsHeadersEx'),\n                            placeholder_default: 'X-My-Header',\n                            help_text: t('admin.service.corsExposedHeadersDescription'),\n                            help_text_default: 'Whitelist of headers that will be accessible to the requester.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.CorsAllowCredentials',\n                            label: t('admin.service.corsAllowCredentialsLabel'),\n                            label_default: 'CORS Allow Credentials:',\n                            help_text: t('admin.service.corsAllowCredentialsDescription'),\n                            help_text_default: 'When true, requests that pass validation will include the Access-Control-Allow-Credentials header.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.CorsDebug',\n                            label: t('admin.service.CorsDebugLabel'),\n                            label_default: 'CORS Debug:',\n                            help_text: t('admin.service.corsDebugDescription'),\n                            help_text_default: 'When true, prints messages to the logs to help when developing an integration that uses CORS. These messages will include the structured key value pair \"source\":\"cors\".',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableInsecureOutgoingConnections',\n                            label: t('admin.service.insecureTlsTitle'),\n                            label_default: 'Enable Insecure Outgoing Connections: ',\n                            help_text: t('admin.service.insecureTlsDesc'),\n                            help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',\n                        },\n                    ],\n                },\n            },\n            clientVersions: {\n                schema: {\n                    id: 'ClientVersionsSettings',\n                    name: t('admin.security.client_versions'),\n                    name_default: 'Client Versions',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.AndroidLatestVersion',\n                            label: t('admin.client_versions.androidLatestVersion'),\n                            label_default: 'Latest Android Version',\n                            help_text: t('admin.client_versions.androidLatestVersionHelp'),\n                            help_text_default: 'The latest released Android version',\n                            placeholder: t('admin.client_versions.androidLatestVersion'),\n                            placeholder_default: 'Latest Android Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.AndroidMinVersion',\n                            label: t('admin.client_versions.androidMinVersion'),\n                            label_default: 'Minimum Android Version',\n                            help_text: t('admin.client_versions.androidMinVersionHelp'),\n                            help_text_default: 'The minimum compliant Android version',\n                            placeholder: t('admin.client_versions.androidMinVersion'),\n                            placeholder_default: 'Minimum Android Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.DesktopLatestVersion',\n                            label: t('admin.client_versions.desktopLatestVersion'),\n                            label_default: 'Latest Desktop Version',\n                            help_text: t('admin.client_versions.desktopLatestVersionHelp'),\n                            help_text_default: 'The latest released Desktop version',\n                            placeholder: t('admin.client_versions.desktopLatestVersion'),\n                            placeholder_default: 'Latest Desktop Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.DesktopMinVersion',\n                            label: t('admin.client_versions.desktopMinVersion'),\n                            label_default: 'Minimum Desktop Version',\n                            help_text: t('admin.client_versions.desktopMinVersionHelp'),\n                            help_text_default: 'The minimum compliant Desktop version',\n                            placeholder: t('admin.client_versions.desktopMinVersion'),\n                            placeholder_default: 'Minimum Desktop Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.IosLatestVersion',\n                            label: t('admin.client_versions.iosLatestVersion'),\n                            label_default: 'Latest iOS Version',\n                            help_text: t('admin.client_versions.iosLatestVersionHelp'),\n                            help_text_default: 'The latest released iOS version',\n                            placeholder: t('admin.client_versions.iosLatestVersion'),\n                            placeholder_default: 'Latest iOS Version',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ClientRequirements.IosMinVersion',\n                            label: t('admin.client_versions.iosMinVersion'),\n                            label_default: 'Minimum iOS Version',\n                            help_text: t('admin.client_versions.iosMinVersionHelp'),\n                            help_text_default: 'The minimum compliant iOS version',\n                            placeholder: t('admin.client_versions.iosMinVersion'),\n                            placeholder_default: 'Minimum iOS Version',\n                        },\n                    ],\n                },\n            },\n        },\n        notifications: {\n        },\n        integrations: {\n            custom_integrations: {\n                schema: {\n                    id: 'CustomIntegrationSettings',\n                    name: t('admin.integrations.custom'),\n                    name_default: 'Custom Integrations',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableIncomingWebhooks',\n                            label: t('admin.service.webhooksTitle'),\n                            label_default: 'Enable Incoming Webhooks: ',\n                            help_text: t('admin.service.webhooksDescription'),\n                            help_text_default: 'When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See [documentation](!http://docs.mattermost.com/developer/webhooks-incoming.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableOutgoingWebhooks',\n                            label: t('admin.service.outWebhooksTitle'),\n                            label_default: 'Enable Outgoing Webhooks: ',\n                            help_text: t('admin.service.outWebhooksDesc'),\n                            help_text_default: 'When true, outgoing webhooks will be allowed. See [documentation](!http://docs.mattermost.com/developer/webhooks-outgoing.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableCommands',\n                            label: t('admin.service.cmdsTitle'),\n                            label_default: 'Enable Custom Slash Commands: ',\n                            help_text: t('admin.service.cmdsDesc'),\n                            help_text_default: 'When true, custom slash commands will be allowed. See [documentation](!http://docs.mattermost.com/developer/slash-commands.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableOAuthServiceProvider',\n                            label: t('admin.oauth.providerTitle'),\n                            label_default: 'Enable OAuth 2.0 Service Provider: ',\n                            help_text: t('admin.oauth.providerDescription'),\n                            help_text_default: 'When true, Mattermost can act as an OAuth 2.0 service provider allowing Mattermost to authorize API requests from external applications. See [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) to learn more.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_PERMISSION,\n                            key: 'ServiceSettings.EnableOnlyAdminIntegrations',\n                            label: t('admin.service.integrationAdmin'),\n                            label_default: 'Restrict managing integrations to Admins:',\n                            help_text: t('admin.service.integrationAdminDesc'),\n                            help_text_default: 'When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.',\n                            permissions_mapping_name: 'enableOnlyAdminIntegrations',\n                            isHidden: needsUtils.hasLicense,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnablePostUsernameOverride',\n                            label: t('admin.service.overrideTitle'),\n                            label_default: 'Enable integrations to override usernames:',\n                            help_text: t('admin.service.overrideDescription'),\n                            help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnablePostIconOverride',\n                            label: t('admin.service.iconTitle'),\n                            label_default: 'Enable integrations to override profile picture icons:',\n                            help_text: t('admin.service.iconDescription'),\n                            help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableUserAccessTokens',\n                            label: t('admin.service.userAccessTokensTitle'),\n                            label_default: 'Enable User Access Tokens: ',\n                            help_text: t('admin.service.userAccessTokensDescription'),\n                            help_text_default: 'When true, users can create [user access tokens](!https://about.mattermost.com/default-user-access-tokens) for integrations in **Account Settings > Security**. They can be used to authenticate against the API and give full access to the account.\\n\\n To manage who can create personal access tokens or to search users by token ID, go to the **System Console > Users** page.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n            webrtc: {\n                schema: {\n                    id: 'WebrtcSettings',\n                    name: t('admin.integrations.webrtc'),\n                    name_default: 'Mattermost WebRTC (Beta)',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'WebrtcSettings.Enable',\n                            label: t('admin.webrtc.enableTitle'),\n                            label_default: 'Enable Mattermost WebRTC: ',\n                            help_text: t('admin.webrtc.enableDescription'),\n                            help_text_default: 'When true, Mattermost allows making **one-on-one** video calls. WebRTC calls are available on Chrome, Firefox and Mattermost Desktop Apps.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.GatewayWebsocketUrl',\n                            label: t('admin.webrtc.gatewayWebsocketUrlTitle'),\n                            label_default: 'Gateway WebSocket URL:',\n                            placeholder: t('admin.webrtc.gatewayWebsocketUrlExample'),\n                            placeholder_default: 'E.g.: \"wss://webrtc.mattermost.com:8189\"',\n                            help_text: t('admin.webrtc.gatewayWebsocketUrlDescription'),\n                            help_text_default: 'Enter wss://<mattermost-webrtc-gateway-url>:<port>. Make sure you use WS or WSS in your URL depending on your server configuration.\\n' +\n                                'This is the WebSocket used to signal and establish communication between the peers.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.GatewayAdminUrl',\n                            label: t('admin.webrtc.gatewayAdminUrlTitle'),\n                            label_default: 'Gateway Admin URL:',\n                            placeholder: t('admin.webrtc.gatewayAdminUrlExample'),\n                            placeholder_default: 'E.g.: \"https://webrtc.mattermost.com:7089/admin\"',\n                            help_text: t('admin.webrtc.gatewayAdminUrlDescription'),\n                            help_text_default: 'Enter https://<mattermost-webrtc-gateway-url>:<port>/admin. Make sure you use HTTP or HTTPS in your URL depending on your server configuration.\\n' +\n                                'Mattermost WebRTC uses this URL to obtain valid tokens for each peer to establish the connection.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.GatewayAdminSecret',\n                            label: t('admin.webrtc.gatewayAdminSecretTitle'),\n                            label_default: 'Gateway Admin Secret:',\n                            placeholder: t('admin.webrtc.gatewayAdminSecretExample'),\n                            placeholder_default: 'E.g.: \"PVRzWNN1Tg6szn7IQWvhpAvLByScWxdy\"',\n                            help_text: t('admin.webrtc.gatewayAdminSecretDescription'),\n                            help_text_default: 'Enter your admin secret password to access the Gateway Admin URL.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.StunURI',\n                            label: t('admin.webrtc.stunUriTitle'),\n                            label_default: 'STUN URI:',\n                            placeholder: t('admin.webrtc.stunUriExample'),\n                            placeholder_default: 'E.g.: \"stun:webrtc.mattermost.com:5349\"',\n                            help_text: t('admin.webrtc.stunUriDescription'),\n                            help_text_default: 'Enter your STUN URI as stun:<your-stun-url>:<port>. STUN is a standardized network protocol to allow an end host to assist devices to access its public IP address if it is located behind a NAT.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.TurnURI',\n                            label: t('admin.webrtc.turnUriTitle'),\n                            label_default: 'TURN URI:',\n                            placeholder: t('admin.webrtc.turnUriExample'),\n                            placeholder_default: 'E.g.: \"turn:webrtc.mattermost.com:5349\"',\n                            help_text: t('admin.webrtc.turnUriDescription'),\n                            help_text_default: 'Enter your TURN URI as turn:<your-turn-url>:<port>. TURN is a standardized network protocol to allow an end host to assist devices to establish a connection by using a relay public IP address if it is located behind a symmetric NAT.',\n                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.TurnUsername',\n                            label: t('admin.webrtc.turnUsernameTitle'),\n                            label_default: 'TURN Username:',\n                            placeholder: t('admin.webrtc.turnUsernameExample'),\n                            placeholder_default: 'E.g.: \"myusername\"',\n                            help_text: t('admin.webrtc.turnUsernameDescription'),\n                            help_text_default: 'Enter your TURN Server Username.',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                                needsUtils.stateValueFalse('WebrtcSettings.TurnURI'),\n                            ),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'WebrtcSettings.TurnSharedKey',\n                            label: t('admin.webrtc.turnSharedKeyTitle'),\n                            label_default: 'TURN Shared Key:',\n                            placeholder: t('admin.webrtc.turnSharedKeyExample'),\n                            placeholder_default: 'E.g.: \"bXdkOWQxc3d0Ynk3emY5ZmsxZ3NtazRjaWg=\"',\n                            help_text: t('admin.webrtc.turnSharedKeyDescription'),\n                            help_text_default: 'Enter your TURN Server Shared Key. This is used to created dynamic passwords to establish the connection. Each password is valid for a short period of time.',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueFalse('WebrtcSettings.Enable'),\n                                needsUtils.stateValueFalse('WebrtcSettings.TurnURI'),\n                            ),\n                        },\n                    ],\n                },\n            },\n            external: {\n                schema: {\n                    id: 'ExternalServiceSettings',\n                    name: t('admin.integrations.external'),\n                    name_default: 'External Services',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GoogleDeveloperKey',\n                            label: t('admin.service.googleTitle'),\n                            label_default: 'Google API Key:',\n                            placeholder: t('admin.service.googleExample'),\n                            placeholder_default: 'E.g.: \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV\"',\n                            help_text: t('admin.service.googleDescription'),\n                            help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a [Google Developers Tutorial](!https://www.youtube.com/watch?v=Im69kzhpR3I) for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n        },\n        plugins: {\n            configuration: {\n                schema: {\n                    id: 'PluginSettings',\n                    name: t('admin.plugins.settings.title'),\n                    name_default: 'Configuration',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'PluginSettings.Enable',\n                            label: t('admin.plugins.settings.enable'),\n                            label_default: 'Enable Plugins: ',\n                            help_text: t('admin.plugins.settings.enableDesc'),\n                            help_text_default: 'When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality or customize the user interface of your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugins) to learn more.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n            management: {\n                schema: {\n                    id: 'PluginManagementSettings',\n                    component: PluginManagement,\n                },\n            },\n            custom: {\n                schema: {\n                    id: 'CustomPluginSettings',\n                    component: CustomPluginSettings,\n                },\n            },\n        },\n        files: {\n            storage: {\n                schema: {\n                    id: 'FileSettings',\n                    name: t('admin.files.storage'),\n                    name_default: 'Storage',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'FileSettings.DriverName',\n                            label: t('admin.image.storeTitle'),\n                            label_default: 'File Storage System:',\n                            help_text: t('admin.image.storeDescription'),\n                            help_text_default: 'Storage system where files and image attachments are saved.\\n \\nSelecting \"Amazon S3\" enables fields to enter your Amazon credentials and bucket details.\\n \\nSelecting \"Local File System\" enables the field to specify a local file directory.',\n                            help_text_markdown: true,\n                            options: [\n                                {\n                                    value: FILE_STORAGE_DRIVER_LOCAL,\n                                    display_name: t('admin.image.storeLocal'),\n                                    display_name_default: 'Local File System',\n                                },\n                                {\n                                    value: FILE_STORAGE_DRIVER_S3,\n                                    display_name: t('admin.image.storeAmazonS3'),\n                                    display_name_default: 'Amazon S3',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.Directory',\n                            label: t('admin.image.localTitle'),\n                            label_default: 'Local Storage Directory:',\n                            help_text: t('admin.image.localDescription'),\n                            help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',\n                            placeholder: t('admin.image.localExample'),\n                            placeholder_default: 'E.g.: \"./data/\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Bucket',\n                            label: t('admin.image.amazonS3BucketTitle'),\n                            label_default: 'Amazon S3 Bucket:',\n                            help_text: t('admin.image.amazonS3BucketDescription'),\n                            help_text_default: 'Name you selected for your S3 bucket in AWS.',\n                            placeholder: t('admin.image.amazonS3BucketExample'),\n                            placeholder_default: 'E.g.: \"mattermost-media\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Region',\n                            label: t('admin.image.amazonS3RegionTitle'),\n                            label_default: 'Amazon S3 Region:',\n                            help_text: t('admin.image.amazonS3RegionDescription'),\n                            help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, Mattermost attempts to get the appropriate region from AWS, or sets it to \"us-east-1\" if none found.',\n                            placeholder: t('admin.image.amazonS3RegionExample'),\n                            placeholder_default: 'E.g.: \"us-east-1\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3AccessKeyId',\n                            label: t('admin.image.amazonS3IdTitle'),\n                            label_default: 'Amazon S3 Access Key ID:',\n                            help_text: t('admin.image.amazonS3IdDescription'),\n                            help_text_markdown: true,\n                            help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an [IAM role](!https://about.mattermost.com/default-iam-role). Enter the Access Key ID provided by your Amazon EC2 administrator.',\n                            placeholder: t('admin.image.amazonS3IdExample'),\n                            placeholder_default: 'E.g.: \"AKIADTOVBGERKLCBV\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3Endpoint',\n                            label: t('admin.image.amazonS3EndpointTitle'),\n                            label_default: 'Amazon S3 Endpoint:',\n                            help_text: t('admin.image.amazonS3EndpointDescription'),\n                            help_text_default: 'Hostname of your S3 Compatible Storage provider. Defaults to \"s3.amazonaws.com\".',\n                            placeholder: t('admin.image.amazonS3EndpointExample'),\n                            placeholder_default: 'E.g.: \"s3.amazonaws.com\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'FileSettings.AmazonS3SecretAccessKey',\n                            label: t('admin.image.amazonS3SecretTitle'),\n                            label_default: 'Amazon S3 Secret Access Key:',\n                            help_text: t('admin.image.amazonS3SecretDescription'),\n                            help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',\n                            placeholder: t('admin.image.amazonS3SecretExample'),\n                            placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3SSL',\n                            label: t('admin.image.amazonS3SSLTitle'),\n                            label_default: 'Enable Secure Amazon S3 Connections:',\n                            help_text: t('admin.image.amazonS3SSLDescription'),\n                            help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3SSE',\n                            label: t('admin.image.amazonS3SSETitle'),\n                            label_default: 'Enable Server-Side Encryption for Amazon S3:',\n                            help_text: t('admin.image.amazonS3SSEDescription'),\n                            help_text_markdown: true,\n                            help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See [documentation](!https://about.mattermost.com/default-server-side-encryption) to learn more.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.AmazonS3Trace',\n                            label: t('admin.image.amazonS3TraceTitle'),\n                            label_default: 'Enable Amazon S3 Debugging:',\n                            help_text: t('admin.image.amazonS3TraceDescription'),\n                            help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',\n                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BUTTON,\n                            action: testS3Connection,\n                            key: 'TestS3Connection',\n                            label: t('admin.s3.connectionS3Test'),\n                            label_default: 'Test Connection',\n                            loading: t('admin.s3.testing'),\n                            loading_default: 'Testing...',\n                            error_message: t('admin.s3.s3Fail'),\n                            error_message_default: 'Connection unsuccessful: {error}',\n                            success_message: t('admin.s3.s3Success'),\n                            success_message_default: 'Connection was successful',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableFileAttachments',\n                            label: t('admin.file.enableFileAttachments'),\n                            label_default: 'Allow File Sharing:',\n                            help_text: t('admin.file.enableFileAttachmentsDesc'),\n                            help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableMobileUpload',\n                            label: t('admin.file.enableMobileUploadTitle'),\n                            label_default: 'Allow File Uploads on Mobile:',\n                            help_text: t('admin.file.enableMobileUploadDesc'),\n                            help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'FileSettings.EnableMobileDownload',\n                            label: t('admin.file.enableMobileDownloadTitle'),\n                            label_default: 'Allow File Downloads on Mobile:',\n                            help_text: t('admin.file.enableMobileDownloadDesc'),\n                            help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',\n                            isHidden: needsUtils.not(needsUtils.hasLicense),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'FileSettings.MaxFileSize',\n                            label: t('admin.image.maxFileSizeTitle'),\n                            label_default: 'Maximum File Size:',\n                            help_text: t('admin.image.maxFileSizeDescription'),\n                            help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',\n                            placeholder: t('admin.image.maxFileSizeExample'),\n                            placeholder_default: '50',\n                            onConfigLoad: (configVal) => configVal / MEBIBYTE,\n                            onConfigSave: (displayVal) => displayVal * MEBIBYTE,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                            key: 'ServiceSettings.ImageProxyType',\n                            label: t('admin.image.proxyType'),\n                            label_default: 'Image Proxy Type:',\n                            help_text: t('admin.image.proxyTypeDescription'),\n                            help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See [documentation](!https://about.mattermost.com/default-image-proxy-documentation) to learn more.',\n                            help_text_markdown: true,\n                            options: [\n                                {\n                                    value: '',\n                                    display_name: t('admin.image.proxyTypeNone'),\n                                    display_name_default: 'None',\n                                },\n                                {\n                                    value: 'atmos/camo',\n                                    display_name: t('atmos/camo'),\n                                    display_name_default: 'atmos/camo',\n                                },\n                            ],\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ImageProxyURL',\n                            label: t('admin.image.proxyURL'),\n                            label_default: 'Image Proxy URL:',\n                            help_text: t('admin.image.proxyURLDescription'),\n                            help_text_default: 'URL of your image proxy server.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.ImageProxyOptions',\n                            label: t('admin.image.proxyOptions'),\n                            label_default: 'Image Proxy Options:',\n                            help_text: t('admin.image.proxyOptionsDescription'),\n                            help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',\n                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),\n                        },\n                    ],\n                },\n            },\n        },\n        customization: {\n            customBrand: {\n                schema: {\n                    id: 'CustomBrandSettings',\n                    name: t('admin.customization.customBrand'),\n                    name_default: 'Custom Branding',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'TeamSettings.SiteName',\n                            label: t('admin.team.siteNameTitle'),\n                            label_default: 'Site Name:',\n                            help_text: t('admin.team.siteNameDescription'),\n                            help_text_default: 'Name of service shown in login screens and UI.',\n                            placeholder: t('admin.team.siteNameExample'),\n                            placeholder_default: 'E.g.: \"Mattermost\"',\n                            max_length: Constants.MAX_SITENAME_LENGTH,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'TeamSettings.CustomDescriptionText',\n                            label: t('admin.team.brandDescriptionTitle'),\n                            label_default: 'Site Description: ',\n                            help_text: t('admin.team.brandDescriptionHelp'),\n                            help_text_default: 'Description of service shown in login screens and UI. When not specified, \"All team communication in one place, searchable and accessible anywhere\" is displayed.',\n                            placeholder: t('web.root.signup_info'),\n                            placeholder_default: 'All team communication in one place, searchable and accessible anywhere',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'TeamSettings.EnableCustomBrand',\n                            label: t('admin.team.brandTitle'),\n                            label_default: 'Enable Custom Branding: ',\n                            help_text: t('admin.team.brandDesc'),\n                            help_text_default: 'Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_CUSTOM,\n                            component: BrandImageSetting,\n                            isDisabled: needsUtils.stateValueFalse('TeamSettings.EnableCustomBrand'),\n                            key: 'CustomBrandImage',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LONG_TEXT,\n                            key: 'TeamSettings.CustomBrandText',\n                            label: t('admin.team.brandTextTitle'),\n                            label_default: 'Custom Brand Text:',\n                            help_text: t('admin.team.brandTextDescription'),\n                            help_text_default: 'Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.',\n                            isDisabled: needsUtils.stateValueFalse('TeamSettings.EnableCustomBrand'),\n                            max_length: Constants.MAX_CUSTOM_BRAND_TEXT_LENGTH,\n                        },\n                    ],\n                },\n            },\n            emoji: {\n                schema: {\n                    id: 'EmojiSettings',\n                    name: t('admin.customization.emoji'),\n                    name_default: 'Emoji',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableEmojiPicker',\n                            label: t('admin.customization.enableEmojiPickerTitle'),\n                            label_default: 'Enable Emoji Picker:',\n                            help_text: t('admin.customization.enableEmojiPickerDesc'),\n                            help_text_default: 'The emoji picker allows users to select emoji to add as reactions or use in messages. Enabling the emoji picker with a large number of custom emoji may slow down performance.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableCustomEmoji',\n                            label: t('admin.customization.enableCustomEmojiTitle'),\n                            label_default: 'Enable Custom Emoji:',\n                            help_text: t('admin.customization.enableCustomEmojiDesc'),\n                            help_text_default: 'Enable users to create custom emoji for use in messages. When enabled, Custom Emoji settings can be accessed by switching to a team and clicking the three dots above the channel sidebar, and selecting \"Custom Emoji\".',\n                        },\n                    ],\n                },\n            },\n            gif: {\n                schema: {\n                    id: 'EmojiSettings',\n                    name: t('admin.customization.gif'),\n                    name_default: 'GIF (Beta)',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableGifPicker',\n                            label: t('admin.customization.enableGifPickerTitle'),\n                            label_default: 'Enable GIF Picker:',\n                            help_text: t('admin.customization.enableGifPickerDesc'),\n                            help_text_default: 'Allow users to select GIFs from the emoji picker via a Gfycat integration.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GfycatApiKey',\n                            label: t('admin.customization.gfycatApiKey'),\n                            label_default: 'Gfycat API Key:',\n                            help_text: t('admin.customization.gfycatApiKeyDescription'),\n                            help_text_default: 'Request an API key at [https://developers.gfycat.com/signup/#](!https://developers.gfycat.com/signup/#). Enter the client ID you receive via email to this field. When blank, uses the default API key provided by Gfycat.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.GfycatApiSecret',\n                            label: t('admin.customization.gfycatApiSecret'),\n                            label_default: 'Gfycat API Secret:',\n                            help_text: t('admin.customization.gfycatApiSecretDescription'),\n                            help_text_default: 'The API secret generated by Gfycat for your API key. When blank, uses the default API secret provided by Gfycat.',\n                        },\n                    ],\n                },\n            },\n            announcement: {\n                schema: {\n                    id: 'AnnouncementSettings',\n                    name: t('admin.customization.announcement'),\n                    name_default: 'Announcement Banner',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'AnnouncementSettings.EnableBanner',\n                            label: t('admin.customization.announcement.enableBannerTitle'),\n                            label_default: 'Enable Announcement Banner:',\n                            help_text: t('admin.customization.announcement.enableBannerDesc'),\n                            help_text_default: 'Enable an announcement banner across all teams.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'AnnouncementSettings.BannerText',\n                            label: t('admin.customization.announcement.bannerTextTitle'),\n                            label_default: 'Banner Text:',\n                            help_text: t('admin.customization.announcement.bannerTextDesc'),\n                            help_text_default: 'Text that will appear in the announcement banner.',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_COLOR,\n                            key: 'AnnouncementSettings.BannerColor',\n                            label: t('admin.customization.announcement.bannerColorTitle'),\n                            label_default: 'Banner Color:',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_COLOR,\n                            key: 'AnnouncementSettings.BannerTextColor',\n                            label: t('admin.customization.announcement.bannerTextColorTitle'),\n                            label_default: 'Banner Text Color:',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'AnnouncementSettings.AllowBannerDismissal',\n                            label: t('admin.customization.announcement.allowBannerDismissalTitle'),\n                            label_default: 'Allow Banner Dismissal:',\n                            help_text: t('admin.customization.announcement.allowBannerDismissalDesc'),\n                            help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',\n                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),\n                        },\n                    ],\n                },\n            },\n            posts: {\n                schema: {\n                    id: 'PostSettings',\n                    name: t('admin.customization.posts'),\n                    name_default: 'Posts',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableLinkPreviews',\n                            label: t('admin.customization.enableLinkPreviewsTitle'),\n                            label_default: 'Enable Link Previews:',\n                            help_text: t('admin.customization.enableLinkPreviewsDesc'),\n                            help_text_default: 'Display a preview of website content below messages, when available. Users can disable these previews from Account Settings > Display > Website Link Previews. This setting only applies to websites with OpenGraph metadata and not for image links or YouTube previews.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_CUSTOM,\n                            component: CustomUrlSchemesSetting,\n                            key: 'DisplaySettings.CustomUrlSchemes',\n                        },\n                    ],\n                },\n            },\n            legal_and_support: {\n                schema: {\n                    id: 'LegalAndSupportSettings',\n                    name: t('admin.customization.support'),\n                    name_default: 'Legal and Support',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.TermsOfServiceLink',\n                            label: t('admin.support.termsTitle'),\n                            label_default: 'Terms of Service link:',\n                            help_text: t('admin.support.termsDesc'),\n                            help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the \"Mattermost Conditions of Use (End Users)\" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.PrivacyPolicyLink',\n                            label: t('admin.support.privacyTitle'),\n                            label_default: 'Privacy Policy link:',\n                            help_text: t('admin.support.privacyDesc'),\n                            help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.AboutLink',\n                            label: t('admin.support.aboutTitle'),\n                            label_default: 'About link:',\n                            help_text: t('admin.support.aboutDesc'),\n                            help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.HelpLink',\n                            label: t('admin.support.helpTitle'),\n                            label_default: 'Help link:',\n                            help_text: t('admin.support.helpDesc'),\n                            help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.ReportAProblemLink',\n                            label: t('admin.support.problemTitle'),\n                            label_default: 'Report a Problem link:',\n                            help_text: t('admin.support.problemDesc'),\n                            help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'SupportSettings.SupportEmail',\n                            label: t('admin.support.emailTitle'),\n                            label_default: 'Support Email:',\n                            help_text: t('admin.support.emailHelp'),\n                            help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'SupportSettings.CustomTermsOfServiceEnabled',\n                            label: 'admin.support.enableTermsOfServiceTitle',\n                            label_default: 'Enable Custom Terms of Service (Beta)',\n                            help_text: 'admin.support.termsOfServiceHelp',\n                            help_text_default: 'When true, new users must accept the terms of service before accessing any Mattermost teams on desktop, web or mobile. Existing users must accept them after login or a page refresh.\\n \\nUsers on mobile do not have to accept the terms of service with mobile support scheduled for an upcoming release.',\n                            help_text_markdown: true,\n                            isHidden: needsUtils.not(needsUtils.hasLicenseFeature('CustomTermsOfService')),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_LONG_TEXT,\n                            key: 'SupportSettings.CustomTermsOfServiceText',\n                            label: 'admin.support.termsOfServiceTextTitle',\n                            label_default: 'Custom Terms of Service Text (Beta)',\n                            isDisabled: needsUtils.stateValueFalse('SupportSettings.CustomTermsOfServiceEnabled'),\n                            isHidden: needsUtils.not(needsUtils.hasLicenseFeature('CustomTermsOfService')),\n                            help_text: 'admin.support.termsOfServiceTextHelp',\n                            help_text_default: 'Text that will appear in your custom Terms of Service. Supports Markdown-formatted text.',\n                        },\n                    ],\n                },\n            },\n            native_app_links: {\n                schema: {\n                    id: 'LegalAndSupportSettings',\n                    name: t('admin.customization.nativeAppLinks'),\n                    name_default: 'Mattermost App Links',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.AppDownloadLink',\n                            label: t('admin.customization.appDownloadLinkTitle'),\n                            label_default: 'Mattermost Apps Download Page Link:',\n                            help_text: t('admin.customization.appDownloadLinkDesc'),\n                            help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to \"Download Mattermost Apps\" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.AndroidAppDownloadLink',\n                            label: t('admin.customization.androidAppDownloadLinkTitle'),\n                            label_default: 'Android App Download Link:',\n                            help_text: t('admin.customization.androidAppDownloadLinkDesc'),\n                            help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'NativeAppSettings.IosAppDownloadLink',\n                            label: t('admin.customization.iosAppDownloadLinkTitle'),\n                            label_default: 'iOS App Download Link:',\n                            help_text: t('admin.customization.iosAppDownloadLinkDesc'),\n                            help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        },\n                    ],\n                },\n            },\n        },\n        compliance: {\n        },\n        advanced: {\n            rate: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.rate.title'),\n                    name_default: 'Rate Limit Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BANNER,\n                            label: t('admin.rate.noteDescription'),\n                            label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',\n                            banner_type: 'info',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.Enable',\n                            label: t('admin.rate.enableLimiterTitle'),\n                            label_default: 'Enable Rate Limiting:',\n                            help_text: t('admin.rate.enableLimiterDescription'),\n                            help_text_default: 'When true, APIs are throttled at rates specified below.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.PerSec',\n                            label: t('admin.rate.queriesTitle'),\n                            label_default: 'Maximum Queries per Second:',\n                            placeholder: t('admin.rate.queriesExample'),\n                            placeholder_default: 'E.g.: \"10\"',\n                            help_text: t('admin.rate.queriesDescription'),\n                            help_text_default: 'Throttles API at this number of requests per second.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.MaxBurst',\n                            label: t('admin.rate.maxBurst'),\n                            label_default: 'Maximum Burst Size:',\n                            placeholder: t('admin.rate.maxBurstExample'),\n                            placeholder_default: 'E.g.: \"100\"',\n                            help_text: t('admin.rate.maxBurstDescription'),\n                            help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_NUMBER,\n                            key: 'RateLimitSettings.MemoryStoreSize',\n                            label: t('admin.rate.memoryTitle'),\n                            label_default: 'Memory Store Size:',\n                            placeholder: t('admin.rate.memoryExample'),\n                            placeholder_default: 'E.g.: \"10000\"',\n                            help_text: t('admin.rate.memoryDescription'),\n                            help_text_default: 'Maximum number of users sessions connected to the system as determined by \"Vary rate limit by remote address\" and \"Vary rate limit by HTTP header\".',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.VaryByRemoteAddr',\n                            label: t('admin.rate.remoteTitle'),\n                            label_default: 'Vary rate limit by remote address:',\n                            help_text: t('admin.rate.remoteDescription'),\n                            help_text_default: 'When true, rate limit API access by IP address.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'RateLimitSettings.VaryByUser',\n                            label: t('admin.rate.varyByUser'),\n                            label_default: 'Vary rate limit by user:',\n                            help_text: t('admin.rate.varyByUserDescription'),\n                            help_text_default: 'When true, rate limit API access by user athentication token.',\n                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'RateLimitSettings.VaryByHeader',\n                            label: t('admin.rate.httpHeaderTitle'),\n                            label_default: 'Vary rate limit by HTTP header:',\n                            placeholder: t('admin.rate.httpHeaderExample'),\n                            placeholder_default: 'E.g.: \"X-Real-IP\", \"X-Forwarded-For\"',\n                            help_text: t('admin.rate.httpHeaderDescription'),\n                            help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").',\n                            isDisabled: needsUtils.or(\n                                needsUtils.stateValueEqual('RateLimitSettings.Enable', false),\n                                needsUtils.stateValueEqual('RateLimitSettings.VaryByRemoteAddr', true),\n                            ),\n                        },\n                    ],\n                },\n            },\n            developer: {\n                schema: {\n                    id: 'ServiceSettings',\n                    name: t('admin.developer.title'),\n                    name_default: 'Developer Settings',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableTesting',\n                            label: t('admin.service.testingTitle'),\n                            label_default: 'Enable Testing Commands:',\n                            help_text: t('admin.service.testingDescription'),\n                            help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'ServiceSettings.EnableDeveloper',\n                            label: t('admin.service.developerTitle'),\n                            label_default: 'Enable Developer Mode: ',\n                            help_text: t('admin.service.developerDesc'),\n                            help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'ServiceSettings.AllowedUntrustedInternalConnections',\n                            label: t('admin.service.internalConnectionsTitle'),\n                            label_default: 'Allow untrusted internal connections to: ',\n                            placeholder: t('admin.service.internalConnectionsEx'),\n                            placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',\n                            help_text: t('admin.service.internalConnectionsDesc'),\n                            help_text_default: 'In testing environments, such as when developing integrations locally on a development machine, use this setting to specify domains, IP addresses, or CIDR notations to allow internal connections. Separate two or more domains with spaces. **Not recommended for use in production**, since this can allow a user to extract confidential data from your server or internal network.\\n \\nBy default, user-supplied URLs such as those used for Open Graph metadata, webhooks, or slash commands will not be allowed to connect to reserved IP addresses including loopback or link-local addresses used for internal networks. Push notification, OAuth 2.0 and WebRTC server URLs are trusted and not affected by this setting.',\n                            help_text_markdown: true,\n                        },\n                    ],\n                },\n            },\n            metrics: {\n                schema: {\n                    id: 'MetricsSettings',\n                    name: t('admin.advance.metrics'),\n                    name_default: 'Performance Monitoring',\n                    settings: [\n                        {\n                            type: Constants.SettingsTypes.TYPE_BOOL,\n                            key: 'MetricsSettings.Enable',\n                            label: t('admin.metrics.enableTitle'),\n                            label_default: 'Enable Performance Monitoring:',\n                            help_text: t('admin.metrics.enableDescription'),\n                            help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see [documentation](!http://docs.mattermost.com/deployment/metrics.html) to learn more about configuring performance monitoring for Mattermost.',\n                            help_text_markdown: true,\n                        },\n                        {\n                            type: Constants.SettingsTypes.TYPE_TEXT,\n                            key: 'MetricsSettings.ListenAddress',\n                            label: t('admin.metrics.listenAddressTitle'),\n                            label_default: 'Listen Address:',\n                            placeholder: t('admin.metrics.listenAddressEx'),\n                            placeholder_default: 'E.g.: \":8067\"',\n                            help_text: t('admin.metrics.listenAddressDesc'),\n                            help_text_default: 'The address the server will listen on to expose performance metrics.',\n                        },\n                    ],\n                },\n            },\n        },\n    },\n    other: {\n        license: {\n            schema: {\n                id: 'LicenseSettings',\n                component: LicenseSettings,\n            },\n        },\n        audits: {\n            schema: {\n                id: 'Audits',\n                component: Audits,\n            },\n        },\n    },\n};\n\nt('admin.field_names.allowBannerDismissal');\nt('admin.field_names.bannerColor');\nt('admin.field_names.bannerText');\nt('admin.field_names.bannerTextColor');\nt('admin.field_names.enableBanner');\nt('admin.field_names.enableCommands');\nt('admin.field_names.enableConfirmNotificationsToChannel');\nt('admin.field_names.enableIncomingWebhooks');\nt('admin.field_names.enableOAuthServiceProvider');\nt('admin.field_names.enableOutgoingWebhooks');\nt('admin.field_names.enablePostIconOverride');\nt('admin.field_names.enablePostUsernameOverride');\nt('admin.field_names.enableUserAccessTokens');\nt('admin.field_names.enableUserCreation');\nt('admin.field_names.maxChannelsPerTeam');\nt('admin.field_names.maxNotificationsPerChannel');\nt('admin.field_names.maxUsersPerTeam');\nt('admin.field_names.postEditTimeLimit');\nt('admin.field_names.restrictCreationToDomains');\nt('admin.field_names.restrictDirectMessage');\nt('admin.field_names.teammateNameDisplay');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport SystemAnalytics from './system_analytics.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n    };\n}\n\nexport default connect(mapStateToProps)(SystemAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport AnalyticsStore from 'stores/analytics_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport DoughnutChart from '../doughnut_chart.jsx';\nimport LineChart from '../line_chart.jsx';\nimport StatisticCount from '../statistic_count.jsx';\n\nimport {\n    formatPostsPerDayData,\n    formatUsersWithPostsPerDayData,\n    formatChannelDoughtnutData,\n    formatPostDoughtnutData,\n} from '../format.jsx';\n\nconst StatTypes = Constants.StatTypes;\n\nexport default class SystemAnalytics extends React.Component {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {stats: AnalyticsStore.getAllSystem()};\n    }\n\n    componentDidMount() {\n        AnalyticsStore.addChangeListener(this.onChange);\n\n        AdminActions.getStandardAnalytics();\n        AdminActions.getPostsPerDayAnalytics();\n        AdminActions.getUsersPerDayAnalytics();\n\n        if (this.props.isLicensed) {\n            AdminActions.getAdvancedAnalytics();\n        }\n    }\n\n    componentWillUnmount() {\n        AnalyticsStore.removeChangeListener(this.onChange);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!Utils.areObjectsEqual(nextState.stats, this.state.stats)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    onChange = () => {\n        this.setState({stats: AnalyticsStore.getAllSystem()});\n    }\n\n    render() {\n        const stats = this.state.stats;\n        const isLicensed = this.props.isLicensed;\n        const skippedIntensiveQueries = stats[StatTypes.TOTAL_POSTS] === -1;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner;\n        let postCount;\n        let postTotalGraph;\n        let activeUserGraph;\n        if (skippedIntensiveQueries) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.skippedIntensiveQueries'\n                            defaultMessage='To maximize performance, some statistics are disabled. You can [re-enable them in config.json](!https://docs.mattermost.com/administration/statistics.html).'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            postCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            activeUserGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        let advancedStats;\n        let advancedGraphs;\n        let sessionCount;\n        let commandCount;\n        let incomingCount;\n        let outgoingCount;\n        if (this.props.isLicensed) {\n            sessionCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalSessions'\n                            defaultMessage='Total Sessions'\n                        />\n                    }\n                    icon='fa-signal'\n                    count={stats[StatTypes.TOTAL_SESSIONS]}\n                />\n            );\n\n            commandCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalCommands'\n                            defaultMessage='Total Commands'\n                        />\n                    }\n                    icon='fa-terminal'\n                    count={stats[StatTypes.TOTAL_COMMANDS]}\n                />\n            );\n\n            incomingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalIncomingWebhooks'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-down'\n                    count={stats[StatTypes.TOTAL_IHOOKS]}\n                />\n            );\n\n            outgoingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalOutgoingWebhooks'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-up'\n                    count={stats[StatTypes.TOTAL_OHOOKS]}\n                />\n            );\n\n            advancedStats = (\n                <div>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalWebsockets'\n                                defaultMessage='WebSocket Conns'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_WEBSOCKET_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalMasterDbConnections'\n                                defaultMessage='Master DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_MASTER_DB_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalReadDbConnections'\n                                defaultMessage='Replica DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_READ_DB_CONNECTIONS]}\n                    />\n                </div>\n            );\n\n            const channelTypeData = formatChannelDoughtnutData(stats[StatTypes.TOTAL_PUBLIC_CHANNELS], stats[StatTypes.TOTAL_PRIVATE_GROUPS]);\n            const postTypeData = formatPostDoughtnutData(stats[StatTypes.TOTAL_FILE_POSTS], stats[StatTypes.TOTAL_HASHTAG_POSTS], stats[StatTypes.TOTAL_POSTS]);\n\n            let postTypeGraph;\n            if (stats[StatTypes.TOTAL_POSTS] !== -1) {\n                postTypeGraph = (\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.postTypes'\n                                defaultMessage='Posts, Files and Hashtags'\n                            />\n                        }\n                        data={postTypeData}\n                        width={300}\n                        height={225}\n                    />\n                );\n            }\n\n            advancedGraphs = (\n                <div className='row'>\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.channelTypes'\n                                defaultMessage='Channel Types'\n                            />\n                        }\n                        data={channelTypeData}\n                        width={300}\n                        height={225}\n                    />\n                    {postTypeGraph}\n                </div>\n            );\n        }\n\n        const userCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalUsers'\n                        defaultMessage='Total Active Users'\n                    />\n                }\n                icon='fa-user'\n                count={stats[StatTypes.TOTAL_USERS]}\n            />\n        );\n\n        const teamCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalTeams'\n                        defaultMessage='Total Teams'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.TOTAL_TEAMS]}\n            />\n        );\n\n        const channelCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalChannels'\n                        defaultMessage='Total Channels'\n                    />\n                }\n                icon='fa-globe'\n                count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS] + stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n            />\n        );\n\n        const dailyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.dailyActiveUsers'\n                        defaultMessage='Daily Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.DAILY_ACTIVE_USERS]}\n            />\n        );\n\n        const monthlyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.monthlyActiveUsers'\n                        defaultMessage='Monthly Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.MONTHLY_ACTIVE_USERS]}\n            />\n        );\n\n        let firstRow;\n        let secondRow;\n        if (isLicensed && skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {sessionCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (isLicensed && !skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {sessionCount}\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (!isLicensed) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n        }\n\n        const thirdRow = (\n            <div>\n                {dailyActiveUsers}\n                {monthlyActiveUsers}\n            </div>\n        );\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='analytics.system.title'\n                        defaultMessage='System Statistics'\n                    />\n                </h3>\n                {banner}\n                <div className='row'>\n                    {firstRow}\n                    {secondRow}\n                    {thirdRow}\n                    {advancedStats}\n                </div>\n                {advancedGraphs}\n                {postTotalGraph}\n                {activeUserGraph}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class DoughnutChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    chart = null;\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            this.initChart(true);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.chart && this.refs.canvas) {\n            this.chart.destroy();\n        }\n    }\n\n    initChart = (update) => {\n        if (!this.refs.canvas) {\n            return;\n        }\n        var el = ReactDOM.findDOMNode(this.refs.canvas);\n        var ctx = el.getContext('2d');\n        this.chart = new Chart(ctx, {type: 'doughnut', data: this.props.data, options: {}}); //eslint-disable-line new-cap\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    render() {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {getProfilesInTeam} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\n\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport TeamAnalytics from './team_analytics.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nfunction mapStateToProps(state) {\n    const teams = getTeamsList(state);\n    const teamId = BrowserStore.getGlobalItem(LAST_ANALYTICS_TEAM, null);\n    const initialTeam = state.entities.teams.teams[teamId] || (teams.length > 0 ? teams[0] : null);\n\n    return {\n        initialTeam,\n        locale: getCurrentLocale(state),\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getProfilesInTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport AnalyticsStore from 'stores/analytics_store.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {StatTypes} from 'utils/constants.jsx';\nimport Banner from 'components/admin_console/banner.jsx';\nimport LineChart from 'components/analytics/line_chart.jsx';\nimport StatisticCount from 'components/analytics/statistic_count.jsx';\nimport TableChart from 'components/analytics/table_chart.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport {formatPostsPerDayData, formatUsersWithPostsPerDayData} from '../format.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nexport default class TeamAnalytics extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Initial team to load analytics for\n         */\n        initialTeam: PropTypes.object,\n\n        /**\n         * The locale of the current user\n          */\n        locale: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get users in a team\n             */\n            getProfilesInTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const teamId = props.initialTeam ? props.initialTeam.id : '';\n\n        this.state = {\n            team: props.initialTeam,\n            stats: AnalyticsStore.getAllTeam(teamId),\n            recentlyActiveUsers: [],\n            newUsers: [],\n        };\n    }\n\n    componentDidMount() {\n        AnalyticsStore.addChangeListener(this.onChange);\n\n        if (this.state.team) {\n            this.getData(this.state.team.id);\n        }\n\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (nextState.team && nextState.team !== this.state.team) {\n            this.getData(nextState.team.id);\n        }\n    }\n\n    getData = async (id) => {\n        AdminActions.getStandardAnalytics(id);\n        AdminActions.getPostsPerDayAnalytics(id);\n        AdminActions.getUsersPerDayAnalytics(id);\n        const {data: recentlyActiveUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'last_activity_at');\n        const {data: newUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'create_at');\n\n        this.setState({\n            recentlyActiveUsers,\n            newUsers,\n        });\n    }\n\n    componentWillUnmount() {\n        AnalyticsStore.removeChangeListener(this.onChange);\n    }\n\n    onChange = () => {\n        const teamId = this.state.team ? this.state.team.id : '';\n        this.setState({\n            stats: AnalyticsStore.getAllTeam(teamId),\n        });\n    }\n\n    handleTeamChange = (e) => {\n        const teamId = e.target.value;\n\n        let team;\n        this.props.teams.forEach((t) => {\n            if (t.id === teamId) {\n                team = t;\n            }\n        });\n\n        this.setState({\n            team,\n        });\n\n        BrowserStore.setGlobalItem(LAST_ANALYTICS_TEAM, teamId);\n    }\n\n    render() {\n        if (this.props.teams.length === 0 || !this.state.team || !this.state.stats) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.state.team == null) {\n            return (\n                <Banner\n                    description={\n                        <FormattedMessage\n                            id='analytics.team.noTeams'\n                            defaultMessage='There are no teams on this server for which to view statistics.'\n                        />\n                    }\n                />\n            );\n        }\n\n        const stats = this.state.stats;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner = (\n            <div className='banner'>\n                <div className='banner__content'>\n                    <FormattedMessage\n                        id='analytics.system.info'\n                        defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team.'\n                    />\n                </div>\n            </div>\n        );\n\n        let totalPostsCount;\n        let postTotalGraph;\n        let userActiveGraph;\n        if (stats[StatTypes.TOTAL_POSTS] === -1) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.infoAndSkippedIntensiveQueries'\n                            defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team. \\n \\n Some statistics have been omitted because they put too much load on the system to calculate. See [https://docs.mattermost.com/administration/statistics.html](!https://docs.mattermost.com/administration/statistics.html) for more details.'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            totalPostsCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.team.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            userActiveGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        const recentActiveUsers = formatRecentUsersData(this.state.recentlyActiveUsers, this.props.locale);\n        const newlyCreatedUsers = formatNewUsersData(this.state.newUsers, this.props.locale);\n\n        const teams = this.props.teams.sort((a, b) => {\n            const aName = a.display_name.toUpperCase();\n            const bName = b.display_name.toUpperCase();\n            if (aName === bName) {\n                return 0;\n            }\n            if (aName > bName) {\n                return 1;\n            }\n            return -1;\n        }).map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <div className='admin-console-header team-statistics__header-row'>\n                    <div className='team-statistics__header'>\n                        <h3 className='admin-console-header'>\n                            <FormattedMessage\n                                id='analytics.team.title'\n                                defaultMessage='Team Statistics for {team}'\n                                values={{\n                                    team: this.state.team.display_name,\n                                }}\n                            />\n                        </h3>\n                    </div>\n                    <div className='team-statistics__team-filter'>\n                        <select\n                            className='form-control team-statistics__team-filter__dropdown'\n                            onChange={this.handleTeamChange}\n                            value={this.state.team.id}\n                        >\n                            {teams}\n                        </select>\n                    </div>\n                </div>\n                {banner}\n                <div className='row'>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalUsers'\n                                defaultMessage='Total Active Users'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_USERS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.publicChannels'\n                                defaultMessage='Public Channels'\n                            />\n                        }\n                        icon='fa-users'\n                        count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.privateGroups'\n                                defaultMessage='Private Channels'\n                            />\n                        }\n                        icon='fa-globe'\n                        count={stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n                    />\n                    {totalPostsCount}\n                </div>\n                {postTotalGraph}\n                {userActiveGraph}\n                <div className='row'>\n                    <TableChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.recentUsers'\n                                defaultMessage='Recent Active Users'\n                            />\n                        }\n                        data={recentActiveUsers}\n                    />\n                    <TableChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.newlyCreated'\n                                defaultMessage='Newly Created Users'\n                            />\n                        }\n                        data={newlyCreatedUsers}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function formatRecentUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.last_activity_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n\nexport function formatNewUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.create_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\n\nimport Constants from 'utils/constants.jsx';\n\nexport default class TableChart extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Table title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Table data\n         */\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                name: PropTypes.string.isRequired,\n                tip: PropTypes.string.isRequired,\n                value: PropTypes.node.isRequired,\n            })\n        ).isRequired,\n    };\n\n    render() {\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count recent-active-users'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        <table>\n                            <tbody>\n                                {\n                                    this.props.data.map((item) => {\n                                        const tooltip = (\n                                            <Tooltip id={'tip-table-entry-' + item.name}>\n                                                {item.tip}\n                                            </Tooltip>\n                                        );\n\n                                        return (\n                                            <tr key={'table-entry-' + item.name}>\n                                                <td>\n                                                    <OverlayTrigger\n                                                        trigger={['hover', 'focus']}\n                                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                                        placement='top'\n                                                        overlay={tooltip}\n                                                    >\n                                                        <time>\n                                                            {item.name}\n                                                        </time>\n                                                    </OverlayTrigger>\n                                                </td>\n                                                <td>\n                                                    {item.value}\n                                                </td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPluginStatuses, removePlugin, uploadPlugin, enablePlugin, disablePlugin} from 'mattermost-redux/actions/admin';\n\nimport PluginManagement from './plugin_management.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        plugins: state.entities.admin.plugins,\n        pluginStatuses: state.entities.admin.pluginStatuses,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            uploadPlugin,\n            removePlugin,\n            getPluginStatuses,\n            enablePlugin,\n            disablePlugin,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PluginManagement);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport PluginState from 'mattermost-redux/constants/plugins';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Banner from 'components/admin_console/banner.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst PluginItemState = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.not_running'\n                defaultMessage='Not running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.starting'\n                defaultMessage='Starting'\n            />\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.running'\n                defaultMessage='Running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_start'\n                defaultMessage='Failed to start'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_stay_running'\n                defaultMessage='Crashing'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.stopping'\n                defaultMessage='Stopping'\n            />\n        );\n    default:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.unknown'\n                defaultMessage='Unknown'\n            />\n        );\n    }\n};\n\nPluginItemState.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItemStateDescription = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-ban'/>\n                <FormattedMessage\n                    id='admin.plugin.state.not_running.description'\n                    defaultMessage='This plugin is not enabled.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.starting.description'\n                    defaultMessage='This plugin is starting.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-check'/>\n                <FormattedMessage\n                    id='admin.plugin.state.running.description'\n                    defaultMessage='This plugin is running.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_start.description'\n                    defaultMessage='This plugin failed to start. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_stay_running.description'\n                    defaultMessage='This plugin crashed multiple times and is no longer running. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.stopping.description'\n                    defaultMessage='This plugin is stopping.'\n                />\n            </div>\n        );\n    default:\n        return null;\n    }\n};\n\nPluginItemStateDescription.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItem = ({\n    pluginStatus,\n    removing,\n    handleEnable,\n    handleDisable,\n    handleRemove,\n    showInstances,\n    hasSettings,\n}) => {\n    let activateButton;\n    const activating = pluginStatus.state === PluginState.PLUGIN_STATE_STARTING;\n    const deactivating = pluginStatus.state === PluginState.PLUGIN_STATE_STOPPING;\n    if (pluginStatus.active) {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={deactivating}\n                onClick={handleDisable}\n            >\n                {deactivating ?\n                    <FormattedMessage\n                        id='admin.plugin.disabling'\n                        defaultMessage='Disabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.disable'\n                        defaultMessage='Disable'\n                    />\n                }\n            </a>\n        );\n    } else {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={activating}\n                onClick={handleEnable}\n            >\n                {activating ?\n                    <FormattedMessage\n                        id='admin.plugin.enabling'\n                        defaultMessage='Enabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.enable'\n                        defaultMessage='Enable'\n                    />\n                }\n            </a>\n        );\n    }\n\n    let settingsButton = null;\n    if (hasSettings) {\n        settingsButton = (\n            <span>\n                {' - '}\n                <Link\n                    to={'/admin_console/plugins/custom/' + pluginStatus.id}\n                >\n                    <FormattedMessage\n                        id='admin.plugin.settingsButton'\n                        defaultMessage='Settings'\n                    />\n                </Link>\n            </span>\n        );\n    }\n\n    let removeButton;\n    if (!pluginStatus.is_prepackaged) {\n        let removeButtonText;\n        if (removing) {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.removing'\n                    defaultMessage='Removing...'\n                />\n            );\n        } else {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.remove'\n                    defaultMessage='Remove'\n                />\n            );\n        }\n        removeButton = (\n            <span>\n                {' - '}\n                <a\n                    data-plugin-id={pluginStatus.id}\n                    disabled={removing}\n                    onClick={handleRemove}\n                >\n                    {removeButtonText}\n                </a>\n            </span>\n        );\n    }\n\n    let description;\n    if (pluginStatus.description) {\n        description = (\n            <div className='padding-top'>\n                {pluginStatus.description}\n            </div>\n        );\n    }\n\n    let prepackagedLabel;\n    if (pluginStatus.is_prepackaged) {\n        prepackagedLabel = (\n            <span>\n                {', '}\n                <FormattedMessage\n                    id='admin.plugin.prepackaged'\n                    defaultMessage='pre-packaged'\n                />\n            </span>\n        );\n    }\n\n    const notices = [];\n    if (pluginStatus.instances.some((instance) => instance.version !== pluginStatus.version)) {\n        notices.push(\n            <div\n                key='multiple-versions'\n                className='alert alert-warning'\n            >\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.multiple_versions_warning'\n                    defaultMessage='There are multiple versions of this plugin installed across your cluster. Re-install this plugin to ensure it works consistently.'\n                />\n            </div>\n        );\n    }\n\n    notices.push(\n        <PluginItemStateDescription\n            key='state-description'\n            state={pluginStatus.state}\n        />\n    );\n\n    const instances = pluginStatus.instances.slice();\n    instances.sort((a, b) => {\n        if (a.cluster_id < b.cluster_id) {\n            return -1;\n        } else if (a.cluster_id > b.cluster_id) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    let clusterSummary;\n    if (showInstances) {\n        clusterSummary = (\n            <div className='padding-top x2 padding-bottom'>\n                <div className='row'>\n                    <div className='col-md-6'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.cluster_instance'\n                                defaultMessage='Cluster Instance'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.version_title'\n                                defaultMessage='Version'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.state'\n                                defaultMessage='State'\n                            />\n                        </strong>\n                    </div>\n                </div>\n                {instances.map((instance) => (\n                    <div\n                        key={instance.cluster_id}\n                        className='row'\n                    >\n                        <div className='col-md-6'>\n                            {instance.cluster_id}\n                        </div>\n                        <div className='col-md-3'>\n                            {instance.version}\n                        </div>\n                        <div className='col-md-3'>\n                            <PluginItemState state={instance.state}/>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <div>\n                <strong>{pluginStatus.name}</strong>\n                {' ('}\n                {pluginStatus.id}\n                {' - '}\n                {pluginStatus.version}\n                {prepackagedLabel}\n                {')'}\n            </div>\n            {description}\n            <div className='padding-top'>\n                {activateButton}\n                {removeButton}\n                {settingsButton}\n            </div>\n            <div>\n                {notices}\n            </div>\n            <div>\n                {clusterSummary}\n            </div>\n            <hr/>\n        </div>\n    );\n};\n\nPluginItem.propTypes = {\n    pluginStatus: PropTypes.object.isRequired,\n    removing: PropTypes.bool.isRequired,\n    handleEnable: PropTypes.func.isRequired,\n    handleDisable: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    showInstances: PropTypes.bool.isRequired,\n    hasSettings: PropTypes.bool.isRequired,\n};\n\nexport default class PluginManagement extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        pluginStatuses: PropTypes.object.isRequired,\n        plugins: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            uploadPlugin: PropTypes.func.isRequired,\n            removePlugin: PropTypes.func.isRequired,\n            getPluginStatuses: PropTypes.func.isRequired,\n            enablePlugin: PropTypes.func.isRequired,\n            disablePlugin: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPluginStatuses().then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    handleChange = () => {\n        const element = this.refs.fileInput;\n        if (element.files.length > 0) {\n            this.setState({fileSelected: true, fileName: element.files[0].name});\n        }\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const element = this.refs.fileInput;\n        if (element.files.length === 0) {\n            return;\n        }\n        const file = element.files[0];\n\n        this.setState({uploading: true});\n\n        const {error} = await this.props.actions.uploadPlugin(file);\n        this.setState({fileSelected: false, fileName: null, uploading: false, serverError: null});\n        Utils.clearFileInput(element);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.activate.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.activate', 'Unable to upload the plugin. It may conflict with another plugin on your server.')});\n            } else if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n        }\n    }\n\n    handleRemove = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n        this.setState({removing: pluginId});\n\n        const {error} = await this.props.actions.removePlugin(pluginId);\n        this.setState({removing: null});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleEnable = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.enablePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleDisable = async (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.disablePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    render() {\n        if (!this.props.config.PluginSettings.Enable) {\n            return (\n                <div className='wrapper--fixed'>\n                    <h3 className='admin-console-header'>\n                        <FormattedMessage\n                            id='admin.plugin.management.title'\n                            defaultMessage='Management'\n                        />\n                    </h3>\n                    <Banner\n                        title={<div/>}\n                        description={\n                            <FormattedMarkdownMessage\n                                id='admin.plugin.management.banner'\n                                defaultMessage='Plugins are disabled on your server. To enable them, go to **Plugins > Configuration**.'\n                            />\n                        }\n                    />\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error half'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        }\n\n        let uploadButtonText;\n        if (this.state.uploading) {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.uploading'\n                    defaultMessage='Uploading...'\n                />\n            );\n        } else {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.upload'\n                    defaultMessage='Upload'\n                />\n            );\n        }\n\n        let pluginsList;\n        let pluginsContainer;\n        const plugins = Object.values(this.props.pluginStatuses);\n        if (this.state.loading) {\n            pluginsList = <LoadingScreen/>;\n        } else if (plugins.length === 0) {\n            pluginsContainer = (\n                <FormattedMessage\n                    id='admin.plugin.no_plugins'\n                    defaultMessage='No installed plugins.'\n                />\n            );\n        } else {\n            const showInstances = plugins.some((pluginStatus) => pluginStatus.instances.length > 1);\n            plugins.sort((a, b) => {\n                if (a.name < b.name) {\n                    return -1;\n                } else if (a.name > b.name) {\n                    return 1;\n                }\n\n                return 0;\n            });\n\n            pluginsList = plugins.map((pluginStatus) => (\n                <PluginItem\n                    key={pluginStatus.id}\n                    pluginStatus={pluginStatus}\n                    removing={this.state.removing === pluginStatus.id}\n                    handleEnable={this.handleEnable}\n                    handleDisable={this.handleDisable}\n                    handleRemove={this.handleRemove}\n                    showInstances={showInstances}\n                    hasSettings={Boolean(this.props.plugins[pluginStatus.id] && this.props.plugins[pluginStatus.id].settings_schema)}\n                />\n            ));\n\n            pluginsContainer = (\n                <div className='alert alert-transparent'>\n                    {pluginsList}\n                </div>\n            );\n        }\n\n        const enableUploads = this.props.config.PluginSettings.EnableUploads;\n        let uploadHelpText;\n        if (enableUploads) {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDesc'\n                    defaultMessage='Upload a plugin for your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        } else {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDisabledDesc'\n                    defaultMessage='To enable plugin uploads, go to **Plugins > Configuration**. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        }\n\n        const uploadBtnClass = enableUploads ? 'btn btn-primary' : 'btn';\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.plugin.management.title'\n                        defaultMessage='Management'\n                    />\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                >\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.plugin.uploadTitle'\n                                defaultMessage='Upload Plugin: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            <div className='file__upload'>\n                                <button\n                                    className={uploadBtnClass}\n                                    disabled={!enableUploads}\n                                >\n                                    <FormattedMessage\n                                        id='admin.plugin.choose'\n                                        defaultMessage='Choose File'\n                                    />\n                                </button>\n                                <input\n                                    ref='fileInput'\n                                    type='file'\n                                    accept='.gz'\n                                    onChange={this.handleChange}\n                                    disabled={!enableUploads}\n                                />\n                            </div>\n                            <button\n                                className={btnClass}\n                                disabled={!this.state.fileSelected}\n                                onClick={this.handleSubmit}\n                            >\n                                {uploadButtonText}\n                            </button>\n                            <div className='help-text no-margin'>\n                                {fileName}\n                            </div>\n                            {serverError}\n                            <p className='help-text'>\n                                {uploadHelpText}\n                            </p>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.plugin.installedTitle'\n                                defaultMessage='Installed Plugins: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            <p className='help-text'>\n                                <FormattedHTMLMessage\n                                    id='admin.plugin.installedDesc'\n                                    defaultMessage='Installed plugins on your Mattermost server. Pre-packaged plugins are installed by default, and can be disabled but not removed.'\n                                />\n                            </p>\n                            <br/>\n                            {pluginsContainer}\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport CustomPluginSettings from './custom_plugin_settings.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const pluginId = ownProps.match.params.plugin_id;\n    const plugin = state.entities.admin.plugins[pluginId];\n    const settings = plugin && plugin.settings_schema && plugin.settings_schema.settings && plugin.settings_schema.settings.map((setting) => {\n        return {...setting, label: setting.display_name};\n    });\n    const translate = (plugin && plugin.translate) || false;\n    return {\n        schema: plugin ? {...plugin.settings_schema, id: plugin.id, name: plugin.name, settings, translate} : null,\n        roles: getRoles(state),\n    };\n}\n\nexport default connect(mapStateToProps)(CustomPluginSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings.jsx';\n\nexport default class CustomPluginSettings extends SchemaAdminSettings {\n    constructor(props) {\n        super(props);\n        this.isPlugin = true;\n        this.getStateFromConfig = CustomPluginSettings.getStateFromConfig;\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.schema && props.schema.id !== state.prevSchemaId) {\n            return {\n                prevSchemaId: props.schema.id,\n                saveNeeded: false,\n                saving: false,\n                serverError: null,\n                errorTooltip: false,\n                ...CustomPluginSettings.getStateFromConfig(props.config, props.schema, props.roles),\n            };\n        }\n        return null;\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            if (!config.PluginSettings.Plugins[schema.id]) {\n                config.PluginSettings.Plugins[schema.id] = {};\n            }\n\n            const configSettings = config.PluginSettings.Plugins[schema.id];\n\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                const lowerKey = setting.key.toLowerCase();\n                const value = this.state[lowerKey] || setting.default;\n                if (value == null) {\n                    Reflect.deleteProperty(configSettings, lowerKey);\n                } else {\n                    configSettings[lowerKey] = value;\n                }\n            });\n        }\n\n        return config;\n    }\n\n    static getStateFromConfig(config, schema) {\n        const state = {};\n\n        if (schema) {\n            const configSettings = config.PluginSettings.Plugins[schema.id] || {};\n\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                const lowerKey = setting.key.toLowerCase();\n                state[lowerKey] = configSettings[lowerKey] == null ? setting.default : configSettings[lowerKey];\n            });\n        }\n\n        return state;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAudits} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport Audits from './audits.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n        audits: Object.values(Selectors.getAudits(state)),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Audits);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ComplianceReports from 'components/admin_console/compliance_reports';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class Audits extends React.PureComponent {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Array of audits to render\n         */\n        audits: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch audits\n             */\n            getAudits: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingAudits: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingAudits: true});\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (!this.props.isLicensed) {\n            return <div/>;\n        }\n\n        if (this.state.loadingAudits) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <div style={style.auditTable}>\n                    <AuditTable\n                        audits={this.props.audits}\n                        showUserId={true}\n                        showIp={true}\n                        showSession={true}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <ComplianceReports/>\n\n                <div className='panel audit-panel'>\n                    <h3 className='admin-console-header'>\n                        <FormattedMessage\n                            id='admin.audits.title'\n                            defaultMessage='User Activity Logs'\n                        />\n                        <button\n                            type='submit'\n                            className='btn btn-link pull-right'\n                            onClick={this.reload}\n                        >\n                            <i\n                                className='fa fa-refresh'\n                                title={localizeMessage('generic_icons.reload', 'Reload Icon')}\n                            />\n                            <FormattedMessage\n                                id='admin.audits.reload'\n                                defaultMessage='Reload User Activity Logs'\n                            />\n                        </button>\n                    </h3>\n                    <div className='audit-panel__table'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    auditTable: {margin: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createComplianceReport, getComplianceReports} from 'mattermost-redux/actions/admin';\nimport {getComplianceReports as selectComplianceReports, getConfig} from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport ComplianceReports from './compliance_reports.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    let enabled = false;\n    const config = getConfig(state);\n    if (config && config.ComplianceSettings) {\n        enabled = config.ComplianceSettings.Enable;\n    }\n\n    let serverError;\n    const error = state.requests.admin.createCompliance.error;\n    if (error) {\n        serverError = error.message;\n    }\n\n    const reports = Object.values(selectComplianceReports(state)).sort((a, b) => {\n        return b.create_at - a.create_at;\n    });\n\n    return {\n        isLicensed,\n        enabled,\n        reports,\n        serverError,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getComplianceReports,\n            createComplianceReport,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplianceReports);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ComplianceReports extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set if compliance reports are licensed\n         */\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Set if compliance reports are enabled in the config\n         */\n        enabled: PropTypes.bool.isRequired,\n\n        /*\n         * Array of reports to render\n         */\n        reports: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Error message to display\n         */\n        serverError: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get compliance reports\n             */\n            getComplianceReports: PropTypes.func.isRequired,\n\n            /*\n             * Function to save compliance reports\n             */\n            createComplianceReport: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingReports: true,\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return;\n        }\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingReports: true});\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    runReport = (e) => {\n        e.preventDefault();\n\n        this.setState({runningReport: true});\n\n        const job = {};\n        job.desc = this.refs.desc.value;\n        job.emails = this.refs.emails.value;\n        job.keywords = this.refs.keywords.value;\n        job.start_at = Date.parse(this.refs.from.value);\n        job.end_at = Date.parse(this.refs.to.value);\n\n        this.props.actions.createComplianceReport(job).then(\n            ({data}) => {\n                if (data) {\n                    this.refs.emails.value = '';\n                    this.refs.keywords.value = '';\n                    this.refs.desc.value = '';\n                    this.refs.from.value = '';\n                    this.refs.to.value = '';\n                }\n                this.setState({runningReport: false});\n            }\n        );\n    }\n\n    getDateTime(millis) {\n        const date = new Date(millis);\n        return (\n            <span style={style.date}>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return <div/>;\n        }\n\n        let content = null;\n        if (this.state.loadingReports) {\n            content = <LoadingScreen/>;\n        } else {\n            var list = [];\n\n            for (var i = 0; i < this.props.reports.length; i++) {\n                const report = this.props.reports[i];\n\n                let params = '';\n                if (report.type === 'adhoc') {\n                    params = (\n                        <span>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />{' '}{this.getDateTime(report.start_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />{' '}{this.getDateTime(report.end_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />{' '}{report.emails}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />{' '}{report.keywords}\n                        </span>);\n                }\n\n                let download = '';\n                let status = '';\n                if (report.status === 'finished') {\n                    download = (\n                        <a href={`${Client4.getBaseRoute()}/compliance/reports/${report.id}/download`}>\n                            <FormattedMessage\n                                id='admin.compliance_table.download'\n                                defaultMessage='Download'\n                            />\n                        </a>\n                    );\n\n                    status = (\n                        <span style={style.greenStatus}>{report.status}</span>\n                    );\n                } else if (report.status === 'failed') {\n                    status = (\n                        <span style={style.redStatus}>{report.status}</span>\n                    );\n                }\n\n                let user = report.user_id;\n                const profile = UserStore.getProfile(report.user_id);\n                if (profile) {\n                    user = profile.email;\n                }\n\n                list[i] = (\n                    <tr key={report.id}>\n                        <td style={style.dataCell}>{download}</td>\n                        <td>{this.getDateTime(report.create_at)}</td>\n                        <td>{status}</td>\n                        <td>{report.count}</td>\n                        <td>{report.type}</td>\n                        <td style={style.dataCell}>{report.desc}</td>\n                        <td>{user}</td>\n                        <td style={style.dataCell}>{params}</td>\n                    </tr>\n                );\n            }\n\n            content = (\n                <div style={style.content}>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.timestamp'\n                                        defaultMessage='Timestamp'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.status'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.records'\n                                        defaultMessage='Records'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.type'\n                                        defaultMessage='Type'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.desc'\n                                        defaultMessage='Description'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.userId'\n                                        defaultMessage='Requested By'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.params'\n                                        defaultMessage='Params'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.props.serverError) {\n            serverError = (\n                <div\n                    className='form-group has-error'\n                    style={style.serverError}\n                >\n                    <label className='control-label'>{this.props.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div className='panel compliance-panel'>\n                <h3>\n                    <FormattedMessage\n                        id='admin.compliance_reports.title'\n                        defaultMessage='Compliance Reports'\n                    />\n                </h3>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.desc'\n                                defaultMessage='Job Name:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='desc'\n                            ref='desc'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.desc_placeholder', 'E.g. \"Audit 445 for HR\"')}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='from'\n                            ref='from'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.from_placeholder', 'E.g. \"2016-03-11\"')}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='to'\n                            ref='to'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.to_placeholder', 'E.g. \"2016-03-15\"')}\n                        />\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='emails'\n                            ref='emails'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.emails_placeholder', 'E.g. \"bill@example.com, bob@example.com\"')}\n                        />\n                    </div>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />\n                        </label>\n                        <input\n                            type='text'\n                            className='form-control'\n                            id='keywords'\n                            ref='keywords'\n                            placeholder={Utils.localizeMessage('admin.compliance_reports.keywords_placeholder', 'E.g. \"shorting stock\"')}\n                        />\n                    </div>\n                </div>\n                <div className='clearfix'>\n                    <button\n                        id='run-button'\n                        type='submit'\n                        className='btn btn-primary'\n                        onClick={this.runReport}\n                    >\n                        <FormattedMessage\n                            id='admin.compliance_reports.run'\n                            defaultMessage='Run Compliance Report'\n                        />\n                    </button>\n                </div>\n                {serverError}\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        disabled={this.state.runningReport}\n                        onClick={this.reload}\n                    >\n                        <i\n                            className='fa fa-refresh'\n                            title={Utils.localizeMessage('generic_icons.reload', 'Reload Icon')}\n                        />\n                        <FormattedMessage\n                            id='admin.compliance_reports.reload'\n                            defaultMessage='Reload Completed Compliance Reports'\n                        />\n                    </button>\n                </div>\n                <div className='compliance-panel__table'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    content: {margin: 10},\n    greenStatus: {color: 'green'},\n    redStatus: {color: 'red'},\n    dataCell: {whiteSpace: 'nowrap'},\n    date: {whiteSpace: 'nowrap'},\n    serverError: {marginTop: '10px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils';\n\nimport Setting from './setting';\n\nexport default class CustomUrlSchemesSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            value: PropTypes.array.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.arrayToString(props.value),\n        };\n    }\n\n    stringToArray = (str) => {\n        return str.split(',').map((s) => s.trim()).filter(Boolean);\n    };\n\n    arrayToString = (arr) => {\n        return arr.join(',');\n    };\n\n    handleChange = (e) => {\n        const valueAsArray = this.stringToArray(e.target.value);\n\n        this.props.onChange(this.props.id, valueAsArray);\n\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    render() {\n        const label = Utils.localizeMessage('admin.customization.customUrlSchemes', 'Custom URL Schemes:');\n        const helpText = Utils.localizeMessage(\n            'admin.customization.customUrlSchemesDesc',\n            'Allows message text to link if it begins with any of the comma-separated URL schemes listed. By default, the following schemes will create links: \"http\", \"https\", \"ftp\", \"tel\", and \"mailto\".'\n        );\n        const placeholder = Utils.localizeMessage('admin.customization.customUrlSchemesPlaceholder', 'E.g.: \"git,smtp\"');\n\n        return (\n            <Setting\n                label={label}\n                helpText={helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={placeholder}\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {defineMessages, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {removeLicenseFile, uploadLicenseFile} from 'actions/admin_actions.jsx';\nimport ErrorStore from 'stores/error_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst holders = defineMessages({\n    removing: {\n        id: t('admin.license.removing'),\n        defaultMessage: 'Removing License...',\n    },\n    uploading: {\n        id: t('admin.license.uploading'),\n        defaultMessage: 'Uploading License...',\n    },\n});\n\nclass LicenseSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleRemove = this.handleRemove.bind(this);\n\n        this.state = {\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n        };\n    }\n\n    handleChange() {\n        const element = $(ReactDOM.findDOMNode(this.refs.fileInput));\n        if (element.prop('files').length > 0) {\n            this.setState({fileSelected: true, fileName: element.prop('files')[0].name});\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        const element = $(ReactDOM.findDOMNode(this.refs.fileInput));\n        if (element.prop('files').length === 0) {\n            return;\n        }\n        const file = element.prop('files')[0];\n\n        $('#upload-button').button('loading');\n\n        uploadLicenseFile(\n            file,\n            () => {\n                Utils.clearFileInput(element[0]);\n                $('#upload-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: null});\n                window.location.reload(true);\n            },\n            (error) => {\n                Utils.clearFileInput(element[0]);\n                $('#upload-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: error.message});\n            }\n        );\n    }\n\n    handleRemove(e) {\n        e.preventDefault();\n\n        $('#remove-button').button('loading');\n\n        removeLicenseFile(\n            () => {\n                $('#remove-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: null});\n                ErrorStore.clearLastError(true);\n                window.location.reload(true);\n            },\n            (error) => {\n                $('#remove-button').button('reset');\n                this.setState({fileSelected: false, fileName: null, serverError: error.message});\n            }\n        );\n    }\n\n    render() {\n        var serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        var btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let edition;\n        let licenseType;\n        let licenseKey;\n\n        const issued = Utils.displayDate(parseInt(this.props.license.IssuedAt, 10)) + ' ' + Utils.displayTime(parseInt(this.props.license.IssuedAt, 10), true);\n        const startsAt = Utils.displayDate(parseInt(this.props.license.StartsAt, 10));\n        const expiresAt = Utils.displayDate(parseInt(this.props.license.ExpiresAt, 10));\n\n        if (this.props.license.IsLicensed === 'true') {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = 'Mattermost Enterprise Edition. Enterprise features on this server have been unlocked with a license key and a valid subscription.';\n            licenseType = (\n                <div>\n                    <p>\n                        {'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.\\n\\nYour subscription details are as follows:'}\n                    </p>\n                    {`Name: ${this.props.license.Name}`}<br/>\n                    {`Company or organization name: ${this.props.license.Company}`}<br/>\n                    {`Number of users: ${this.props.license.Users}`}<br/>\n                    {`License issued: ${issued}`}<br/>\n                    {`Start date of license: ${startsAt}`}<br/>\n                    {`Expiry date of license: ${expiresAt}`}<br/>\n                    <br/>\n                    {'See also '}<a href='https://about.mattermost.com/enterprise-edition-terms/'>{'Enterprise Edition Terms of Service'}</a>{' and '}<a href='https://about.mattermost.com/privacy/'>{'Privacy Policy.'}</a>\n                </div>\n            );\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        id='remove-button'\n                        data-loading-text={'<span class=\\'fa fa-refresh icon--rotate\\' title=\\'' + Utils.localizeMessage('generic_icons.reload', 'Reload Icon') + '\\'></span> ' + this.props.intl.formatMessage(holders.removing)}\n                    >\n                        <FormattedMessage\n                            id='admin.license.keyRemove'\n                            defaultMessage='Remove Enterprise License and Downgrade Server'\n                        />\n                    </button>\n                    <br/>\n                    <br/>\n                    <p className='help-text'>\n                        {'If you migrate servers you may need to remove your license key to install it elsewhere. You can remove the key here, which will revert functionality to that of Team Edition.'}\n                    </p>\n                </div>\n            );\n        } else {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = (\n                <p>\n                    {'Mattermost Enterprise Edition. Unlock enterprise features in this software through the purchase of a subscription from '}\n                    <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='https://mattermost.com/'\n                    >\n                        {'https://mattermost.com/'}\n                    </a>\n                </p>\n            );\n\n            licenseType = 'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.';\n\n            let fileName;\n            if (this.state.fileName) {\n                fileName = this.state.fileName;\n            } else {\n                fileName = (\n                    <FormattedMessage\n                        id='admin.license.noFile'\n                        defaultMessage='No file uploaded'\n                    />\n                );\n            }\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button className='btn btn-primary'>\n                            <FormattedMessage\n                                id='admin.license.choose'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.mattermost-license'\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        id='upload-button'\n                        data-loading-text={'<span class=\\'fa fa-refresh icon--rotate\\' title=\\'' + Utils.localizeMessage('generic_icons.reload', 'Reload Icon') + '\\'></span> ' + this.props.intl.formatMessage(holders.uploading)}\n                    >\n                        <FormattedMessage\n                            id='admin.license.upload'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    <br/>\n                    {serverError}\n                    <p className='help-text no-margin'>\n                        <FormattedMarkdownMessage\n                            id='admin.license.uploadDesc'\n                            defaultMessage='Upload a license key for Mattermost Enterprise Edition to upgrade this server. [Visit us online](!http://mattermost.com) to learn more about the benefits of Enterprise Edition or to purchase a key.'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.license.title'\n                        defaultMessage='Edition and License'\n                    />\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                >\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.edition'\n                                defaultMessage='Edition: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            {edition}\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.type'\n                                defaultMessage='License: '\n                            />\n                        </label>\n                        <div className='col-sm-8'>\n                            {licenseType}\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                        >\n                            <FormattedMessage\n                                id='admin.license.key'\n                                defaultMessage='License Key: '\n                            />\n                        </label>\n                        {licenseKey}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nLicenseSettings.propTypes = {\n    license: PropTypes.object.isRequired,\n    intl: intlShape.isRequired,\n    config: PropTypes.object,\n};\n\nexport default injectIntl(LicenseSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSchemeTeams as loadSchemeTeams, getSchemes as loadSchemes} from 'mattermost-redux/actions/schemes';\nimport {getSchemes} from 'mattermost-redux/selectors/entities/schemes';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionSchemesSettings from './permission_schemes_settings.jsx';\n\nfunction mapStateToProps(state) {\n    const schemes = getSchemes(state);\n    const config = getConfig(state);\n\n    return {\n        schemes,\n        jobsAreEnabled: config.RunJobs === 'true',\n        clusterIsEnabled: config.EnableCluster === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadSchemes,\n            loadSchemeTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSchemesSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary';\n\nconst PAGE_SIZE = 30;\nconst PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE = 501;\n\nexport default class PermissionSchemesSettings extends React.PureComponent {\n    static propTypes = {\n        schemes: PropTypes.object.isRequired,\n        jobsAreEnabled: PropTypes.bool,\n        clusterIsEnabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadSchemes: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            loadingMore: false,\n            page: 0,\n            phase2MigrationIsComplete: false,\n        };\n    }\n\n    static defaultProps = {\n        schemes: {},\n    };\n\n    async UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        let schemes;\n        let phase2MigrationIsComplete = true; // Assume migration is complete unless HTTP status code says otherwise.\n        try {\n            schemes = await this.props.actions.loadSchemes('team', 0, PAGE_SIZE);\n            if (schemes.error.status_code === PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE) {\n                phase2MigrationIsComplete = false;\n            }\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loading: false, phase2MigrationIsComplete}));\n        } catch (err) {\n            this.setState({loading: false, phase2MigrationIsComplete});\n        }\n    }\n\n    loadMoreSchemes = () => {\n        this.setState({loadingMore: true});\n        this.props.actions.loadSchemes('team', this.state.page + 1, PAGE_SIZE).then((schemes) => {\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loadingMore: false, page: this.state.page + 1}));\n        });\n    }\n\n    // |RunJobs && !EnableCluster|(*App).IsPhase2MigrationCompleted|View                                                   |\n    // |-------------------------|---------------------------------|-------------------------------------------------------|\n    // |true                     |true                             |null                                                   |\n    // |false                    |true                             |null (Jobs were disabled after a successful migration.)|\n    // |false                    |false                            |On hold view.                                          |\n    // |true                     |false                            |In progress view.                                      |\n    teamOverrideSchemesMigrationView = () => {\n        if (this.state.phase2MigrationIsComplete) {\n            return null;\n        }\n\n        const docLink = (\n            <a\n                href='https://docs.mattermost.com/administration/config-settings.html#jobs'\n                rel='noopener noreferrer'\n                target='_blank'\n            >\n                <FormattedMessage\n                    id='admin.permissions.documentationLinkText'\n                    defaultMessage='documentation'\n                />\n            </a>\n        );\n\n        if (this.props.jobsAreEnabled && !this.props.clusterIsEnabled) {\n            return this.teamOverrideUnavalableView(\n                t('admin.permissions.teamOverrideSchemesInProgress'),\n                'Migration job in progress: Team Override Schemes are not available until the job server completes the permissions migration. Learn more in the {documentationLink}.',\n                docLink\n            );\n        }\n\n        return this.teamOverrideUnavalableView(\n            t('admin.permissions.teamOverrideSchemesNoJobsEnabled'),\n            'Migration job on hold: Team Override Schemes are not available until the job server can execute the permissions migration. The job will be automatically started when the job server is enabled. Learn more in the {documentationLink}.',\n            docLink,\n        );\n    }\n\n    teamOverrideUnavalableView = (id, defaultMsg, documentationLink) => {\n        return (\n            <div className='team-override-unavailable'>\n                <div className='team-override-unavailable__inner'>\n                    <FormattedMessage\n                        id={id}\n                        defaultMessage={defaultMsg}\n                        values={{documentationLink}}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    render = () => {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n        const schemes = Object.values(this.props.schemes).map((scheme) => (\n            <PermissionsSchemeSummary\n                scheme={scheme}\n                history={this.props.history}\n                key={scheme.id}\n            />\n        ));\n\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.permissions.permissionSchemes'\n                        defaultMessage='Permission Schemes'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.introBanner'\n                                defaultMessage='Permission Schemes set the default permissions for Team Admins, Channel Admins and everyone else. Learn more about permission schemes in our [documentation](!https://about.mattermost.com/default-advanced-permissions).'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemSchemeBannerTitle'\n                                    defaultMessage='System Scheme'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMarkdownMessage\n                                    id='admin.permissions.systemSchemeBannerText'\n                                    defaultMessage='Set the default permissions inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <Link\n                                className='btn btn-primary'\n                                to='/admin_console/permissions/system-scheme'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.systemSchemeBannerButton'\n                                    defaultMessage='Edit Scheme'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamOverrideSchemesTitle'\n                                    defaultMessage='Team Override Schemes'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMarkdownMessage\n                                    id='admin.permissions.teamOverrideSchemesBannerText'\n                                    defaultMessage='Use when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <Link\n                                className='btn btn-primary'\n                                to='/admin_console/permissions/team-override-scheme'\n                                disabled={teamOverrideView !== null}\n                                onClick={(e) => {\n                                    if (teamOverrideView !== null) {\n                                        e.preventDefault();\n                                        return false;\n                                    }\n                                    return true;\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamOverrideSchemesNewButton'\n                                    defaultMessage='New Team Override Scheme'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                    {schemes.length === 0 && teamOverrideView === null &&\n                        <div className='no-team-schemes'>\n                            <FormattedMessage\n                                id='admin.permissions.teamOverrideSchemesNoSchemes'\n                                defaultMessage='No team override schemes created.'\n                            />\n                        </div>}\n                    {teamOverrideView}\n                    {schemes.length > 0 && schemes}\n                    {!this.state.loadingMore && schemes.length === (PAGE_SIZE * (this.state.page + 1)) &&\n                        <button\n                            className='more-schemes theme style--none color--link'\n                            onClick={this.loadMoreSchemes}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.loadMoreSchemes'\n                                defaultMessage='Load more schemes'\n                            />\n                        </button>}\n                    {this.state.loadingMore &&\n                        <button className='more-schemes theme style--none color--link'>\n                            <span className='fa fa-refresh icon--rotate'/>\n                            <FormattedMessage\n                                id='admin.permissions.loadingMoreSchemes'\n                                defaultMessage='Loading...'\n                            />\n                        </button>}\n                </div>\n            </div>\n        );\n    };\n}\n\nt('admin.permissions.group.delete_posts.description');\nt('admin.permissions.group.delete_posts.name');\nt('admin.permissions.group.integrations.description');\nt('admin.permissions.group.integrations.name');\nt('admin.permissions.group.posts.description');\nt('admin.permissions.group.posts.name');\nt('admin.permissions.group.private_channel.description');\nt('admin.permissions.group.private_channel.name');\nt('admin.permissions.group.public_channel.description');\nt('admin.permissions.group.public_channel.name');\nt('admin.permissions.group.reactions.description');\nt('admin.permissions.group.reactions.name');\nt('admin.permissions.group.send_invites.description');\nt('admin.permissions.group.send_invites.name');\nt('admin.permissions.group.teams.description');\nt('admin.permissions.group.teams.name');\nt('admin.permissions.group.edit_posts.description');\nt('admin.permissions.group.edit_posts.name');\nt('admin.permissions.group.teams_team_scope.description');\nt('admin.permissions.group.teams_team_scope.name');\nt('admin.permissions.permission.assign_system_admin_role.description');\nt('admin.permissions.permission.assign_system_admin_role.name');\nt('admin.permissions.permission.create_direct_channel.description');\nt('admin.permissions.permission.create_direct_channel.name');\nt('admin.permissions.permission.create_group_channel.description');\nt('admin.permissions.permission.create_group_channel.name');\nt('admin.permissions.permission.create_private_channel.description');\nt('admin.permissions.permission.create_private_channel.name');\nt('admin.permissions.permission.create_public_channel.description');\nt('admin.permissions.permission.create_public_channel.name');\nt('admin.permissions.permission.create_team.description');\nt('admin.permissions.permission.create_team.name');\nt('admin.permissions.permission.create_user_access_token.description');\nt('admin.permissions.permission.create_user_access_token.name');\nt('admin.permissions.permission.delete_others_posts.description');\nt('admin.permissions.permission.delete_others_posts.name');\nt('admin.permissions.permission.delete_post.description');\nt('admin.permissions.permission.delete_post.name');\nt('admin.permissions.permission.delete_private_channel.description');\nt('admin.permissions.permission.delete_private_channel.name');\nt('admin.permissions.permission.delete_public_channel.description');\nt('admin.permissions.permission.delete_public_channel.name');\nt('admin.permissions.permission.edit_other_users.description');\nt('admin.permissions.permission.edit_other_users.name');\nt('admin.permissions.permission.edit_post.description');\nt('admin.permissions.permission.edit_post.name');\nt('admin.permissions.permission.import_team.description');\nt('admin.permissions.permission.import_team.name');\nt('admin.permissions.permission.list_team_channels.description');\nt('admin.permissions.permission.list_team_channels.name');\nt('admin.permissions.permission.list_users_without_team.description');\nt('admin.permissions.permission.list_users_without_team.name');\nt('admin.permissions.permission.manage_channel_roles.description');\nt('admin.permissions.permission.manage_channel_roles.name');\nt('admin.permissions.permission.manage_emojis.description');\nt('admin.permissions.permission.manage_emojis.name');\nt('admin.permissions.permission.manage_jobs.description');\nt('admin.permissions.permission.manage_jobs.name');\nt('admin.permissions.permission.manage_oauth.description');\nt('admin.permissions.permission.manage_oauth.name');\nt('admin.permissions.permission.manage_private_channel_members.description');\nt('admin.permissions.permission.manage_private_channel_members.name');\nt('admin.permissions.permission.manage_private_channel_properties.description');\nt('admin.permissions.permission.manage_private_channel_properties.name');\nt('admin.permissions.permission.manage_public_channel_members.description');\nt('admin.permissions.permission.manage_public_channel_members.name');\nt('admin.permissions.permission.manage_public_channel_properties.description');\nt('admin.permissions.permission.manage_public_channel_properties.name');\nt('admin.permissions.permission.manage_roles.description');\nt('admin.permissions.permission.manage_roles.name');\nt('admin.permissions.permission.manage_slash_commands.description');\nt('admin.permissions.permission.manage_slash_commands.name');\nt('admin.permissions.permission.manage_system.description');\nt('admin.permissions.permission.manage_system.name');\nt('admin.permissions.permission.manage_team.description');\nt('admin.permissions.permission.manage_team.name');\nt('admin.permissions.permission.manage_team_roles.description');\nt('admin.permissions.permission.manage_team_roles.name');\nt('admin.permissions.permission.manage_webhooks.description');\nt('admin.permissions.permission.manage_webhooks.name');\nt('admin.permissions.permission.permanent_delete_user.description');\nt('admin.permissions.permission.permanent_delete_user.name');\nt('admin.permissions.permission.read_channel.description');\nt('admin.permissions.permission.read_channel.name');\nt('admin.permissions.permission.read_user_access_token.description');\nt('admin.permissions.permission.read_user_access_token.name');\nt('admin.permissions.permission.remove_user_from_team.description');\nt('admin.permissions.permission.remove_user_from_team.name');\nt('admin.permissions.permission.revoke_user_access_token.description');\nt('admin.permissions.permission.revoke_user_access_token.name');\nt('admin.permissions.permission.upload_file.description');\nt('admin.permissions.permission.upload_file.name');\nt('admin.permissions.permission.view_team.description');\nt('admin.permissions.permission.view_team.name');\nt('admin.permissions.permission.edit_others_posts.description');\nt('admin.permissions.permission.edit_others_posts.name');\nt('admin.permissions.roles.all_users.name');\nt('admin.permissions.roles.channel_admin.name');\nt('admin.permissions.roles.channel_user.name');\nt('admin.permissions.roles.system_admin.name');\nt('admin.permissions.roles.system_user.name');\nt('admin.permissions.roles.team_admin.name');\nt('admin.permissions.roles.team_user.name');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deleteScheme} from 'mattermost-redux/actions/schemes';\n\nimport {makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return function mapStateToProps(state, ownProps) {\n        return {\n            teams: getSchemeTeams(state, {schemeId: ownProps.scheme.id}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteScheme,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionsSchemeSummary);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport Constants from 'utils/constants.jsx';\n\nconst MAX_TEAMS_PER_SCHEME_SUMMARY = 8;\n\nexport default class PermissionsSchemeSummary extends React.Component {\n    static propTypes = {\n        scheme: PropTypes.object.isRequired,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            deleteScheme: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            deleting: false,\n            serverError: null,\n        };\n    }\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteSchemeTitle'\n                defaultMessage='Delete {scheme} scheme?'\n                values={{scheme: this.props.scheme.display_name}}\n            />\n        );\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='permission-scheme-summary-error-message'>\n                    <i className='fa fa-exclamation-circle'/> {this.state.serverError}\n                </div>\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleteConfirmQuestion'\n                        defaultMessage='The permissions in the teams using this scheme will reset to the defaults in the System Scheme. Are you sure you want to delete the {schemeName} scheme?'\n                        values={{schemeName: this.props.scheme.display_name}}\n                    />\n                </p>\n                {serverError}\n            </div>\n        );\n\n        let confirmButton = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteConfirmButton'\n                defaultMessage='Yes, Delete'\n            />\n        );\n\n        if (this.state.deleting) {\n            confirmButton = (\n                <span>\n                    <span className='fa fa-refresh icon--rotate'/>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleting'\n                        defaultMessage='Deleting...'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleDeleteConfirmed}\n                onCancel={this.handleDeleteCanceled}\n            />\n        );\n    }\n\n    stopPropagation = (e) => {\n        e.stopPropagation();\n    }\n\n    handleDeleteCanceled = () => {\n        this.setState({\n            showConfirmModal: false,\n        });\n    }\n\n    handleDeleteConfirmed = async () => {\n        this.setState({deleting: true, serverError: null});\n        const data = await this.props.actions.deleteScheme(this.props.scheme.id);\n        if (data.error) {\n            this.setState({deleting: false, serverError: data.error.message});\n        } else {\n            this.setState({deleting: false, showConfirmModal: false});\n        }\n    }\n\n    delete = (e) => {\n        e.stopPropagation();\n        this.setState({showConfirmModal: true, serverError: null});\n    }\n\n    goToEdit = () => {\n        this.props.history.push('/admin_console/permissions/team-override-scheme/' + this.props.scheme.id);\n    }\n\n    render = () => {\n        const scheme = this.props.scheme;\n\n        let teams = this.props.teams ? this.props.teams.map((team) => (\n            <span\n                className='team'\n                key={team.id}\n            >\n                {team.display_name}\n            </span>\n        )) : [];\n\n        let extraTeams = null;\n        if (teams.length > MAX_TEAMS_PER_SCHEME_SUMMARY) {\n            extraTeams = (\n                <OverlayTrigger\n                    trigger={['hover', 'focus']}\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={\n                        <Tooltip\n                            className='team-scheme-extra-teams-overlay'\n                            id={scheme.id + '-extra-teams-overlay'}\n                        >\n                            {teams.slice(MAX_TEAMS_PER_SCHEME_SUMMARY)}\n                        </Tooltip>\n                    }\n                >\n                    <span\n                        className='team'\n                        key='extra-teams'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionsSchemeSummary.moreTeams'\n                            defaultMessage='+{number} more'\n                            values={{number: teams.length - MAX_TEAMS_PER_SCHEME_SUMMARY}}\n                        />\n                    </span>\n                </OverlayTrigger>\n            );\n            teams = teams.slice(0, MAX_TEAMS_PER_SCHEME_SUMMARY);\n        }\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <div\n                className='permissions-scheme-summary'\n                onClick={this.goToEdit}\n            >\n                <div onClick={this.stopPropagation}>{confirmModal}</div>\n                <div\n                    className='permissions-scheme-summary--header'\n                >\n                    <div className='title'>\n                        {scheme.display_name}\n                    </div>\n                    <div className='actions'>\n                        <Link\n                            className='edit-button'\n                            to={'/admin_console/permissions/team-override-scheme/' + scheme.id}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.edit'\n                                defaultMessage='Edit'\n                            />\n                        </Link>\n                        {'-'}\n                        <a\n                            className='delete-button'\n                            onClick={this.delete}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='permissions-scheme-summary--description'>\n                    {scheme.description}\n                </div>\n                <div className='permissions-scheme-summary--teams'>\n                    {teams}\n                    {extraTeams}\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionSystemSchemeSettings from './permission_system_scheme_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        roles: getRoles(state),\n        rolesRequest: state.requests.roles.getRolesByNames,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSystemSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {PermissionsScope, DefaultRolePermissions} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SaveButton from 'components/save_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AccordionToggleIcon from 'components/svg/accordion_toggle_icon.jsx';\nimport FormError from 'components/form_error.jsx';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree';\n\nexport default class PermissionSystemSchemeSettings extends React.Component {\n    static propTypes = {\n        roles: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showResetDefaultModal: false,\n            loaded: false,\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: {},\n            openRoles: {\n                all_users: true,\n                system_admin: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n        this.rolesNeeded = ['system_admin', 'system_user', 'team_admin', 'team_user', 'channel_admin', 'channel_user'];\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(this.rolesNeeded);\n        if (this.rolesNeeded.every((roleName) => this.props.roles[roleName])) {\n            this.loadRolesIntoState(this.props);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!this.state.loaded && this.rolesNeeded.every((roleName) => nextProps.roles[roleName])) {\n            this.loadRolesIntoState(nextProps);\n        }\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    loadRolesIntoState(props) {\n        const {system_admin, team_admin, channel_admin, system_user, team_user, channel_user} = props.roles; // eslint-disable-line camelcase\n        this.setState({\n            selectedPermission: null,\n            loaded: true,\n            roles: {\n                system_admin,\n                team_admin,\n                channel_admin,\n                all_users: {\n                    name: 'all_users',\n                    displayName: 'All members',\n                    permissions: system_user.permissions.concat(team_user.permissions).concat(channel_user.permissions),\n                },\n            },\n        });\n    }\n\n    deriveRolesFromAllUsers = (role) => {\n        return {\n            system_user: {\n                ...this.props.roles.system_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_user: {\n                ...this.props.roles.team_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...this.props.roles.channel_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    handleSubmit = async () => {\n        const teamAdminPromise = this.props.actions.editRole(this.state.roles.team_admin);\n        const channelAdminPromise = this.props.actions.editRole(this.state.roles.channel_admin);\n        const roles = this.deriveRolesFromAllUsers(this.state.roles.all_users);\n        const systemUserPromise = this.props.actions.editRole(roles.system_user);\n        const teamUserPromise = this.props.actions.editRole(roles.team_user);\n        const channelUserPromise = this.props.actions.editRole(roles.channel_user);\n        this.setState({saving: true});\n\n        Promise.all([teamAdminPromise, channelAdminPromise, systemUserPromise, teamUserPromise, channelUserPromise]).then(\n            (results) => {\n                let serverError = null;\n                let saveNeeded = false;\n                for (const result of results) {\n                    if (result.error) {\n                        serverError = result.error.message;\n                        saveNeeded = true;\n                        break;\n                    }\n                }\n                this.setState({serverError, saving: false, saveNeeded});\n                this.props.actions.setNavigationBlocked(saveNeeded);\n            }\n        );\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.state.roles};\n        const role = {...roles[roleId]};\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        roles[roleId] = role;\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    resetDefaults = () => {\n        const newRolesState = JSON.parse(JSON.stringify({...this.state.roles}));\n\n        Object.entries(DefaultRolePermissions).forEach(([roleName, permissions]) => {\n            newRolesState[roleName].permissions = permissions;\n        });\n\n        this.setState({roles: newRolesState, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    render = () => {\n        const hasCustomSchemes = this.props.license.CustomPermissionsSchemes === 'true';\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className={'admin-console-header ' + (hasCustomSchemes ? 'with-back' : '')}>\n                    {hasCustomSchemes &&\n                        <BlockableLink\n                            to='/admin_console/permissions/schemes'\n                            className='fa fa-chevron-left back'\n                        />}\n                    <FormattedMessage\n                        id='admin.permissions.systemScheme'\n                        defaultMessage='System Scheme'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.systemScheme.introBanner'\n                                defaultMessage='Configure the default permissions for Team Admins, Channel Admins and other members. This scheme is inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied in specific teams.'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div\n                    className={'permissions-block ' + (this.state.openRoles.all_users ? '' : 'closed')}\n                    id='all_users'\n                >\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('all_users')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersTitle'\n                                    defaultMessage='All Members'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersDescription'\n                                    defaultMessage='Permissions granted to all members, including administrators and newly created users.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        selected={this.state.selectedPermission}\n                        role={this.state.roles.all_users}\n                        scope={'system_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.channel_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('channel_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsTitle'\n                                    defaultMessage='Channel Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsDescription'\n                                    defaultMessage='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={this.state.roles.all_users}\n                        role={this.state.roles.channel_admin}\n                        scope={'channel_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.team_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('team_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsTitle'\n                                    defaultMessage='Team Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsDescription'\n                                    defaultMessage='Permissions granted to team creators and any users promoted to Team Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={this.state.roles.all_users}\n                        role={this.state.roles.team_admin}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block ' + (this.state.openRoles.system_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('system_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.systemAdminsTitle'\n                                    defaultMessage='System Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.systemAdminsDescription'\n                                    defaultMessage='Full permissions granted to System Administrators.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        readOnly={true}\n                        role={this.state.roles.system_admin}\n                        scope={'system_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/permissions/schemes'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <a\n                        onClick={() => this.setState({showResetDefaultModal: true})}\n                        className='cancel-button reset-defaults-btn'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButton'\n                            defaultMessage='Reset to Defaults'\n                        />\n                    </a>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n\n                <Modal\n                    dialogClassName='admin-modal'\n                    show={this.state.showResetDefaultModal}\n                    onHide={() => this.setState({showResetDefaultModal: false})}\n                >\n                    <Modal.Header\n                        closeButton={true}\n                    >\n                        <h4 className='modal-title'>\n                            <FormattedMessage\n                                id='admin.permissions.systemScheme.resetDefaultsButtonModalTitle'\n                                defaultMessage='Reset to Default?'\n                            />\n                        </h4>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalBody'\n                            defaultMessage='This will reset all selections on this page to their default settings. Are you sure you want to reset?'\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-cancel'\n                            onClick={() => this.setState({showResetDefaultModal: false})}\n                        >\n                            <FormattedMessage\n                                id='confirm_modal.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            id='linkModalCloseButton'\n                            type='button'\n                            className='btn btn-default'\n                            onClick={() => {\n                                this.resetDefaults();\n                                this.setState({showResetDefaultModal: false});\n                            }}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.systemScheme.resetDefaultsConfirmationButton'\n                                defaultMessage='Yes, Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </Modal>\n\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionGroup from '../permission_group.jsx';\n\nimport EditPostTimeLimitButton from '../edit_post_time_limit_button';\nimport EditPostTimeLimitModal from '../edit_post_time_limit_modal';\n\nexport default class PermissionsTree extends React.Component {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        config: PropTypes.object.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n\n        this.ADDITIONAL_VALUES = {\n            edit_post: {\n                editTimeLimitButton: <EditPostTimeLimitButton onClick={this.openPostTimeLimitModal}/>,\n            },\n        };\n\n        this.groups = [\n            {\n                id: 'teams',\n                permissions: [\n                    {\n                        id: 'send_invites',\n                        combined: true,\n                        permissions: [\n                            'invite_user',\n                            'get_public_link',\n                            'add_user_to_team',\n                        ],\n                    },\n                    'create_team',\n                ],\n            },\n            {\n                id: 'public_channel',\n                permissions: [\n                    'create_public_channel',\n                    'manage_public_channel_properties',\n                    'manage_public_channel_members',\n                    'delete_public_channel',\n                ],\n            },\n            {\n                id: 'private_channel',\n                permissions: [\n                    'create_private_channel',\n                    'manage_private_channel_properties',\n                    'manage_private_channel_members',\n                    'delete_private_channel',\n                ],\n            },\n            {\n                id: 'posts',\n                permissions: [\n                    {\n                        id: 'edit_posts',\n                        permissions: [\n                            'edit_post',\n                            'edit_others_posts',\n                        ],\n                    },\n                    {\n                        id: 'delete_posts',\n                        permissions: [\n                            'delete_post',\n                            'delete_others_posts',\n                        ],\n                    },\n                    {\n                        id: 'reactions',\n                        combined: true,\n                        permissions: [\n                            'add_reaction',\n                            'remove_reaction',\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 'integrations',\n                permissions: [\n                ],\n            },\n        ];\n        this.updateGroups();\n    }\n\n    updateGroups = () => {\n        const {config, scope} = this.props;\n        const integrationsGroup = this.groups[this.groups.length - 1];\n        if ((config.EnableIncomingWebhooks === 'true' || config.EnableOutgoingWebhooks === 'true') && integrationsGroup.permissions.indexOf('manage_webhooks') === -1) {\n            integrationsGroup.permissions.push('manage_webhooks');\n        }\n        if (config.EnableOAuthServiceProvider === 'true' && integrationsGroup.permissions.indexOf('manage_oauth') === -1) {\n            integrationsGroup.permissions.push('manage_oauth');\n        }\n        if (config.EnableCommands === 'true' && integrationsGroup.permissions.indexOf('manage_slash_commands') === -1) {\n            integrationsGroup.permissions.push('manage_slash_commands');\n        }\n        if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf('manage_emojis') === -1) {\n            integrationsGroup.permissions.push('manage_emojis');\n        }\n        if (scope === 'team_scope' && this.groups[0].id !== 'teams_team_scope') {\n            this.groups[0].id = 'teams_team_scope';\n        }\n    }\n\n    openPostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    closePostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: false});\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.config !== prevProps.config) {\n            this.updateGroups();\n        }\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={this.groups}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={this.closePostTimeLimitModal}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants.jsx';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionRow from './permission_row.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionGroup extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        permissions: PropTypes.array.isRequired,\n        readOnly: PropTypes.bool,\n        role: PropTypes.object,\n        parentRole: PropTypes.object,\n        scope: PropTypes.string.isRequired,\n        combined: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        root: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            prevPermissions: [],\n        };\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected !== nextProps.selected) {\n            if (this.getRecursivePermissions(this.props.permissions).indexOf(nextProps.selected) !== -1) {\n                this.setState({expanded: true});\n            }\n        }\n    }\n\n    toggleExpanded = (e) => {\n        e.stopPropagation();\n        this.setState({expanded: !this.state.expanded});\n    }\n\n    toggleSelectRow = (id) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange([id]);\n    }\n\n    getRecursivePermissions = (permissions) => {\n        let result = [];\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                result.push(permission);\n            } else {\n                result = result.concat(this.getRecursivePermissions(permission.permissions));\n            }\n        }\n        return result;\n    }\n\n    toggleSelectSubGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(ids);\n    }\n\n    toggleSelectGroup = () => {\n        const {readOnly, permissions, role, onChange} = this.props;\n        if (readOnly) {\n            return;\n        }\n        if (this.getStatus(permissions) === 'checked') {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (!this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({expanded: true});\n            onChange(permissionsToToggle);\n        } else if (this.getStatus(permissions) === '') {\n            const permissionsToToggle = [];\n            let expanded = true;\n            if (this.state.prevPermissions.length === 0) {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (!this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                        expanded = false;\n                    }\n                }\n            } else {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (this.state.prevPermissions.indexOf(permission) !== -1 && !this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                    }\n                }\n            }\n            onChange(permissionsToToggle);\n            this.setState({prevPermissions: [], expanded});\n        } else {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (role.permissions.indexOf(permission) === -1 && !this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({prevPermissions: role.permissions, expanded: false});\n            onChange(permissionsToToggle);\n        }\n    }\n\n    isInScope = (permission) => {\n        if (this.props.scope === 'channel_scope' && PermissionsScope[permission] !== 'channel_scope') {\n            return false;\n        }\n        if (this.props.scope === 'team_scope' && PermissionsScope[permission] === 'system_scope') {\n            return false;\n        }\n        return true;\n    }\n\n    renderPermission = (permission, additionalValues) => {\n        if (!this.isInScope(permission)) {\n            return null;\n        }\n        const comesFromParent = this.fromParent(permission);\n        const active = comesFromParent || this.props.role.permissions.indexOf(permission) !== -1;\n        return (\n            <PermissionRow\n                key={permission}\n                id={permission}\n                uniqId={this.props.uniqId + '-' + permission}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly || comesFromParent}\n                inherited={comesFromParent ? this.props.parentRole : null}\n                value={active ? 'checked' : ''}\n                onChange={this.toggleSelectRow}\n                additionalValues={additionalValues}\n            />\n        );\n    }\n\n    renderGroup = (g) => {\n        return (\n            <PermissionGroup\n                key={g.id}\n                id={g.id}\n                uniqId={this.props.uniqId + '-' + g.id}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly}\n                permissions={g.permissions}\n                additionalValues={this.props.additionalValues}\n                role={this.props.role}\n                parentRole={this.props.parentRole}\n                scope={this.props.scope}\n                onChange={this.toggleSelectSubGroup}\n                combined={g.combined}\n                root={false}\n            />\n        );\n    }\n\n    fromParent = (id) => {\n        return this.props.parentRole && this.props.parentRole.permissions.indexOf(id) !== -1;\n    }\n\n    getStatus = (permissions) => {\n        let anyChecked = false;\n        let anyUnchecked = false;\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                if (!this.isInScope(permission)) {\n                    continue;\n                }\n                anyChecked = anyChecked || this.fromParent(permission) || this.props.role.permissions.indexOf(permission) !== -1;\n                anyUnchecked = anyUnchecked || (!this.fromParent(permission) && this.props.role.permissions.indexOf(permission) === -1);\n            } else {\n                const status = this.getStatus(permission.permissions);\n                if (status === 'intermediate') {\n                    return 'intermediate';\n                }\n                if (status === 'checked') {\n                    anyChecked = true;\n                }\n                if (status === '') {\n                    anyUnchecked = true;\n                }\n            }\n        }\n        if (anyChecked && anyUnchecked) {\n            return 'intermediate';\n        }\n        if (anyChecked && !anyUnchecked) {\n            return 'checked';\n        }\n        return '';\n    }\n\n    hasPermissionsOnScope = () => {\n        return this.getRecursivePermissions(this.props.permissions).some((permission) => this.isInScope(permission));\n    }\n\n    allPermissionsFromParent = (permissions) => {\n        for (const permission of permissions) {\n            if (typeof permission !== 'string') {\n                if (!this.allPermissionsFromParent(permission.permissions)) {\n                    return false;\n                }\n                continue;\n            }\n            if (this.isInScope(permission) && !this.fromParent(permission)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    render = () => {\n        const {id, uniqId, permissions, readOnly, combined, root, selected, additionalValues} = this.props;\n        if (!this.hasPermissionsOnScope()) {\n            return null;\n        }\n        const permissionsRows = permissions.map((group) => {\n            if (typeof group === 'string') {\n                const addVals = additionalValues && additionalValues[group] ? additionalValues[group] : {};\n                return this.renderPermission(group, addVals);\n            }\n            return this.renderGroup(group);\n        });\n        if (root) {\n            return (\n                <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                    {permissionsRows}\n                </div>\n            );\n        }\n\n        let inherited = null;\n        if (this.allPermissionsFromParent(this.props.permissions) && this.props.combined) {\n            inherited = this.props.parentRole;\n        }\n\n        let classes = '';\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        if (readOnly || this.allPermissionsFromParent(this.props.permissions)) {\n            classes += ' read-only';\n        }\n\n        if (combined) {\n            classes += ' combined';\n        }\n\n        return (\n            <div className='permission-group'>\n                {!root &&\n                    <div\n                        className={'permission-group-row ' + classes}\n                        onClick={this.toggleSelectGroup}\n                        id={uniqId}\n                    >\n                        {!combined &&\n                            <div\n                                className={'fa fa-caret-right permission-arrow ' + (this.state.expanded ? 'open' : '')}\n                                onClick={this.toggleExpanded}\n                            />}\n                        <PermissionCheckbox value={this.getStatus(this.props.permissions)}/>\n                        <span className='permission-name'>\n                            <FormattedMessage id={'admin.permissions.group.' + id + '.name'}/>\n                        </span>\n                        <PermissionDescription\n                            inherited={inherited}\n                            id={id}\n                            selectRow={this.props.selectRow}\n                            rowType='group'\n                        />\n                    </div>}\n                {!combined &&\n                    <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                        {permissionsRows}\n                    </div>}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxPartialIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-298.000000, -1273.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---@all-@channel-Mentions'\n                                        transform='translate(0.000000, 375.000000)'\n                                    >\n                                        <g id='Stacked-Group'>\n                                            <g\n                                                id='data-table/1st/row-checkbox-label-base'\n                                                transform='translate(25.000000, 5.000000)'\n                                            >\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 C20.1,3 21,3.9 21,5 L21,19 C21,20.1 20.1,21 19,21 L5,21 C3.9,21 3,20.1 3,19 L3,5 C3,3.9 3.9,3 5,3 L19,3 Z M7,11 L7,13 L17,13 L17,11 L7,11 Z'\n                                                        id='checkbox---partial'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionRow extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        readOnly: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    toggleSelect = () => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(this.props.id);\n    }\n\n    render = () => {\n        const {id, uniqId, inherited, value, readOnly, selected, additionalValues} = this.props;\n        let classes = 'permission-row';\n        if (readOnly) {\n            classes += ' read-only';\n        }\n\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        return (\n            <div\n                className={classes}\n                onClick={this.toggleSelect}\n                id={uniqId}\n            >\n                <PermissionCheckbox value={value}/>\n                <span className='permission-name'>\n                    <FormattedMessage\n                        id={'admin.permissions.permission.' + id + '.name'}\n                    />\n                </span>\n                <PermissionDescription\n                    inherited={inherited}\n                    id={id}\n                    selectRow={this.props.selectRow}\n                    rowType='permission'\n                    additionalValues={additionalValues}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditPostTimeLimitButton from './edit_post_time_limit_button';\n\nfunction mapStateToProps(state) {\n    const {PostEditTimeLimit} = getConfig(state);\n\n    return {\n        timeLimit: parseInt(PostEditTimeLimit, 10),\n    };\n}\n\nexport default connect(mapStateToProps)(EditPostTimeLimitButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class EditPostTimeLimitButton extends React.Component {\n    static propTypes = {\n        timeLimit: PropTypes.number.isRequired,\n        onClick: PropTypes.func,\n    };\n\n    render = () => {\n        let messageID;\n        if (this.props.timeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            messageID = t('edit_post.time_limit_button.no_limit');\n        } else {\n            messageID = t('edit_post.time_limit_button.for_n_seconds');\n        }\n\n        return (\n            <button\n                className='edit-post-time-limit-button'\n                onClick={this.props.onClick}\n            >\n                <i className='fa fa-gear'/>\n                <FormattedMessage\n                    id={messageID}\n                    values={{n: this.props.timeLimit}}\n                />\n            </button>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, updateConfig} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport EditPostTimeLimitModal from './edit_post_time_limit_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateConfig,\n            getConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostTimeLimitModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst INT32_MAX = 2147483647;\n\nexport default class EditPostTimeLimitModal extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        show: PropTypes.bool,\n        onClose: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateConfig: PropTypes.func.isRequired,\n            getConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            postEditTimeLimit: parseInt(props.config.ServiceSettings.PostEditTimeLimit, 10),\n            saving: false,\n            errorMessage: '',\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        this.props.actions.getConfig();\n    }\n\n    save = async () => {\n        this.setState({saving: true, errorMessage: ''});\n\n        const val = parseInt(this.state.postEditTimeLimit, 10);\n        if (val !== Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            if (val.toString() === 'NaN' || val <= 0 || val > INT32_MAX) {\n                this.setState({errorMessage: localizeMessage('edit_post.time_limit_modal.invalid_time_limit', 'Invalid time limit'), saving: false});\n                return false;\n            }\n        }\n\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n        newConfig.ServiceSettings.PostEditTimeLimit = val;\n\n        const {error: err} = await this.props.actions.updateConfig(newConfig);\n        if (err) {\n            this.setState({errorMessage: err, saving: false});\n        } else {\n            this.setState({saving: false});\n            this.props.onClose();\n        }\n\n        return true;\n    }\n\n    handleOptionChange = (e) => {\n        const {value} = e.target;\n        if (value === Constants.ALLOW_EDIT_POST_ALWAYS) {\n            this.setState({postEditTimeLimit: Constants.UNSET_POST_EDIT_TIME_LIMIT});\n        } else {\n            this.setState({postEditTimeLimit: ''});\n        }\n    }\n\n    handleSecondsChange = (e) => {\n        const {value} = e.target;\n        this.setState({postEditTimeLimit: value});\n    }\n\n    render = () => {\n        return (\n            <Modal\n                dialogClassName='admin-modal edit-post-time-limit-modal'\n                show={this.props.show}\n            >\n                <Modal.Header\n                    closeButton={true}\n                >\n                    <h4 className='modal-title'>\n                        <FormattedMessage\n                            id='edit_post.time_limit_modal.title'\n                            defaultMessage='Configure Global Edit Post Time Limit'\n                        />\n                    </h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedHTMLMessage\n                        id='edit_post.time_limit_modal.description'\n                        defaultMessage='Setting a time limit <strong>applies to all users</strong> who have the \"Edit Post\" permissions in any permission scheme.'\n                    />\n                    <div className='padding-left x2 padding-top padding-bottom'>\n                        <div className='padding-top x2'>\n                            <input\n                                id='anytime'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_ALWAYS}\n                                checked={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='anytime'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_anytime'\n                                    defaultMessage='Anytime'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top'>\n                            <input\n                                id='timelimit'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_TIME_LIMIT}\n                                checked={this.state.postEditTimeLimit !== Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.preinput'\n                                    defaultMessage='Can edit for'\n                                />\n                            </label>\n                            <input\n                                type='number'\n                                className='form-control inline'\n                                min='0'\n                                step='1'\n                                max={INT32_MAX}\n                                id='editPostTimeLimit'\n                                readOnly={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleSecondsChange}\n                                value={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT ? '' : this.state.postEditTimeLimit}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.postinput'\n                                    defaultMessage='seconds after posting'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top x2 light'>\n                            <FormattedMessage\n                                id='edit_post.time_limit_modal.subscript'\n                                defaultMessage='Set the length of time users have to edit their messages after posting.'\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className='edit-post-time-limit-modal__error'>\n                        {this.state.errorMessage}\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-cancel'\n                        onClick={this.props.onClose}\n                    >\n                        <FormattedMessage\n                            id='confirm_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-default'\n                        onClick={this.save}\n                        disabled={this.state.saving}\n                    >\n                        <FormattedMessage\n                            id={this.state.saving ? t('save_button.saving') : t('edit_post.time_limit_modal.save_button')}\n                            defaultMessage='Save Edit Time'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {getScheme, makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport {getScheme as loadScheme, patchScheme, createScheme, getSchemeTeams as loadSchemeTeams} from 'mattermost-redux/actions/schemes';\n\nimport {updateTeamScheme} from 'mattermost-redux/actions/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionTeamSchemeSettings from './permission_team_scheme_settings.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return (state, ownProps) => {\n        const schemeId = ownProps.match.params.scheme_id;\n        return {\n            schemeId,\n            scheme: schemeId ? getScheme(state, schemeId) : null,\n            teams: schemeId ? getSchemeTeams(state, {schemeId}) : null,\n            roles: getRoles(state),\n            rolesRequest: state.requests.roles.getRolesByNames,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            loadScheme,\n            loadSchemeTeams,\n            editRole,\n            patchScheme,\n            updateTeamScheme,\n            createScheme,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionTeamSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport SaveButton from 'components/save_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport AccordionToggleIcon from 'components/svg/accordion_toggle_icon.jsx';\nimport FormError from 'components/form_error.jsx';\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree';\n\nimport TeamInList from './team_in_list';\n\nexport default class PermissionTeamSchemeSettings extends React.Component {\n    static propTypes = {\n        schemeId: PropTypes.string,\n        scheme: PropTypes.object,\n        roles: PropTypes.object,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            loadScheme: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            patchScheme: PropTypes.func.isRequired,\n            createScheme: PropTypes.func.isRequired,\n            updateTeamScheme: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: null,\n            teams: null,\n            addTeamOpen: false,\n            selectedPermission: null,\n            openRoles: {\n                all_users: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n    }\n\n    static defaultProps = {\n        scheme: null,\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(['team_admin', 'team_user', 'channel_admin', 'channel_user']);\n        if (this.props.schemeId) {\n            this.props.actions.loadScheme(this.props.schemeId).then((result) => {\n                this.props.actions.loadRolesIfNeeded([\n                    result.data.default_team_user_role,\n                    result.data.default_team_admin_role,\n                    result.data.default_channel_user_role,\n                    result.data.default_channel_admin_role,\n                ]);\n            });\n            this.props.actions.loadSchemeTeams(this.props.schemeId);\n        }\n    }\n\n    isLoaded = (props) => {\n        if (props.schemeId) {\n            if (props.scheme !== null &&\n                props.teams !== null &&\n                props.roles[props.scheme.default_team_user_role] &&\n                props.roles[props.scheme.default_team_admin_role] &&\n                props.roles[props.scheme.default_channel_user_role] &&\n                props.roles[props.scheme.default_channel_admin_role]) {\n                return true;\n            }\n            return false;\n        } else if (props.roles.team_user &&\n            props.roles.team_admin &&\n            props.roles.channel_user &&\n            props.roles.channel_admin) {\n            return true;\n        }\n        return false;\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    getStateRoles = () => {\n        if (this.state.roles !== null) {\n            return this.state.roles;\n        }\n\n        let teamUser = null;\n        let teamAdmin = null;\n        let channelUser = null;\n        let channelAdmin = null;\n\n        if (this.props.schemeId) {\n            if (this.isLoaded(this.props)) {\n                teamUser = this.props.roles[this.props.scheme.default_team_user_role];\n                teamAdmin = this.props.roles[this.props.scheme.default_team_admin_role];\n                channelUser = this.props.roles[this.props.scheme.default_channel_user_role];\n                channelAdmin = this.props.roles[this.props.scheme.default_channel_admin_role];\n            }\n        } else if (this.isLoaded(this.props)) {\n            teamUser = this.props.roles.team_user;\n            teamAdmin = this.props.roles.team_admin;\n            channelUser = this.props.roles.channel_user;\n            channelAdmin = this.props.roles.channel_admin;\n        } else {\n            return null;\n        }\n        return {\n            team_admin: teamAdmin,\n            channel_admin: channelAdmin,\n            all_users: {\n                name: 'all_users',\n                displayName: 'All members',\n                permissions: teamUser.permissions.concat(channelUser.permissions),\n            },\n        };\n    }\n\n    deriveRolesFromAllUsers = (baseTeam, baseChannel, role) => {\n        return {\n            team_user: {\n                ...baseTeam,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...baseChannel,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    handleNameChange = (e) => {\n        this.setState({schemeName: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({schemeDescription: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async () => {\n        const roles = this.getStateRoles();\n        let teamAdmin = roles.team_admin;\n        let channelAdmin = roles.channel_admin;\n        const allUsers = roles.all_users;\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        let teamUser = null;\n        let channelUser = null;\n        let schemeId = null;\n\n        this.setState({saving: true});\n        if (this.props.schemeId) {\n            const derived = this.deriveRolesFromAllUsers(\n                this.props.roles[this.props.scheme.default_team_user_role],\n                this.props.roles[this.props.scheme.default_channel_user_role],\n                allUsers\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            await this.props.actions.patchScheme(this.props.schemeId, {\n                display_name: schemeName,\n                description: schemeDescription,\n            });\n            schemeId = this.props.schemeId;\n        } else {\n            const derived = this.deriveRolesFromAllUsers(\n                this.props.roles.team_user,\n                this.props.roles.channel_user,\n                allUsers\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            const result = await this.props.actions.createScheme({\n                display_name: schemeName,\n                description: schemeDescription,\n                scope: 'team',\n            });\n            if (result.error) {\n                this.setState({serverError: result.error.message, saving: false, saveNeeded: true});\n                this.props.actions.setNavigationBlocked(true);\n                return;\n            }\n            const newScheme = result.data;\n            schemeId = newScheme.id;\n            await this.props.actions.loadRolesIfNeeded([\n                newScheme.default_team_user_role,\n                newScheme.default_team_admin_role,\n                newScheme.default_channel_user_role,\n                newScheme.default_channel_admin_role,\n            ]);\n            teamUser = {...teamUser, id: this.props.roles[newScheme.default_team_user_role].id};\n            teamAdmin = {...teamAdmin, id: this.props.roles[newScheme.default_team_admin_role].id};\n            channelUser = {...channelUser, id: this.props.roles[newScheme.default_channel_user_role].id};\n            channelAdmin = {...channelAdmin, id: this.props.roles[newScheme.default_channel_admin_role].id};\n        }\n\n        const teamAdminPromise = this.props.actions.editRole(teamAdmin);\n        const channelAdminPromise = this.props.actions.editRole(channelAdmin);\n        const teamUserPromise = this.props.actions.editRole(teamUser);\n        const channelUserPromise = this.props.actions.editRole(channelUser);\n\n        const teamEditPromises = [];\n\n        const currentTeams = new Set((this.state.teams || this.props.teams || []).map((t) => t.id));\n        const serverTeams = new Set((this.props.teams || []).map((t) => t.id));\n\n        // Difference of sets (currentTeams - serverTeams)\n        const addedTeams = new Set([...currentTeams].filter((t) => !serverTeams.has(t)));\n\n        // Difference of sets (serverTeams - currentTeams)\n        const removedTeams = new Set([...serverTeams].filter((t) => !currentTeams.has(t)));\n\n        for (const teamId of addedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, schemeId));\n        }\n\n        for (const teamId of removedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, ''));\n        }\n\n        const results = await Promise.all([teamAdminPromise, channelAdminPromise, teamUserPromise, channelUserPromise, ...teamEditPromises]);\n\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n        this.props.history.push('/admin_console/permissions/schemes');\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.getStateRoles()};\n        let role = null;\n        if (roles.team_admin.name === roleId) {\n            role = {...roles.team_admin};\n        } else if (roles.channel_admin.name === roleId) {\n            role = {...roles.channel_admin};\n        } else if (roles.all_users.name === roleId) {\n            role = {...roles.all_users};\n        }\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        if (roles.team_admin.name === roleId) {\n            roles.team_admin = role;\n        } else if (roles.channel_admin.name === roleId) {\n            roles.channel_admin = role;\n        } else if (roles.all_users.name === roleId) {\n            roles.all_users = role;\n        }\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    removeTeam = (teamId) => {\n        const teams = (this.state.teams || this.props.teams).filter((team) => team.id !== teamId);\n        this.setState({teams, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addTeams = (teams) => {\n        const currentTeams = this.state.teams || this.props.teams || [];\n        this.setState({\n            teams: [...currentTeams, ...teams],\n            saveNeeded: true,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    render = () => {\n        if (!this.isLoaded(this.props)) {\n            return <LoadingScreen/>;\n        }\n        const roles = this.getStateRoles();\n        const teams = this.state.teams || this.props.teams || [];\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        return (\n            <div className='wrapper--fixed'>\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        currentSchemeId={this.props.schemeId}\n                        alreadySelected={teams.map((team) => team.id)}\n                    />\n                }\n                <h3 className='admin-console-header with-back'>\n                    <BlockableLink\n                        to='/admin_console/permissions/schemes'\n                        className='fa fa-chevron-left back'\n                    />\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme'\n                        defaultMessage='Team Scheme'\n                    />\n                </h3>\n\n                <div className={'banner info'}>\n                    <div className='banner__content'>\n                        <span>\n                            <FormattedMarkdownMessage\n                                id='admin.permissions.teamScheme.introBanner'\n                                defaultMessage='[Team Override Schemes](!https://about.mattermost.com/default-team-override-scheme) set the permissions for Team Admins, Channel Admins and other members in specific teams. Use a Team Override Scheme when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                            />\n                        </span>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDetailsTitle'\n                                    defaultMessage='Scheme Details'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDetailsDescription'\n                                    defaultMessage='Set the name and description for this scheme.'\n                                />\n                            </span>\n                        </div>\n                    </div>\n                    <div className='team-scheme-details'>\n                        <div className='form-group'>\n                            <label\n                                className='control-label'\n                                htmlFor='scheme-name'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeNameLabel'\n                                    defaultMessage='Scheme Name:'\n                                />\n                            </label>\n                            <input\n                                id='scheme-name'\n                                className='form-control'\n                                type='text'\n                                value={schemeName}\n                                placeholder={localizeMessage('admin.permissions.teamScheme.schemeNamePlaceholder', 'Scheme Name')}\n                                onChange={this.handleNameChange}\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label'\n                                htmlFor='scheme-description'\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.schemeDescriptionLabel'\n                                    defaultMessage='Scheme Description:'\n                                />\n                            </label>\n                            <textarea\n                                id='scheme-description'\n                                className='form-control'\n                                rows='5'\n                                value={schemeDescription}\n                                placeholder={localizeMessage('admin.permissions.teamScheme.schemeDescriptionPlaceholder', 'Scheme Description')}\n                                onChange={this.handleDescriptionChange}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className='permissions-block'>\n                    <div className='header'>\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.selectTeamsTitle'\n                                    defaultMessage='Select teams to override permissions'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.selectTeamsDescription'\n                                    defaultMessage='Select teams where permission exceptions are required.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <a\n                                className='btn btn-primary'\n                                onClick={this.openAddTeam}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.addTeams'\n                                    defaultMessage='Add Teams'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                    <div className='teams-list'>\n                        {teams.length === 0 &&\n                            <div className='no-team-schemes'>\n                                <FormattedMessage\n                                    id='admin.permissions.teamScheme.noTeams'\n                                    defaultMessage='No team selected. Please add teams to this list.'\n                                />\n                            </div>}\n                        {teams.map((team) => (\n                            <TeamInList\n                                key={team.id}\n                                team={team}\n                                onRemoveTeam={this.removeTeam}\n                            />\n                        ))}\n                    </div>\n                </div>\n\n                <div\n                    className={'permissions-block all_users ' + (this.state.openRoles.all_users ? '' : 'closed')}\n                    id='all_users'\n                >\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('all_users')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersTitle'\n                                    defaultMessage='All Members'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.allMembersDescription'\n                                    defaultMessage='Permissions granted to all members, including administrators and newly created users.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        selected={this.state.selectedPermission}\n                        role={roles.all_users}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block channel_admin ' + (this.state.openRoles.channel_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('channel_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsTitle'\n                                    defaultMessage='Channel Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.channelAdminsDescription'\n                                    defaultMessage='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={roles.all_users}\n                        role={roles.channel_admin}\n                        scope={'channel_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className={'permissions-block team_admin ' + (this.state.openRoles.team_admin ? '' : 'closed')}>\n                    <div\n                        className='header'\n                        onClick={() => this.toggleRole('team_admin')}\n                    >\n                        <div>\n                            <h3>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsTitle'\n                                    defaultMessage='Team Administrators'\n                                />\n                            </h3>\n                            <span>\n                                <FormattedMessage\n                                    id='admin.permissions.systemScheme.teamAdminsDescription'\n                                    defaultMessage='Permissions granted to team creators and any users promoted to Team Administrator.'\n                                />\n                            </span>\n                        </div>\n                        <div className='button'>\n                            <AccordionToggleIcon/>\n                        </div>\n                    </div>\n                    <PermissionsTree\n                        parentRole={roles.all_users}\n                        role={roles.team_admin}\n                        scope={'team_scope'}\n                        onToggle={this.togglePermission}\n                        selectRow={this.selectRow}\n                    />\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/permissions/schemes'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams as loadTeams, searchTeams} from 'mattermost-redux/actions/teams';\nimport {getTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport TeamSelectorModal from './team_selector_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const teams = Object.values(getTeams(state) || {}).filter((team) => {\n        return team.display_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ||\n               team.description.toLowerCase().startsWith(searchTerm.toLowerCase());\n    });\n\n    return {\n        searchTerm,\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeams,\n            setModalSearchTerm,\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect.jsx';\nimport TeamInfo from 'components/team_info.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst TEAMS_PER_PAGE = 50;\n\nexport default class TeamSelectorModal extends React.Component {\n    static propTypes = {\n        currentSchemeId: PropTypes.string,\n        alreadySelected: PropTypes.array,\n        searchTerm: PropTypes.string.isRequired,\n        teams: PropTypes.array.isRequired,\n        onModalDismissed: PropTypes.func,\n        onTeamsSelected: PropTypes.func,\n        actions: PropTypes.shape({\n            loadTeams: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            searchTeams: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            loadingTeams: true,\n            confirmAddModal: false,\n            confirmAddTeam: null,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadTeams(0, TEAMS_PER_PAGE * 2).then(() => {\n            this.setTeamsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setTeamsLoadingState(true);\n                    await this.props.actions.searchTeams(searchTerm);\n                    this.setTeamsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        this.props.onTeamsSelected(this.state.values);\n        this.handleHide();\n    }\n\n    addValue = (value, confirmed = false) => {\n        if (value.scheme_id !== null && value.scheme_id !== '' && !confirmed) {\n            this.setState({confirmAddModal: true, confirmAddTeam: value});\n            return;\n        }\n        const values = Object.assign([], this.state.values);\n        const teamIds = values.map((v) => v.id);\n        if (value && value.id && teamIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values, confirmAddModal: false, confirmAddTeam: null});\n    }\n\n    setTeamsLoadingState = (loadingState) => {\n        this.setState({\n            loadingTeams: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setTeamsLoadingState(true);\n            this.props.actions.loadTeams(page + 1, TEAMS_PER_PAGE).then(() => {\n                this.setTeamsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term) => {\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd) {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    <TeamInfo team={option}/>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(team) {\n        return team.display_name;\n    }\n\n    renderConfirmModal(show, team) {\n        const title = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.title'\n                defaultMessage='Team Override Scheme Change?'\n            />\n        );\n        const message = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.message'\n                defaultMessage='This team is already selected in another team scheme, are you sure you want to move it to this team scheme?'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.accept'\n                defaultMessage='Yes, Move Team'\n            />\n        );\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButtonText}\n                onCancel={() => this.setState({confirmAddModal: false, confirmAddTeam: null})}\n                onConfirm={() => this.addValue(team, true)}\n            />\n        );\n    }\n\n    render() {\n        const confirmModal = this.renderConfirmModal(this.state.confirmAddModal, this.state.confirmAddTeam);\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectTeams'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        let teams = [];\n        if (this.props.teams) {\n            teams = this.props.teams.filter((team) => team.delete_at === 0);\n            teams = teams.filter((team) => team.scheme_id !== this.currentSchemeId);\n            teams = teams.filter((team) => this.props.alreadySelected.indexOf(team.id) === -1);\n            teams.sort((a, b) => {\n                const aName = a.display_name.toUpperCase();\n                const bName = b.display_name.toUpperCase();\n                if (aName === bName) {\n                    return 0;\n                }\n                if (aName > bName) {\n                    return 1;\n                }\n                return -1;\n            });\n        }\n\n        return (\n            <Modal\n                dialogClassName={'more-modal more-direct-channels team-selector-modal'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMarkdownMessage\n                            id='add_teams_to_scheme.title'\n                            defaultMessage='Add Teams To **Team Selection** List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {confirmModal}\n                    <MultiSelect\n                        key='addTeamsToSchemeKey'\n                        options={teams}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueKey='id'\n                        valueRenderer={this.renderValue}\n                        perPage={TEAMS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingTeams}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats as loadTeamStats} from 'mattermost-redux/actions/teams';\n\nimport {getTeamStats} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamInList from './team_in_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        stats: getTeamStats(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeamStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport TeamInfo from 'components/team_info';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onRemoveTeam: PropTypes.func,\n    }\n\n    render() {\n        const team = this.props.team;\n        return (\n            <div\n                className='team'\n                key={team.id}\n            >\n                <TeamInfo team={team}/>\n                <a\n                    className='remove'\n                    onClick={() => this.props.onRemoveTeam(team.id)}\n                >\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme.removeTeam'\n                        defaultMessage='Remove'\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams, getTeamStats} from 'mattermost-redux/actions/teams';\nimport {getUser, getUserAccessToken} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {Stats} from 'mattermost-redux/constants';\n\nimport {setSystemUsersSearch} from 'actions/views/search';\nimport {SearchUserTeamFilter} from 'utils/constants.jsx';\n\nimport SystemUsers from './system_users.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const mfaEnabled = (license && license.IsLicensed === 'true' && license.MFA === 'true') &&\n        config.EnableMultifactorAuthentication === 'true';\n    const enableUserAccessTokens = config.EnableUserAccessTokens === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    const search = state.views.search.systemUsersSearch;\n    let totalUsers = 0;\n    let searchTerm = '';\n    let teamId = '';\n    if (search) {\n        searchTerm = search.term || '';\n        teamId = search.team || '';\n\n        if (!teamId || teamId === SearchUserTeamFilter.ALL_USERS) {\n            const stats = state.entities.admin.analytics || {[Stats.TOTAL_USERS]: 0, [Stats.TOTAL_INACTIVE_USERS]: 0};\n            totalUsers = stats[Stats.TOTAL_USERS] + stats[Stats.TOTAL_INACTIVE_USERS];\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            totalUsers = 0;\n        } else {\n            const stats = state.entities.teams.stats[teamId] || {total_member_count: 0};\n            totalUsers = stats.total_member_count;\n        }\n    }\n\n    return {\n        teams: getTeamsList(state),\n        siteName,\n        mfaEnabled,\n        totalUsers,\n        searchTerm,\n        teamId,\n        enableUserAccessTokens,\n        experimentalEnableAuthenticationTransfer,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getTeamStats,\n            getUser,\n            getUserAccessToken,\n            setSystemUsersSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getStandardAnalytics} from 'actions/admin_actions.jsx';\nimport {reloadIfServerVersionChanged} from 'actions/global_actions.jsx';\nimport {loadProfiles, loadProfilesAndTeamMembers, loadProfilesWithoutTeam, searchUsers} from 'actions/user_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {Constants, UserSearchOptions, SearchUserTeamFilter} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport SystemUsersList from './list';\n\nconst USER_ID_LENGTH = 26;\nconst USERS_PER_PAGE = 50;\n\nexport default class SystemUsers extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /**\n         * Whether or not MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get statistics for a team\n             */\n            getTeamStats: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user\n             */\n            getUser: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user access token\n             */\n            getUserAccessToken: PropTypes.func.isRequired,\n            setSystemUsersSearch: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.loadDataForTeam = this.loadDataForTeam.bind(this);\n        this.loadComplete = this.loadComplete.bind(this);\n\n        this.handleTeamChange = this.handleTeamChange.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n\n        this.doSearch = this.doSearch.bind(this);\n        this.search = this.search.bind(this);\n        this.getUserById = this.getUserById.bind(this);\n\n        this.renderFilterRow = this.renderFilterRow.bind(this);\n\n        this.state = {\n            loading: true,\n            searching: false,\n        };\n    }\n\n    componentDidMount() {\n        this.loadDataForTeam(this.props.teamId);\n        this.props.actions.getTeams(0, 1000).then(reloadIfServerVersionChanged);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setSystemUsersSearch('', '');\n    }\n\n    loadDataForTeam(teamId) {\n        if (this.props.searchTerm) {\n            this.search(this.props.searchTerm, teamId);\n            return;\n        }\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            loadProfiles(0, Constants.PROFILE_CHUNK_SIZE, this.loadComplete);\n            getStandardAnalytics();\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            loadProfilesWithoutTeam(0, Constants.PROFILE_CHUNK_SIZE, this.loadComplete);\n        } else {\n            loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, teamId, this.loadComplete);\n            this.props.actions.getTeamStats(teamId);\n        }\n    }\n\n    loadComplete() {\n        this.setState({loading: false});\n    }\n\n    handleTeamChange(e) {\n        const teamId = e.target.value;\n        this.loadDataForTeam(teamId);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, teamId);\n    }\n\n    handleTermChange(term) {\n        this.props.actions.setSystemUsersSearch(term, this.props.teamId);\n    }\n\n    nextPage(page) {\n        // Paging isn't supported while searching\n\n        if (this.props.teamId === SearchUserTeamFilter.ALL_USERS) {\n            loadProfiles(page + 1, USERS_PER_PAGE, this.loadComplete);\n        } else if (this.props.teamId === SearchUserTeamFilter.NO_TEAM) {\n            loadProfilesWithoutTeam(page + 1, USERS_PER_PAGE, this.loadComplete);\n        } else {\n            loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE, this.props.teamId, this.loadComplete);\n        }\n    }\n\n    search(term, teamId = this.props.teamId) {\n        if (term === '') {\n            this.setState({\n                loading: false,\n            });\n\n            this.searchTimeoutId = '';\n            return;\n        }\n\n        this.doSearch(teamId, term);\n    }\n\n    doSearch(teamId, term, now = false) {\n        clearTimeout(this.searchTimeoutId);\n\n        this.setState({loading: true});\n\n        const options = {\n            [UserSearchOptions.ALLOW_INACTIVE]: true,\n        };\n        if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            options[UserSearchOptions.WITHOUT_TEAM] = true;\n        }\n\n        this.searchTimeoutId = setTimeout(\n            () => {\n                searchUsers(\n                    term,\n                    teamId,\n                    options,\n                    (users) => {\n                        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n                            // This term didn't match any users name, but it does look like it might be a user's ID\n                            this.getUserByTokenOrId(term);\n                        } else {\n                            this.setState({loading: false});\n                        }\n                    },\n                    () => {\n                        this.setState({loading: false});\n                    }\n                );\n            },\n            now ? 0 : Constants.SEARCH_TIMEOUT_MILLISECONDS\n        );\n    }\n\n    getUserById(id) {\n        if (UserStore.hasProfile(id)) {\n            this.setState({loading: false});\n            return;\n        }\n\n        this.props.actions.getUser(id).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    }\n\n    getUserByTokenOrId = async (id) => {\n        if (this.props.enableUserAccessTokens) {\n            const {data} = await this.props.actions.getUserAccessToken(id);\n\n            if (data) {\n                this.setState({term: data.user_id});\n                this.getUserById(data.user_id);\n                return;\n            }\n        }\n\n        this.getUserById(id);\n    }\n\n    renderFilterRow(doSearch) {\n        const teams = this.props.teams.map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='system-users__filter-row'>\n                <div className='system-users__filter'>\n                    <input\n                        id='searchUsers'\n                        ref='filter'\n                        className='form-control filter-textbox'\n                        placeholder={Utils.localizeMessage('filtered_user_list.search', 'Search users')}\n                        onInput={doSearch}\n                    />\n                </div>\n                <label>\n                    <span className='system-users__team-filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.show'\n                            defaultMessage='Filter:'\n                        />\n                    </span>\n                    <select\n                        className='form-control system-users__team-filter'\n                        onChange={this.handleTeamChange}\n                        value={this.props.teamId}\n                    >\n                        <option value={SearchUserTeamFilter.ALL_USERS}>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={SearchUserTeamFilter.NO_TEAM}>{Utils.localizeMessage('admin.system_users.noTeams', 'No Teams')}</option>\n                        {teams}\n                    </select>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.system_users.title'\n                        defaultMessage='{siteName} Users'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </h3>\n                <div className='more-modal__list member-list-holder'>\n                    <SystemUsersList\n                        loading={this.state.loading}\n                        renderFilterRow={this.renderFilterRow}\n                        search={this.search}\n                        nextPage={this.nextPage}\n                        usersPerPage={USERS_PER_PAGE}\n                        total={this.props.totalUsers}\n                        teams={this.props.teams}\n                        teamId={this.props.teamId}\n                        term={this.props.searchTerm}\n                        onTermChange={this.handleTermChange}\n                        mfaEnabled={this.props.mfaEnabled}\n                        enableUserAccessTokens={this.props.enableUserAccessTokens}\n                        experimentalEnableAuthenticationTransfer={this.props.experimentalEnableAuthenticationTransfer}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getUser} from 'mattermost-redux/actions/users';\nimport {updateTeamMemberSchemeRoles} from 'mattermost-redux/actions/teams';\n\nimport SystemUsersList from './system_users_list.jsx';\nimport {getUsers} from './selectors.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        users: getUsers(state, ownProps.loading, ownProps.teamId, ownProps.term),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUser,\n            updateTeamMemberSchemeRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ManageRolesModal from 'components/admin_console/manage_roles_modal';\nimport ManageTeamsModal from 'components/admin_console/manage_teams_modal/manage_teams_modal.jsx';\nimport ManageTokensModal from 'components/admin_console/manage_tokens_modal';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport ResetEmailModal from 'components/admin_console/reset_email_modal/reset_email_modal.jsx';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list.jsx';\nimport UserListRowWithError from 'components/user_list_row_with_error.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport SystemUsersDropdown from '../system_users_dropdown.jsx';\n\nexport default class SystemUsersList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        nextPage: PropTypes.func,\n        search: PropTypes.func.isRequired,\n        focusOnMount: PropTypes.bool,\n        renderFilterRow: PropTypes.func,\n\n        teamId: PropTypes.string.isRequired,\n        term: PropTypes.string.isRequired,\n        onTermChange: PropTypes.func.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getUser: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n\n            showManageTeamsModal: false,\n            showManageRolesModal: false,\n            showManageTokensModal: false,\n            showPasswordModal: false,\n            showEmailModal: false,\n            user: null,\n        };\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (nextProps.teamId !== this.props.teamId) {\n            this.setState({page: 0});\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search = (term) => {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    doManageTeams = (user) => {\n        this.setState({\n            showManageTeamsModal: true,\n            user,\n        });\n    }\n\n    doManageRoles = (user) => {\n        this.setState({\n            showManageRolesModal: true,\n            user,\n        });\n    }\n\n    doManageTokens = (user) => {\n        this.setState({\n            showManageTokensModal: true,\n            user,\n        });\n    }\n\n    doManageTeamsDismiss = () => {\n        this.setState({\n            showManageTeamsModal: false,\n            user: null,\n        });\n    }\n\n    doManageRolesDismiss = () => {\n        this.setState({\n            showManageRolesModal: false,\n            user: null,\n        });\n    }\n\n    doManageTokensDismiss = () => {\n        this.setState({\n            showManageTokensModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordReset = (user) => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = () => {\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doEmailReset = (user) => {\n        this.setState({\n            showEmailModal: true,\n            user,\n        });\n    }\n\n    doEmailResetDismiss = () => {\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    doEmailResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    getInfoForUser(user) {\n        const info = [];\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceNotEmail'\n                    id='admin.user_item.authServiceNotEmail'\n                    defaultMessage='**Sign-in Method:** {service}'\n                    values={{\n                        service,\n                    }}\n                />\n            );\n        } else {\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceEmail'\n                    id='admin.user_item.authServiceEmail'\n                    defaultMessage='**Sign-in Method:** Email'\n                />\n            );\n        }\n\n        if (this.props.mfaEnabled) {\n            info.push(', ');\n\n            if (user.mfa_active) {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaYes'\n                        id='admin.user_item.mfaYes'\n                        defaultMessage='**MFA**: Yes'\n                    />\n                );\n            } else {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaNo'\n                        id='admin.user_item.mfaNo'\n                        defaultMessage='**MFA**: No'\n                    />\n                );\n            }\n        }\n\n        return info;\n    }\n\n    renderCount(count, total, startCount, endCount, isSearch) {\n        if (total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countSearch'\n                        defaultMessage='{count, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            } else if (startCount !== 0 || endCount !== total) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countPage'\n                        defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            startCount: startCount + 1,\n                            endCount,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='system_users_list.count'\n                    defaultMessage='{count, number} {count, plural, one {user} other {users}}'\n                    values={{\n                        count,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const extraInfo = {};\n        if (this.props.users) {\n            for (const user of this.props.users) {\n                extraInfo[user.id] = this.getInfoForUser(user);\n            }\n        }\n\n        return (\n            <div>\n                <SearchableUserList\n                    {...this.props}\n                    renderCount={this.renderCount}\n                    extraInfo={extraInfo}\n                    actions={[SystemUsersDropdown]}\n                    actionProps={{\n                        mfaEnabled: this.props.mfaEnabled,\n                        enableUserAccessTokens: this.props.enableUserAccessTokens,\n                        experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer,\n                        doPasswordReset: this.doPasswordReset,\n                        doEmailReset: this.doEmailReset,\n                        doManageTeams: this.doManageTeams,\n                        doManageRoles: this.doManageRoles,\n                        doManageTokens: this.doManageTokens,\n                    }}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    search={this.search}\n                    page={this.state.page}\n                    term={this.props.term}\n                    onTermChange={this.props.onTermChange}\n                    rowComponentType={UserListRowWithError}\n                />\n                <ManageTeamsModal\n                    user={this.state.user}\n                    show={this.state.showManageTeamsModal}\n                    onModalDismissed={this.doManageTeamsDismiss}\n                    updateTeamMemberSchemeRoles={this.props.actions.updateTeamMemberSchemeRoles}\n                />\n                <ManageRolesModal\n                    user={this.state.user}\n                    show={this.state.showManageRolesModal}\n                    onModalDismissed={this.doManageRolesDismiss}\n                />\n                <ManageTokensModal\n                    user={this.state.user}\n                    show={this.state.showManageTokensModal}\n                    onModalDismissed={this.doManageTokensDismiss}\n                />\n                <ResetPasswordModal\n                    user={this.state.user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                <ResetEmailModal\n                    user={this.state.user}\n                    show={this.state.showEmailModal}\n                    onModalSubmit={this.doEmailResetSubmit}\n                    onModalDismissed={this.doEmailResetDismiss}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateUserRoles} from 'mattermost-redux/actions/users';\n\nimport ManageRolesModal from './manage_roles_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokensEnabled: state.entities.admin.config.ServiceSettings.EnableUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRolesModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport {General} from 'mattermost-redux/constants';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nfunction getStateFromProps(props) {\n    const roles = props.user && props.user.roles ? props.user.roles : '';\n\n    return {\n        error: null,\n        hasPostAllRole: UserUtils.hasPostAllRole(roles),\n        hasPostAllPublicRole: UserUtils.hasPostAllPublicRole(roles),\n        hasUserAccessTokenRole: UserUtils.hasUserAccessTokenRole(roles),\n        isSystemAdmin: UserUtils.isSystemAdmin(roles),\n    };\n}\n\nexport default class ManageRolesModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * Set if user access tokens are enabled\n         */\n        userAccessTokensEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to update a user's roles\n             */\n            updateUserRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = getStateFromProps(props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const user = this.props.user || {};\n        const nextUser = nextProps.user || {};\n        if (user.id !== nextUser.id) {\n            this.setState(getStateFromProps(nextProps));\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleSystemAdminChange = (e) => {\n        if (e.target.name === 'systemadmin') {\n            this.setState({isSystemAdmin: true});\n        } else if (e.target.name === 'systemmember') {\n            this.setState({isSystemAdmin: false});\n        }\n    };\n\n    handleUserAccessTokenChange = (e) => {\n        this.setState({\n            hasUserAccessTokenRole: e.target.checked,\n        });\n    };\n\n    handlePostAllChange = (e) => {\n        this.setState({\n            hasPostAllRole: e.target.checked,\n        });\n    };\n\n    handlePostAllPublicChange = (e) => {\n        this.setState({\n            hasPostAllPublicRole: e.target.checked,\n        });\n    };\n\n    trackRoleChanges = (roles, oldRoles) => {\n        if (UserUtils.hasUserAccessTokenRole(roles) && !UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        } else if (!UserUtils.hasUserAccessTokenRole(roles) && UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        }\n\n        if (UserUtils.hasPostAllRole(roles) && !UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        } else if (!UserUtils.hasPostAllRole(roles) && UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        }\n\n        if (UserUtils.hasPostAllPublicRole(roles) && !UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        } else if (!UserUtils.hasPostAllPublicRole(roles) && UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        }\n    }\n\n    handleSave = async () => {\n        this.setState({error: null});\n\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.isSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.hasUserAccessTokenRole) {\n            roles += ' ' + General.SYSTEM_USER_ACCESS_TOKEN_ROLE;\n            if (this.state.hasPostAllRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n            } else if (this.state.hasPostAllPublicRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n            }\n        }\n\n        const {data} = await this.props.actions.updateUserRoles(this.props.user.id, roles);\n\n        this.trackRoleChanges(roles, this.props.user.roles);\n\n        if (data) {\n            this.props.onModalDismissed();\n        } else {\n            this.handleError(\n                <FormattedMessage\n                    id='admin.manage_roles.saveError'\n                    defaultMessage='Unable to save roles.'\n                />\n            );\n        }\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n\n        if (user == null) {\n            return <div/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let additionalRoles;\n        if (this.state.hasUserAccessTokenRole || this.state.isSystemAdmin) {\n            additionalRoles = (\n                <div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='admin.manage_roles.additionalRoles'\n                            defaultMessage='Select additional permissions for the account. [Read more about roles and permissions](!https://about.mattermost.com/default-permissions).'\n                        />\n                    </p>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handlePostAllChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllRoleTitle'\n                                    defaultMessage='post:all'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllRole'\n                                defaultMessage='Access to post to all Mattermost channels including direct messages.'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postallpublic'\n                                checked={this.state.hasPostAllPublicRole || this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                onChange={this.handlePostAllPublicChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllPublicRoleTitle'\n                                    defaultMessage='post:channels'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllPublicRole'\n                                defaultMessage='Access to post to all Mattermost public channels.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        }\n\n        let userAccessTokenContent;\n        if (this.props.userAccessTokensEnabled) {\n            userAccessTokenContent = (\n                <div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasUserAccessTokenRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handleUserAccessTokenChange}\n                            />\n                            <FormattedMarkdownMessage\n                                id='admin.manage_roles.allowUserAccessTokens'\n                                defaultMessage='Allow this account to generate [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                            />\n                            <span className='d-block padding-top padding-bottom light'>\n                                <FormattedHTMLMessage\n                                    id='admin.manage_roles.allowUserAccessTokensDesc'\n                                    defaultMessage=\"Removing this permission doesn't delete existing tokens. To delete them, go to the user's Manage Tokens menu.\"\n                                />\n                            </span>\n                        </label>\n                    </div>\n                    <div className='member-row--padded'>\n                        {additionalRoles}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className='manage-row--inner'>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemadmin'\n                                    type='radio'\n                                    checked={this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemAdmin'\n                                    defaultMessage='System Admin'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemmember'\n                                    type='radio'\n                                    checked={!this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemMember'\n                                    defaultMessage='Member'\n                                />\n                            </label>\n                        </div>\n                    </div>\n                    {userAccessTokenContent}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.manage_roles.manageRolesTitle'\n                            defaultMessage='Manage Roles'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as TeamActions from 'actions/team_actions.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport ManageTeamsDropdown from './manage_teams_dropdown.jsx';\nimport RemoveFromTeamButton from './remove_from_team_button.jsx';\n\nexport default class ManageTeamsModal extends React.Component {\n    static propTypes = {\n        onModalDismissed: PropTypes.func.isRequired,\n        show: PropTypes.bool.isRequired,\n        user: PropTypes.object,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            teams: null,\n            teamMembers: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.user) {\n            this.loadTeamsAndTeamMembers();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : '';\n        const nextUserId = nextProps.user ? nextProps.user.id : '';\n\n        if (userId !== nextUserId) {\n            this.setState({\n                teams: null,\n                teamMembers: null,\n            });\n\n            if (nextProps.user) {\n                this.loadTeamsAndTeamMembers(nextProps.user);\n            }\n        }\n    }\n\n    loadTeamsAndTeamMembers = (user = this.props.user) => {\n        TeamActions.getTeamsForUser(user.id, (teams) => {\n            this.setState({\n                teams: filterAndSortTeamsByDisplayName(teams),\n            });\n        });\n\n        TeamActions.getTeamMembersForUser(user.id, (teamMembers) => {\n            this.setState({\n                teamMembers,\n            });\n        });\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleMemberChange = () => {\n        TeamActions.getTeamMembersForUser(this.props.user.id, (teamMembers) => {\n            this.setState({\n                teamMembers,\n            });\n        });\n    }\n\n    handleMemberRemove = (teamId) => {\n        this.setState({\n            teams: this.state.teams.filter((team) => team.id !== teamId),\n            teamMembers: this.state.teamMembers.filter((teamMember) => teamMember.team_id !== teamId),\n        });\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n        const {teams, teamMembers} = this.state;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        const isSystemAdmin = Utils.isAdmin(user.roles);\n\n        let name = Utils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let teamList;\n        if (teams && teamMembers) {\n            teamList = teams.map((team) => {\n                const teamMember = teamMembers.find((member) => member.team_id === team.id);\n                if (!teamMember) {\n                    return null;\n                }\n\n                let action;\n                if (isSystemAdmin) {\n                    action = (\n                        <RemoveFromTeamButton\n                            user={user}\n                            team={team}\n                            onError={this.handleError}\n                            onMemberRemove={this.handleMemberRemove}\n                        />\n                    );\n                } else {\n                    action = (\n                        <ManageTeamsDropdown\n                            user={user}\n                            team={team}\n                            teamMember={teamMember}\n                            onError={this.handleError}\n                            onMemberChange={this.handleMemberChange}\n                            onMemberRemove={this.handleMemberRemove}\n                            updateTeamMemberSchemeRoles={this.props.updateTeamMemberSchemeRoles}\n                        />\n                    );\n                }\n\n                return (\n                    <div\n                        key={team.id}\n                        className='manage-teams__team'\n                    >\n                        <div className='manage-teams__team-name'>\n                            {team.display_name}\n                        </div>\n                        <div className='manage-teams__team-actions'>\n                            {action}\n                        </div>\n                    </div>\n                );\n            });\n        } else {\n            teamList = <LoadingScreen/>;\n        }\n\n        let systemAdminIndicator = null;\n        if (isSystemAdmin) {\n            systemAdminIndicator = (\n                <div className='manage-teams__system-admin'>\n                    <FormattedMessage\n                        id='admin.user_item.sysAdmin'\n                        defaultMessage='System Admin'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                    {systemAdminIndicator}\n                </div>\n                <div className='manage-teams__teams'>\n                    {teamList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Dropdown, MenuItem} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {removeUserFromTeam} from 'actions/team_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ManageTeamsDropdown extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        onError: PropTypes.func.isRequired,\n        onMemberChange: PropTypes.func.isRequired,\n        onMemberRemove: PropTypes.func.isRequired,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n\n        this.removeFromTeam = this.removeFromTeam.bind(this);\n\n        this.handleMemberChange = this.handleMemberChange.bind(this);\n        this.handleMemberRemove = this.handleMemberRemove.bind(this);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    toggleDropdown() {\n        this.setState((prevState) => {\n            return {show: !prevState.show};\n        });\n    }\n\n    makeTeamAdmin = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.handleMemberChange();\n        }\n    };\n\n    makeMember = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.handleMemberChange();\n        }\n    };\n\n    removeFromTeam() {\n        removeUserFromTeam(\n            this.props.teamMember.team_id,\n            this.props.user.id,\n            this.handleMemberRemove,\n            this.props.onError\n        );\n    }\n\n    handleMemberChange() {\n        this.props.onMemberChange(this.props.teamMember.team_id);\n    }\n\n    handleMemberRemove() {\n        this.props.onMemberRemove(this.props.teamMember.team_id);\n    }\n\n    render() {\n        const isTeamAdmin = Utils.isAdmin(this.props.teamMember.roles) || this.props.teamMember.scheme_admin;\n\n        let title;\n        if (isTeamAdmin) {\n            title = Utils.localizeMessage('admin.user_item.teamAdmin', 'Team Admin');\n        } else {\n            title = Utils.localizeMessage('admin.user_item.teamMember', 'Team Member');\n        }\n\n        let makeTeamAdmin = null;\n        if (!isTeamAdmin) {\n            makeTeamAdmin = (\n                <MenuItem\n                    id='makeTeamAdmin'\n                    onSelect={this.makeTeamAdmin}\n                >\n                    <FormattedMessage\n                        id='admin.user_item.makeTeamAdmin'\n                        defaultMessage='Make Team Admin'\n                    />\n                </MenuItem>\n            );\n        }\n\n        let makeMember = null;\n        if (isTeamAdmin) {\n            makeMember = (\n                <MenuItem\n                    id='makeMember'\n                    onSelect={this.makeMember}\n                >\n                    <FormattedMessage\n                        id='admin.user_item.makeMember'\n                        defaultMessage='Make Member'\n                    />\n                </MenuItem>\n            );\n        }\n\n        return (\n            <Dropdown\n                id={`manage-teams-${this.props.user.id}-${this.props.teamMember.team_id}`}\n                open={this.state.show}\n                onToggle={this.toggleDropdown}\n            >\n                <Dropdown.Toggle useAnchor={true}>\n                    {title}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {makeTeamAdmin}\n                    {makeMember}\n                    <MenuItem\n                        id='removeFromTeam'\n                        onSelect={this.removeFromTeam}\n                    >\n                        <FormattedMessage\n                            id='team_members_dropdown.leave_team'\n                            defaultMessage='Remove from Team'\n                        />\n                    </MenuItem>\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {removeUserFromTeam} from 'actions/team_actions.jsx';\n\nexport default class RemoveFromTeamButton extends React.PureComponent {\n    static propTypes = {\n        onError: PropTypes.func.isRequired,\n        onMemberRemove: PropTypes.func.isRequired,\n        team: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleMemberRemove = this.handleMemberRemove.bind(this);\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n\n        removeUserFromTeam(\n            this.props.team.id,\n            this.props.user.id,\n            this.handleMemberRemove,\n            this.props.onError\n        );\n    }\n\n    handleMemberRemove() {\n        this.props.onMemberRemove(this.props.team.id);\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='team_members_dropdown.leave_team'\n                    defaultMessage='Remove from Team'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAccessTokensForUser} from 'mattermost-redux/actions/users';\n\nimport ManageTokensModal from './manage_tokens_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const userId = ownProps.user ? ownProps.user.id : '';\n\n    return {\n        userAccessTokens: state.entities.admin.userAccessTokensByUser[userId],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTokensModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport RevokeTokenButton from 'components/admin_console/revoke_token_button';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ManageTokensModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * The personal access tokens for a user, object with token ids as keys\n         */\n        userAccessTokens: PropTypes.object,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to get a user's access tokens\n             */\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {error: null};\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : null;\n        const nextUserId = nextProps.user ? nextProps.user.id : null;\n        if (nextUserId && nextUserId !== userId) {\n            this.props.actions.getUserAccessTokensForUser(nextUserId, 0, 200);\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    renderContents = () => {\n        const {user, userAccessTokens} = this.props;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let tokenList;\n        if (userAccessTokens) {\n            const userAccessTokensList = Object.values(userAccessTokens);\n\n            if (userAccessTokensList.length === 0) {\n                tokenList = (\n                    <div className='manage-row__empty'>\n                        <FormattedMessage\n                            id='admin.manage_tokens.userAccessTokensNone'\n                            defaultMessage='No personal access tokens.'\n                        />\n                    </div>\n                );\n            } else {\n                tokenList = userAccessTokensList.map((token) => {\n                    return (\n                        <div\n                            key={token.id}\n                            className='manage-teams__team'\n                        >\n                            <div className='manage-teams__team-name'>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensNameLabel'\n                                        defaultMessage='Token Description: '\n                                    />\n                                    {token.description}\n                                </div>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensIdLabel'\n                                        defaultMessage='Token ID: '\n                                    />\n                                    {token.id}\n                                </div>\n                            </div>\n                            <div className='manage-teams__team-actions'>\n                                <RevokeTokenButton\n                                    tokenId={token.id}\n                                    onError={this.handleError}\n                                />\n                            </div>\n                        </div>\n                    );\n                });\n            }\n        } else {\n            tokenList = <LoadingScreen/>;\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <img\n                        className='manage-teams__profile-picture'\n                        src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div className='padding-top x2'>\n                    <FormattedMarkdownMessage\n                        id='admin.manage_tokens.userAccessTokensDescription'\n                        defaultMessage='Personal access tokens function similarly to session tokens and can be used by integrations to [interact with this Mattermost server](!https://about.mattermost.com/default-api-authentication). Tokens are disabled if the user is deactivated. Learn more about [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                    />\n                </div>\n                <div className='manage-teams__teams'>\n                    {tokenList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='manage-teams'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='admin.manage_tokens.manageTokensTitle'\n                            defaultMessage='Manage Personal Access Tokens'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {revokeUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport RevokeTokenButton from './revoke_token_button.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            revokeUserAccessToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RevokeTokenButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nexport default class RevokeTokenButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Token id to revoke\n         */\n        tokenId: PropTypes.string.isRequired,\n\n        /*\n         * Function to call on error\n         */\n        onError: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to revoke a user access token\n             */\n            revokeUserAccessToken: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.revokeUserAccessToken(this.props.tokenId);\n        trackEvent('system_console', 'revoke_user_access_token');\n\n        if (error) {\n            this.props.onError(error.message);\n        }\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='admin.revoke_token_button.delete'\n                    defaultMessage='Delete'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ResetPasswordModal from './reset_password_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nexport default connect(mapStateToProps)(ResetPasswordModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {adminResetPassword} from 'actions/admin_actions.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ResetPasswordModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.doSubmit = this.doSubmit.bind(this);\n        this.doCancel = this.doCancel.bind(this);\n\n        this.state = {\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        };\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n    }\n\n    doSubmit(e) {\n        e.preventDefault();\n        let currentPassword = '';\n        if (this.refs.currentPassword) {\n            currentPassword = this.refs.currentPassword.value;\n            if (currentPassword === '') {\n                let errorMsg = '';\n                errorMsg = (\n                    <FormattedMessage\n                        id='admin.reset_password.missing_current'\n                        defaultMessage='Please enter your current password.'\n                    />\n                );\n                this.setState({serverErrorCurrentPass: errorMsg});\n                return;\n            }\n        }\n\n        const password = this.refs.password.value;\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({serverErrorNewPass: error});\n            return;\n        }\n\n        this.setState({serverErrorNewPass: null});\n\n        adminResetPassword(\n            this.props.user.id,\n            currentPassword,\n            password,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                this.setState({serverErrorCurrentPass: err.message});\n            }\n        );\n    }\n\n    doCancel() {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        const user = this.props.user;\n        if (user == null) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let serverErrorNewPass = null;\n\n        if (this.state.serverErrorNewPass) {\n            urlClass += ' has-error';\n            serverErrorNewPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorNewPass}</p></div>;\n        }\n\n        let title;\n        if (user.auth_service) {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleSwitch'\n                    defaultMessage='Switch Account to Email/Password'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleReset'\n                    defaultMessage='Reset Password'\n                />\n            );\n        }\n\n        const currentUserId = UserStore.getCurrentId();\n        let currentPassword = null;\n        let serverErrorCurrentPass = null;\n        let newPasswordFocus = true;\n        if (currentUserId === user.id) {\n            newPasswordFocus = false;\n            let urlClassCurrentPass = 'input-group input-group--limit';\n            if (this.state.serverErrorCurrentPass) {\n                urlClassCurrentPass += ' has-error';\n                serverErrorCurrentPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorCurrentPass}</p></div>;\n            }\n            currentPassword = (\n                <div className='col-sm-10 password__group-addon-space'>\n                    <div className={urlClassCurrentPass}>\n                        <span\n                            data-toggle='tooltip'\n                            title='Current Password'\n                            className='input-group-addon password__group-addon'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.curentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </span>\n                        <input\n                            type='password'\n                            ref='currentPassword'\n                            className='form-control'\n                            maxLength='22'\n                            autoFocus={true}\n                            tabIndex='1'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            {currentPassword}\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Password'\n                                        className='input-group-addon password__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_password.newPassword'\n                                            defaultMessage='New Password'\n                                        />\n                                    </span>\n                                    <input\n                                        type='password'\n                                        ref='password'\n                                        className='form-control'\n                                        maxLength='22'\n                                        autoFocus={newPasswordFocus}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {serverErrorNewPass}\n                                {serverErrorCurrentPass}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {adminResetEmail} from 'actions/admin_actions.jsx';\n\nexport default class ResetEmailModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n    }\n\n    doSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.refs.email) {\n            const email = this.refs.email.value;\n            if (!isEmail(email)) {\n                const errMsg = (\n                    <FormattedMessage\n                        id='user.settings.general.validEmail'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                );\n                this.setState({error: errMsg});\n                return;\n            }\n        }\n\n        const user = Object.assign({}, this.props.user);\n        const email = this.refs.email.value.trim().toLowerCase();\n        user.email = email;\n\n        this.setState({error: null});\n\n        adminResetEmail(\n            user,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                const serverError = err.message ? err.message : err;\n                this.setState({error: serverError});\n            }\n        );\n    }\n\n    doCancel = () => {\n        this.setState({error: null});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        if (!this.props.user) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let errorMsg = null;\n        if (this.state.error) {\n            urlClass += ' has-error';\n            errorMsg = <div className='has-error'><p className='input__help error'>{this.state.error}</p></div>;\n        }\n\n        const title = (\n            <FormattedMessage\n                id='admin.reset_email.titleReset'\n                defaultMessage='Update Email'\n            />\n        );\n\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.doCancel}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Email'\n                                        className='input-group-addon email__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_email.newEmail'\n                                            defaultMessage='New Email'\n                                        />\n                                    </span>\n                                    <input\n                                        type='email'\n                                        ref='email'\n                                        className='form-control'\n                                        maxLength='128'\n                                        autoFocus={true}\n                                        tabIndex='1'\n                                    />\n                                </div>\n                                {errorMsg}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            tabIndex='2'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Client4} from 'mattermost-redux/client';\n\nimport UserStore from 'stores/user_store.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserListRowWithError extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        extraInfo: PropTypes.arrayOf(PropTypes.object),\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        userCount: PropTypes.number,\n    };\n\n    static defaultProps = {\n        extraInfo: [],\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n        this.onError = this.onError.bind(this);\n    }\n\n    onError(errorObj) {\n        this.setState({\n            error: errorObj,\n        });\n    }\n\n    render() {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                        onError={this.onError}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedMarkdownMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='**Email:** {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else if (this.props.user.status) {\n            status = this.props.user.status;\n        } else {\n            status = UserStore.getStatus(this.props.user.id);\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.error.message}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status}\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__right'>\n                    <div className='more-modal__top'>\n                        <div className='more-modal__details'>\n                            <div\n                                id={userCountID}\n                                className='more-modal__name'\n                            >\n                                {Utils.displayEntireNameForUser(this.props.user)}\n                            </div>\n                            <div\n                                id={userCountEmail}\n                                className={emailStyle}\n                            >\n                                {email}\n                            </div>\n                            {this.props.extraInfo}\n                        </div>\n                        <div\n                            className='more-modal__actions'\n                        >\n                            {buttons}\n                        </div>\n                    </div>\n                    <div\n                        className='more-modal__bottom'\n                    >\n                        {error}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {adminResetMfa} from 'actions/admin_actions.jsx';\nimport {updateActive, revokeAllSessions} from 'actions/user_actions.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport {Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport {browserHistory} from 'utils/browser_history';\n\nexport default class SystemUsersDropdown extends React.Component {\n    static propTypes = {\n\n        /*\n         * User to manage with dropdown\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        /*\n         * Function to open password reset, takes user as an argument\n         */\n        doPasswordReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open email reset, takes user as an argument\n         */\n        doEmailReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage teams, takes user as an argument\n         */\n        doManageTeams: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage roles, takes user as an argument\n         */\n        doManageRoles: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage tokens, takes user as an argument\n         */\n        doManageTokens: PropTypes.func.isRequired,\n\n        /*\n         * The function to call when an error occurs\n         */\n        onError: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showDemoteModal: false,\n            showDeactivateMemberModal: false,\n            showRevokeSessionsModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeActive = (e) => {\n        e.preventDefault();\n        updateActive(this.props.user.id, true, null, this.props.onError);\n    }\n\n    handleManageTeams = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTeams(this.props.user);\n    }\n\n    handleManageRoles = (e) => {\n        e.preventDefault();\n\n        this.props.doManageRoles(this.props.user);\n    }\n\n    handleManageTokens = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTokens(this.props.user);\n    }\n\n    handleResetPassword = (e) => {\n        e.preventDefault();\n        this.props.doPasswordReset(this.props.user);\n    }\n\n    handleResetEmail = (e) => {\n        e.preventDefault();\n        this.props.doEmailReset(this.props.user);\n    }\n\n    handleResetMfa = (e) => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, this.props.onError);\n    }\n\n    handleDemoteSystemAdmin = (user, role) => {\n        this.setState({\n            showDemoteModal: true,\n            user,\n            role,\n        });\n    }\n\n    handleDemoteCancel = () => {\n        this.setState({\n            showDemoteModal: false,\n            user: null,\n            role: null,\n        });\n        this.props.onError(null);\n    }\n\n    handleDemoteSubmit = () => {\n        if (this.state.role === 'member') {\n            this.doMakeMember();\n        }\n\n        const teamUrl = TeamStore.getCurrentTeamUrl();\n        if (teamUrl) {\n            // the channel is added to the URL cause endless loading not being fully fixed\n            browserHistory.push(teamUrl + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            browserHistory.push('/');\n        }\n    }\n\n    handleShowDeactivateMemberModal = (e) => {\n        e.preventDefault();\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = () => {\n        updateActive(this.props.user.id, false, null, this.props.onError);\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    handleDeactivateCancel = () => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    renderDeactivateMemberModal = () => {\n        const user = this.props.user;\n\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const message = (\n            <div>\n                <FormattedMessage\n                    id='deactivate_member_modal.desc'\n                    defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system. Are you sure you want to deactivate {username}?'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    handleShowRevokeSessionsModal = (e) => {\n        e.preventDefault();\n        this.setState({showRevokeSessionsModal: true});\n    }\n\n    handleRevokeSessions = () => {\n        const me = UserStore.getCurrentUser();\n        revokeAllSessions(this.props.user.id,\n            () => {\n                if (this.props.user.id === me.id) {\n                    emitUserLoggedOutEvent();\n                }\n            },\n            this.props.onError\n        );\n\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handleRevokeSessionsCancel = () => {\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    renderRevokeSessionsModal = () => {\n        const title = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.title'\n                defaultMessage='Revoke Sessions for {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.desc'\n                defaultMessage='This action revokes all sessions for {username}. They will be logged out from all devices. Are you sure you want to revoke all sessions for {username}?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const revokeUserButtonButton = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.revoke'\n                defaultMessage='Revoke'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={revokeUserButtonButton}\n                onConfirm={this.handleRevokeSessions}\n                onCancel={this.handleRevokeSessionsCancel}\n            />\n        );\n    }\n\n    renderAccessToken = () => {\n        const userAccessTokensEnabled = this.props.enableUserAccessTokens;\n        if (!userAccessTokensEnabled) {\n            return null;\n        }\n\n        const user = this.props.user;\n        const hasPostAllRole = UserUtils.hasPostAllRole(user.roles);\n        const hasPostAllPublicRole = UserUtils.hasPostAllPublicRole(user.roles);\n        const hasUserAccessTokenRole = UserUtils.hasUserAccessTokenRole(user.roles);\n        const isSystemAdmin = UserUtils.isSystemAdmin(user.roles);\n\n        let messageId = '';\n        if (hasUserAccessTokenRole || isSystemAdmin) {\n            if (hasPostAllRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAll');\n            } else if (hasPostAllPublicRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAllPublic');\n            } else {\n                messageId = t('admin.user_item.userAccessTokenYes');\n            }\n        }\n\n        if (!messageId) {\n            return null;\n        }\n\n        return (\n            <div className='light margin-top half'>\n                <FormattedMessage\n                    key='admin.user_item.userAccessToken'\n                    id={messageId}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n        if (!user) {\n            return <div/>;\n        }\n        let currentRoles = (\n            <FormattedMessage\n                id='admin.user_item.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        }\n\n        const me = UserStore.getCurrentUser();\n        let showMakeActive = false;\n        let showMakeNotActive = !Utils.isSystemAdmin(user.roles);\n        let showManageTeams = true;\n        let showRevokeSessions = true;\n        const showMfaReset = this.props.mfaEnabled && user.mfa_active;\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='admin.user_item.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeActive = true;\n            showMakeNotActive = false;\n            showManageTeams = false;\n            showRevokeSessions = false;\n        }\n\n        let disableActivationToggle = false;\n        if (user.auth_service === Constants.LDAP_SERVICE) {\n            disableActivationToggle = true;\n        }\n\n        let menuClass = '';\n        if (disableActivationToggle) {\n            menuClass = 'disabled';\n        }\n\n        let makeActive = null;\n        if (showMakeActive) {\n            makeActive = (\n                <li\n                    role='presentation'\n                    className={menuClass}\n                >\n                    <a\n                        id='activate'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleMakeActive}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.makeActive'\n                            defaultMessage='Activate'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let makeNotActive = null;\n        if (showMakeNotActive) {\n            makeNotActive = (\n                <li\n                    role='presentation'\n                    className={menuClass}\n                >\n                    <a\n                        id='deactivate'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleShowDeactivateMemberModal}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.makeInactive'\n                            defaultMessage='Deactivate'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let manageTeams = null;\n        if (showManageTeams) {\n            manageTeams = (\n                <li role='presentation'>\n                    <a\n                        id='manageTeams'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleManageTeams}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let mfaReset = null;\n        if (showMfaReset) {\n            mfaReset = (\n                <li role='presentation'>\n                    <a\n                        id='removeMFA'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetMfa}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetMfa'\n                            defaultMessage='Remove MFA'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let passwordReset;\n        if (user.auth_service) {\n            if (this.props.experimentalEnableAuthenticationTransfer) {\n                passwordReset = (\n                    <li role='presentation'>\n                        <a\n                            id='switchEmailPassword'\n                            role='menuitem'\n                            href='#'\n                            onClick={this.handleResetPassword}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.switchToEmail'\n                                defaultMessage='Switch to Email/Password'\n                            />\n                        </a>\n                    </li>\n                );\n            }\n        } else {\n            passwordReset = (\n                <li role='presentation'>\n                    <a\n                        id='resetPassword'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetPassword}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetPwd'\n                            defaultMessage='Reset Password'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let emailReset;\n        if (!user.auth_service) {\n            emailReset = (\n                <li role='presentation'>\n                    <a\n                        id='resetEmail'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleResetEmail}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.resetEmail'\n                            defaultMessage='Update Email'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let revokeSessions;\n        if (showRevokeSessions) {\n            revokeSessions = (\n                <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                    <li role='presentation'>\n                        <a\n                            id='revokeSessions'\n                            role='menuItem'\n                            href='#'\n                            onClick={this.handleShowRevokeSessionsModal}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.revokeSessions'\n                                defaultMessage='Revoke Sessions'\n                            />\n                        </a>\n                    </li>\n                </SystemPermissionGate>\n            );\n        }\n\n        let manageTokens;\n        if (this.props.enableUserAccessTokens) {\n            manageTokens = (\n                <li role='presentation'>\n                    <a\n                        id='manageTokens'\n                        role='menuitem'\n                        href='#'\n                        onClick={this.handleManageTokens}\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTokens'\n                            defaultMessage='Manage Tokens'\n                        />\n                    </a>\n                </li>\n            );\n        }\n\n        let makeDemoteModal = null;\n        if (this.props.user.id === me.id) {\n            const title = (\n                <FormattedMessage\n                    id='admin.user_item.confirmDemoteRoleTitle'\n                    defaultMessage='Confirm demotion from System Admin role'\n                />\n            );\n\n            const message = (\n                <div>\n                    <FormattedMessage\n                        id='admin.user_item.confirmDemoteDescription'\n                        defaultMessage=\"If you demote yourself from the System Admin role and there is not another user with System Admin privileges, you'll need to re-assign a System Admin by accessing the Mattermost server through a terminal and running the following command.\"\n                    />\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='admin.user_item.confirmDemotionCmd'\n                        defaultMessage='platform roles system_admin {username}'\n                        values={{\n                            username: me.username,\n                        }}\n                    />\n                </div>\n            );\n\n            const confirmButton = (\n                <FormattedMessage\n                    id='admin.user_item.confirmDemotion'\n                    defaultMessage='Confirm Demotion'\n                />\n            );\n\n            makeDemoteModal = (\n                <ConfirmModal\n                    show={this.state.showDemoteModal}\n                    title={title}\n                    message={message}\n                    confirmButtonText={confirmButton}\n                    onConfirm={this.handleDemoteSubmit}\n                    onCancel={this.handleDemoteCancel}\n                />\n            );\n        }\n\n        const deactivateMemberModal = this.renderDeactivateMemberModal();\n        const revokeSessionsModal = this.renderRevokeSessionsModal();\n\n        return (\n            <div className='dropdown member-drop text-right'>\n                <a\n                    id='memberDropdown'\n                    href='#'\n                    className='dropdown-toggle theme'\n                    type='button'\n                    data-toggle='dropdown'\n                    aria-expanded='true'\n                >\n                    <span>{currentRoles} </span>\n                    <span className='caret'/>\n                </a>\n                {this.renderAccessToken()}\n                <ul\n                    className='dropdown-menu member-menu'\n                    role='menu'\n                >\n                    {makeActive}\n                    {makeNotActive}\n                    <li role='presentation'>\n                        <a\n                            id='manageRoles'\n                            role='menuitem'\n                            href='#'\n                            onClick={this.handleManageRoles}\n                        >\n                            <FormattedMessage\n                                id='admin.user_item.manageRoles'\n                                defaultMessage='Manage Roles'\n                            />\n                        </a>\n                    </li>\n                    {manageTeams}\n                    {manageTokens}\n                    {mfaReset}\n                    {passwordReset}\n                    {emailReset}\n                    {revokeSessions}\n                </ul>\n                {makeDemoteModal}\n                {deactivateMemberModal}\n                {revokeSessionsModal}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getUser, getProfiles, getProfilesInTeam, getProfilesWithoutTeam, searchProfiles, searchProfilesInTeam} from 'mattermost-redux/selectors/entities/users';\n\nconst ALL_USERS = '';\nconst NO_TEAM = 'no_team';\nconst USER_ID_LENGTH = 26;\n\nexport function getUsers(state, loading, teamId, term) {\n    if (loading) {\n        // Show no users while loading.\n        return [];\n    }\n\n    if (term) {\n        let users = [];\n        if (teamId) {\n            users = searchProfilesInTeam(state, teamId, term);\n        } else {\n            users = searchProfiles(state, term);\n        }\n\n        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n            const user = getUser(state, term);\n            if (user) {\n                users = [user];\n            }\n        }\n\n        return users;\n    }\n\n    if (teamId === ALL_USERS) {\n        return getProfiles(state);\n    } else if (teamId === NO_TEAM) {\n        return getProfilesWithoutTeam(state);\n    }\n\n    return getProfilesInTeam(state, teamId);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getLogs} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport Logs from './logs.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        logs: Selectors.getLogs(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLogs,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nimport LogList from './log_list.jsx';\n\nexport default class Logs extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        nextPage: PropTypes.func,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch logs\n             */\n            getLogs: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingLogs: true,\n            page: 0,\n            perPage: 1000,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState) { // eslint-disable-line camelcase\n        if (this.state.page !== nextState.page) {\n            this.props.actions.getLogs(nextState.page, nextState.perPage).then(\n                () => this.setState({loadingLogs: false})\n            );\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    reload = () => {\n        this.setState({loadingLogs: true});\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (this.state.loadingLogs) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <LogList\n                    {...this.props}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    page={this.state.page}\n                    perPage={this.state.perPage}\n                />\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <h3 className='admin-console-header'>\n                    <FormattedMessage\n                        id='admin.logs.title'\n                        defaultMessage='Server Logs'\n                    />\n                </h3>\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.logs.bannerDesc'\n                            defaultMessage='To look up users by User ID or Token ID, go to Reporting > Users and paste the ID into the search filter.'\n                        />\n                    </div>\n                </div>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                    onClick={this.reload}\n                >\n                    <FormattedMessage\n                        id='admin.logs.reload'\n                        defaultMessage='Reload'\n                    />\n                </button>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\nexport default class Logs extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        page: PropTypes.number.isRequired,\n        perPage: PropTypes.number.isRequired,\n        nextPage: PropTypes.func.isRequired,\n        previousPage: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.nextPage = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // Scroll Down to get the latest logs\n        var node = this.refs.logPanel;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    componentDidUpdate() {\n        // Scroll Down to get the latest logs\n        var node = this.refs.logPanel;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    nextPage(e) {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n    }\n\n    previousPage(e) {\n        e.preventDefault();\n\n        this.props.previousPage();\n    }\n\n    render() {\n        let content = null;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.logs.length >= this.props.perPage) {\n            nextButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__next pull-right'\n                    onClick={this.nextPage}\n                    disabled={this.state.nextDisabled}\n                >\n                    <FormattedMessage\n                        id='admin.logs.next'\n                        defaultMessage='Next'\n                    />\n                    <i\n                        className='fa fa-chevron-right margin-left'\n                        title={localizeMessage('generic_icons.next', 'Next Icon')}\n                    />\n                </button>\n            );\n        }\n\n        if (this.props.page > 0) {\n            previousButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__prev'\n                    onClick={this.previousPage}\n                >\n                    <i\n                        className='fa fa-angle-left'\n                        title={localizeMessage('generic_icons.previous', 'Previous Icon')}\n                    />\n                    <FormattedMessage\n                        id='admin.logs.prev'\n                        defaultMessage='Previous'\n                    />\n                </button>\n            );\n        }\n\n        content = [];\n\n        for (let i = 0; i < this.props.logs.length; i++) {\n            const style = {\n                whiteSpace: 'nowrap',\n                fontFamily: 'monospace',\n            };\n\n            if (this.props.logs[i].indexOf('[EROR]') > 0) {\n                style.color = 'red';\n            }\n\n            content.push(<br key={'br_' + i}/>);\n            content.push(\n                <span\n                    key={'log_' + i}\n                    style={style}\n                >\n                    {this.props.logs[i]}\n                </span>\n            );\n        }\n\n        return (\n            <div>\n                <div\n                    tabIndex='-1'\n                    ref='logPanel'\n                    className='log__panel'\n                >\n                    {content}\n                </div>\n                <div className='padding-top padding-bottom x2 filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {uploadBrandImage} from 'actions/admin_actions.jsx';\nimport {UploadStatuses} from 'utils/constants.jsx';\nimport FormError from 'components/form_error.jsx';\n\nimport UploadButton from './upload_button.jsx';\n\nconst HTTP_STATUS_OK = 200;\n\nexport default class BrandImageSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleImageChange = this.handleImageChange.bind(this);\n        this.handleImageSubmit = this.handleImageSubmit.bind(this);\n\n        this.state = {\n            brandImage: null,\n            brandImageExists: false,\n            brandImageTimestamp: Date.now(),\n            error: '',\n            status: UploadStatuses.DEFAULT,\n        };\n    }\n\n    UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        fetch(Client4.getBrandImageUrl(this.state.brandImageTimestamp)).then(\n            (resp) => {\n                if (resp.status === HTTP_STATUS_OK) {\n                    this.setState({brandImageExists: true});\n                } else {\n                    this.setState({brandImageExists: false});\n                }\n            }\n        );\n    }\n\n    componentDidUpdate() {\n        if (this.refs.image) {\n            const reader = new FileReader();\n\n            const img = this.refs.image;\n            reader.onload = (e) => {\n                $(img).attr('src', e.target.result);\n            };\n\n            reader.readAsDataURL(this.state.brandImage);\n        }\n    }\n\n    handleImageChange() {\n        const element = $(this.refs.fileInput);\n\n        if (element.prop('files').length > 0) {\n            this.setState({\n                brandImage: element.prop('files')[0],\n                status: UploadStatuses.DEFAULT,\n            });\n        }\n    }\n\n    handleImageSubmit(e) {\n        e.preventDefault();\n\n        if (!this.state.brandImage) {\n            return;\n        }\n\n        if (this.state.status === UploadStatuses.LOADING) {\n            return;\n        }\n\n        this.setState({\n            error: '',\n            status: UploadStatuses.LOADING,\n        });\n\n        uploadBrandImage(\n            this.state.brandImage,\n            () => {\n                this.setState({\n                    brandImageExists: true,\n                    brandImage: null,\n                    brandImageTimestamp: Date.now(),\n                    status: UploadStatuses.COMPLETE,\n                });\n            },\n            (err) => {\n                this.setState({\n                    error: err.message,\n                    status: UploadStatuses.DEFAULT,\n                });\n            }\n        );\n    }\n\n    render() {\n        let btnPrimaryClass = 'btn';\n        if (this.state.brandImage) {\n            btnPrimaryClass += ' btn-primary';\n        }\n\n        let letbtnDefaultClass = 'btn';\n        if (!this.props.disabled) {\n            letbtnDefaultClass += ' btn-default';\n        }\n\n        let img = null;\n        if (this.state.brandImage) {\n            img = (\n                <img\n                    ref='image'\n                    className='brand-img'\n                    src=''\n                />\n            );\n        } else if (this.state.brandImageExists) {\n            img = (\n                <img\n                    className='brand-img'\n                    src={Client4.getBrandImageUrl(this.state.brandImageTimestamp)}\n                />\n            );\n        } else {\n            img = (\n                <p>\n                    <FormattedMessage\n                        id='admin.team.noBrandImage'\n                        defaultMessage='No brand image uploaded'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label className='control-label col-sm-4'>\n                    <FormattedMessage\n                        id='admin.team.brandImageTitle'\n                        defaultMessage='Custom Brand Image:'\n                    />\n                </label>\n                <div className='col-sm-8'>\n                    {img}\n                </div>\n                <div className='col-sm-4'/>\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button\n                            className={letbtnDefaultClass}\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.team.chooseImage'\n                                defaultMessage='Choose New Image'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.jpg,.png,.bmp'\n                            disabled={this.props.disabled}\n                            onChange={this.handleImageChange}\n                        />\n                    </div>\n                    <UploadButton\n                        primaryClass={btnPrimaryClass}\n                        status={this.state.status}\n                        disabled={this.props.disabled || !this.state.brandImage}\n                        onClick={this.handleImageSubmit}\n                    />\n                    <br/>\n                    <FormError error={this.state.error}/>\n                    <p className='help-text no-margin'>\n                        <FormattedHTMLMessage\n                            id='admin.team.uploadDesc'\n                            defaultMessage='Customize your user experience by adding a custom image to your login screen. See examples at <a href=\"http://docs.mattermost.com/administration/config-settings.html#custom-branding\" target=\"_blank\">docs.mattermost.com/administration/config-settings.html#custom-branding</a>.'\n                        />\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {UploadStatuses} from 'utils/constants.jsx';\n\nexport default class UploadButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Upload status - loading, complete, default ('')\n         */\n        status: PropTypes.string,\n\n        /*\n         * Primary class of the button\n         */\n        primaryClass: PropTypes.string,\n\n        /*\n         * Disable the button\n         */\n        disabled: PropTypes.bool,\n\n        /*\n         * Funtion to call on button click\n         */\n        onClick: PropTypes.func,\n    }\n\n    render() {\n        const {\n            status,\n            primaryClass,\n            disabled,\n            onClick,\n        } = this.props;\n\n        let buttonIcon;\n        let buttonText;\n\n        switch (status) {\n        case UploadStatuses.LOADING:\n            buttonIcon = (\n                <i\n                    className='fa fa-refresh icon--rotate'\n                    title={Utils.localizeMessage('generic_icons.loading', 'Loading Icon')}\n                />\n            );\n            buttonText = Utils.localizeMessage('admin.team.uploading', 'Uploading..');\n            break;\n        case UploadStatuses.COMPLETE:\n            buttonIcon = (\n                <i\n                    className='fa fa-check'\n                    title={Utils.localizeMessage('generic_icons.success', 'Success Icon')}\n                />\n            );\n            buttonText = Utils.localizeMessage('admin.team.uploaded', 'Uploaded!');\n            break;\n        default:\n            buttonText = Utils.localizeMessage('admin.team.upload', 'Upload');\n        }\n\n        return (\n            <button\n                className={primaryClass}\n                disabled={disabled}\n                onClick={onClick}\n                id='upload-button'\n            >\n                {buttonIcon}\n                {' '}\n                {buttonText}\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\n\nimport SetByEnv from './set_by_env';\n\nexport default class Settings extends PureComponent {\n    static propTypes = {\n        inputId: PropTypes.string,\n        label: PropTypes.node.isRequired,\n        children: PropTypes.node.isRequired,\n        helpText: PropTypes.node,\n        setByEnv: PropTypes.bool,\n    };\n\n    render() {\n        const {\n            children,\n            setByEnv,\n            helpText,\n            inputId,\n            label,\n        } = this.props;\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <div className='col-sm-8'>\n                    {children}\n                    <div className='help-text'>\n                        {helpText}\n                    </div>\n                    {setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SettingsGroup extends React.Component {\n    static get propTypes() {\n        return {\n            show: PropTypes.bool.isRequired,\n            header: PropTypes.node,\n            children: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            show: true,\n        };\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n\n        let header = null;\n        if (this.props.header) {\n            header = (\n                <h4>\n                    {this.props.header}\n                </h4>\n            );\n        }\n\n        return (\n            <div className='admin-settings__group'>\n                {header}\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class TextSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number,\n            ]).isRequired,\n            maxLength: PropTypes.number,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n            type: PropTypes.oneOf([\n                'number',\n                'input',\n                'textarea',\n            ]),\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            type: 'input',\n            maxLength: null,\n        };\n    }\n\n    handleChange = (e) => {\n        if (this.props.type === 'number') {\n            this.props.onChange(this.props.id, parseInt(e.target.value, 10));\n        } else {\n            this.props.onChange(this.props.id, e.target.value);\n        }\n    }\n\n    render() {\n        let input = null;\n        if (this.props.type === 'input') {\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        } else if (this.props.type === 'number') {\n            input = (\n                <input\n                    id={this.props.id}\n                    className='form-control'\n                    type='number'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        } else if (this.props.type === 'textarea') {\n            input = (\n                <textarea\n                    id={this.props.id}\n                    className='form-control'\n                    rows='5'\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    maxLength={this.props.maxLength}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                {input}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {saveConfig} from 'actions/admin_actions.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport FormError from 'components/form_error.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport default class AdminSettings extends React.Component {\n    static propTypes = {\n\n        /*\n         * Object representing the config file\n         */\n        config: PropTypes.object,\n\n        /*\n         * Object containing config fields that have been set through environment variables\n         */\n        environmentConfig: PropTypes.object,\n\n        /*\n         * Action for whether a save is needed\n         */\n        setNavigationBlocked: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = Object.assign(this.getStateFromConfig(props.config), {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        });\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    handleChange = (id, value) => {\n        this.setState({\n            saveNeeded: true,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.doSubmit();\n    }\n\n    doSubmit = (callback) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        saveConfig(\n            config,\n            (savedConfig) => {\n                this.setState(this.getStateFromConfig(savedConfig));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                this.props.setNavigationBlocked(false);\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            },\n            (err) => {\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                    serverErrorId: err.id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        );\n    };\n\n    parseInt = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n)) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    parseIntNonNegative = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 0) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    parseIntNonZero = (str, defaultValue) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 1) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 1;\n        }\n\n        return n;\n    };\n\n    getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[pathPart];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = pathParts[0];\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(this.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    render() {\n        return (\n            <div className='wrapper--fixed'>\n                <h3 className='admin-console-header'>\n                    {this.renderTitle()}\n                </h3>\n                <form\n                    className='form-horizontal'\n                    role='form'\n                    onSubmit={this.handleSubmit}\n                >\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref='errorMessage'\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            delayShow={Constants.OVERLAY_TIME_DELAY}\n                            placement='top'\n                            target={this.refs.errorMessage}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting.jsx';\n\nexport default class BooleanSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.bool.isRequired,\n        onChange: PropTypes.func.isRequired,\n        trueText: PropTypes.node,\n        falseText: PropTypes.node,\n        disabled: PropTypes.bool.isRequired,\n        setByEnv: PropTypes.bool.isRequired,\n        disabledText: PropTypes.node,\n        helpText: PropTypes.node.isRequired,\n    };\n\n    static defaultProps = {\n        trueText: (\n            <FormattedMessage\n                id='admin.true'\n                defaultMessage='true'\n            />\n        ),\n        falseText: (\n            <FormattedMessage\n                id='admin.false'\n                defaultMessage='false'\n            />\n        ),\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onChange(this.props.id, e.target.value === 'true');\n    }\n\n    render() {\n        let helpText;\n        if (this.props.disabled && this.props.disabledText) {\n            helpText = (\n                <div>\n                    <span className='admin-console__disabled-text'>\n                        {this.props.disabledText}\n                    </span>\n                    {this.props.helpText}\n                </div>\n            );\n        } else {\n            helpText = this.props.helpText;\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <a name={this.props.id}/>\n                <label className='radio-inline'>\n                    <input\n                        type='radio'\n                        value='true'\n                        id={Utils.createSafeId(this.props.id) + 'true'}\n                        name={this.props.id}\n                        checked={this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.trueText}\n                </label>\n                <label className='radio-inline'>\n                    <input\n                        type='radio'\n                        value='false'\n                        id={Utils.createSafeId(this.props.id) + 'false'}\n                        name={this.props.id}\n                        checked={!this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.falseText}\n                </label>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting.jsx';\n\nexport default class DropdownSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    }\n\n    static defaultProps = {\n        isDisabled: false,\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <option\n                    value={value}\n                    key={value}\n                >\n                    {text}\n                </option>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <select\n                    className='form-control'\n                    id={this.props.id}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                >\n                    {options}\n                </select>\n            </Setting>\n        );\n    }\n}\n"],"sourceRoot":""}